; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	e:\WORK\test\zlib-1.2.8\compress.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_05IAIEPMAK@1?42?48?$AA@			; `string'
;	COMDAT ??_C@_05IAIEPMAK@1?42?48?$AA@
CONST	SEGMENT
??_C@_05IAIEPMAK@1?42?48?$AA@ DB '1.2.8', 00H		; `string'
PUBLIC	_compressBound@4
; Function compile flags: /Odtp
; File e:\work\test\zlib-1.2.8\compress.c
;	COMDAT _compressBound@4
_TEXT	SEGMENT
_sourceLen$ = 8						; size = 4
_compressBound@4 PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 79   :            (sourceLen >> 25) + 13;

  00003	8b 45 08	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00006	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  00009	03 45 08	 add	 eax, DWORD PTR _sourceLen$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  0000f	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  00012	03 c1		 add	 eax, ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  00017	c1 ea 19	 shr	 edx, 25			; 00000019H
  0001a	8d 44 10 0d	 lea	 eax, DWORD PTR [eax+edx+13]

; 80   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
_compressBound@4 ENDP
PUBLIC	_compress2@20
; Function compile flags: /Odtp
;	COMDAT _compress2@20
_TEXT	SEGMENT
tv77 = -64						; size = 4
_err$ = -60						; size = 4
_stream$ = -56						; size = 56
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_level$ = 24						; size = 4
_compress2@20 PROC					; COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H

; 29   :     z_stream stream;
; 30   :     int err;
; 31   : 
; 32   :     stream.next_in = (z_const Bytef *)source;

  00006	8b 45 10	 mov	 eax, DWORD PTR _source$[ebp]
  00009	89 45 c8	 mov	 DWORD PTR _stream$[ebp], eax

; 33   :     stream.avail_in = (uInt)sourceLen;

  0000c	8b 4d 14	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  0000f	89 4d cc	 mov	 DWORD PTR _stream$[ebp+4], ecx

; 34   : #ifdef MAXSEG_64K
; 35   :     /* Check for source > 64K on 16-bit machine: */
; 36   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
; 37   : #endif
; 38   :     stream.next_out = dest;

  00012	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00015	89 55 d4	 mov	 DWORD PTR _stream$[ebp+12], edx

; 39   :     stream.avail_out = (uInt)*destLen;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _destLen$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 4d d8	 mov	 DWORD PTR _stream$[ebp+16], ecx

; 40   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

  00020	8b 55 0c	 mov	 edx, DWORD PTR _destLen$[ebp]
  00023	8b 45 d8	 mov	 eax, DWORD PTR _stream$[ebp+16]
  00026	3b 02		 cmp	 eax, DWORD PTR [edx]
  00028	74 0a		 je	 SHORT $LN3@compress2
  0002a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  0002f	e9 85 00 00 00	 jmp	 $LN4@compress2
$LN3@compress2:

; 41   : 
; 42   :     stream.zalloc = (alloc_func)0;

  00034	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+32], 0

; 43   :     stream.zfree = (free_func)0;

  0003b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+36], 0

; 44   :     stream.opaque = (voidpf)0;

  00042	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _stream$[ebp+40], 0

; 45   : 
; 46   :     err = deflateInit(&stream, level);

  00049	6a 38		 push	 56			; 00000038H
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_05IAIEPMAK@1?42?48?$AA@
  00050	8b 4d 18	 mov	 ecx, DWORD PTR _level$[ebp]
  00053	51		 push	 ecx
  00054	8d 55 c8	 lea	 edx, DWORD PTR _stream$[ebp]
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _deflateInit_@16
  0005d	89 45 c4	 mov	 DWORD PTR _err$[ebp], eax

; 47   :     if (err != Z_OK) return err;

  00060	83 7d c4 00	 cmp	 DWORD PTR _err$[ebp], 0
  00064	74 05		 je	 SHORT $LN2@compress2
  00066	8b 45 c4	 mov	 eax, DWORD PTR _err$[ebp]
  00069	eb 4e		 jmp	 SHORT $LN4@compress2
$LN2@compress2:

; 48   : 
; 49   :     err = deflate(&stream, Z_FINISH);

  0006b	6a 04		 push	 4
  0006d	8d 45 c8	 lea	 eax, DWORD PTR _stream$[ebp]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _deflate@8
  00076	89 45 c4	 mov	 DWORD PTR _err$[ebp], eax

; 50   :     if (err != Z_STREAM_END) {

  00079	83 7d c4 01	 cmp	 DWORD PTR _err$[ebp], 1
  0007d	74 23		 je	 SHORT $LN1@compress2

; 51   :         deflateEnd(&stream);

  0007f	8d 4d c8	 lea	 ecx, DWORD PTR _stream$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _deflateEnd@4

; 52   :         return err == Z_OK ? Z_BUF_ERROR : err;

  00088	83 7d c4 00	 cmp	 DWORD PTR _err$[ebp], 0
  0008c	75 09		 jne	 SHORT $LN6@compress2
  0008e	c7 45 c0 fb ff
	ff ff		 mov	 DWORD PTR tv77[ebp], -5	; fffffffbH
  00095	eb 06		 jmp	 SHORT $LN7@compress2
$LN6@compress2:
  00097	8b 55 c4	 mov	 edx, DWORD PTR _err$[ebp]
  0009a	89 55 c0	 mov	 DWORD PTR tv77[ebp], edx
$LN7@compress2:
  0009d	8b 45 c0	 mov	 eax, DWORD PTR tv77[ebp]
  000a0	eb 17		 jmp	 SHORT $LN4@compress2
$LN1@compress2:

; 53   :     }
; 54   :     *destLen = stream.total_out;

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _destLen$[ebp]
  000a5	8b 4d dc	 mov	 ecx, DWORD PTR _stream$[ebp+20]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx

; 55   : 
; 56   :     err = deflateEnd(&stream);

  000aa	8d 55 c8	 lea	 edx, DWORD PTR _stream$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 _deflateEnd@4
  000b3	89 45 c4	 mov	 DWORD PTR _err$[ebp], eax

; 57   :     return err;

  000b6	8b 45 c4	 mov	 eax, DWORD PTR _err$[ebp]
$LN4@compress2:

; 58   : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 14 00	 ret	 20			; 00000014H
_compress2@20 ENDP
PUBLIC	_compress@16
; Function compile flags: /Odtp
;	COMDAT _compress@16
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_source$ = 16						; size = 4
_sourceLen$ = 20					; size = 4
_compress@16 PROC					; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00003	6a ff		 push	 -1
  00005	8b 45 14	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00008	50		 push	 eax
  00009	8b 4d 10	 mov	 ecx, DWORD PTR _source$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _destLen$[ebp]
  00010	52		 push	 edx
  00011	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _compress2@20

; 69   : }

  0001a	5d		 pop	 ebp
  0001b	c2 10 00	 ret	 16			; 00000010H
_compress@16 ENDP
END
