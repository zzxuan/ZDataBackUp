; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	e:\WORK\test\zlib-1.2.8\deflate.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_deflate_copyright
EXTRN	_match_init:PROC
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
EXTRN	_longest_match:PROC
	ORG $+2
_deflate_copyright DB ' deflate 1.2.8 Copyright 1995-2013 Jean-loup Gaill'
	DB	'y and Mark Adler ', 00H
	ORG $+4
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
?my_version@?1??deflateInit2_@@9@9 DB '1.2.8', 00H	; `deflateInit2_'::`2'::my_version
; Function compile flags: /Odtp
; File e:\work\test\zlib-1.2.8\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
_lm_init PROC						; COMDAT

; 1108 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1109 :     s->window_size = (ulg)2L*s->w_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00009	d1 e1		 shl	 ecx, 1
  0000b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0000e	89 4a 3c	 mov	 DWORD PTR [edx+60], ecx

; 1110 : 
; 1111 :     CLEAR_HASH(s);

  00011	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00014	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00017	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0001d	33 d2		 xor	 edx, edx
  0001f	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00024	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00027	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0002a	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  0002e	52		 push	 edx
  0002f	6a 00		 push	 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _memset
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1112 : 
; 1113 :     /* Set the default configuration parameters:
; 1114 :      */
; 1115 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  00040	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00043	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00049	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0004c	0f b7 88 02 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+2]
  00053	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00056	89 8a 80 00 00
	00		 mov	 DWORD PTR [edx+128], ecx

; 1116 :     s->good_match       = configuration_table[s->level].good_length;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005f	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00065	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00068	0f b7 91 00 00
	00 00		 movzx	 edx, WORD PTR _configuration_table[ecx]
  0006f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00072	89 90 8c 00 00
	00		 mov	 DWORD PTR [eax+140], edx

; 1117 :     s->nice_match       = configuration_table[s->level].nice_length;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007b	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00081	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00084	0f b7 82 04 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+4]
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008e	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 1118 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  0009d	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000a0	0f b7 88 06 00
	00 00		 movzx	 ecx, WORD PTR _configuration_table[eax+6]
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	89 4a 7c	 mov	 DWORD PTR [edx+124], ecx

; 1119 : 
; 1120 :     s->strstart = 0;

  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 1121 :     s->block_start = 0L;

  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 1122 :     s->lookahead = 0;

  000c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c4	c7 42 74 00 00
	00 00		 mov	 DWORD PTR [edx+116], 0

; 1123 :     s->insert = 0;

  000cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ce	c7 80 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5812], 0

; 1124 :     s->match_length = s->prev_length = MIN_MATCH-1;

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000db	c7 41 78 02 00
	00 00		 mov	 DWORD PTR [ecx+120], 2
  000e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e5	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 1125 :     s->match_available = 0;

  000ec	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ef	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0

; 1126 :     s->ins_h = 0;

  000f6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f9	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1127 : #ifndef FASTEST
; 1128 : #ifdef ASMV
; 1129 :     match_init(); /* initialize the asm code */

  00100	e8 00 00 00 00	 call	 _match_init

; 1130 : #endif
; 1131 : #endif
; 1132 : }

  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
PUBLIC	_deflateEnd@4
; Function compile flags: /Odtp
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 981  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 982  :     int status;
; 983  : 
; 984  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00008	74 09		 je	 SHORT $LN6@deflateEnd
  0000a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00011	75 0a		 jne	 SHORT $LN7@deflateEnd
$LN6@deflateEnd:
  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00018	e9 15 01 00 00	 jmp	 $LN8@deflateEnd
$LN7@deflateEnd:

; 985  : 
; 986  :     status = strm->state->status;

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00020	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	89 45 fc	 mov	 DWORD PTR _status$[ebp], eax

; 987  :     if (status != INIT_STATE &&
; 988  :         status != EXTRA_STATE &&
; 989  :         status != NAME_STATE &&
; 990  :         status != COMMENT_STATE &&
; 991  :         status != HCRC_STATE &&
; 992  :         status != BUSY_STATE &&
; 993  :         status != FINISH_STATE) {

  00029	83 7d fc 2a	 cmp	 DWORD PTR _status$[ebp], 42 ; 0000002aH
  0002d	74 31		 je	 SHORT $LN5@deflateEnd
  0002f	83 7d fc 45	 cmp	 DWORD PTR _status$[ebp], 69 ; 00000045H
  00033	74 2b		 je	 SHORT $LN5@deflateEnd
  00035	83 7d fc 49	 cmp	 DWORD PTR _status$[ebp], 73 ; 00000049H
  00039	74 25		 je	 SHORT $LN5@deflateEnd
  0003b	83 7d fc 5b	 cmp	 DWORD PTR _status$[ebp], 91 ; 0000005bH
  0003f	74 1f		 je	 SHORT $LN5@deflateEnd
  00041	83 7d fc 67	 cmp	 DWORD PTR _status$[ebp], 103 ; 00000067H
  00045	74 19		 je	 SHORT $LN5@deflateEnd
  00047	83 7d fc 71	 cmp	 DWORD PTR _status$[ebp], 113 ; 00000071H
  0004b	74 13		 je	 SHORT $LN5@deflateEnd
  0004d	81 7d fc 9a 02
	00 00		 cmp	 DWORD PTR _status$[ebp], 666 ; 0000029aH
  00054	74 0a		 je	 SHORT $LN5@deflateEnd

; 994  :       return Z_STREAM_ERROR;

  00056	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005b	e9 d2 00 00 00	 jmp	 $LN8@deflateEnd
$LN5@deflateEnd:

; 995  :     }
; 996  : 
; 997  :     /* Deallocate in reverse order of allocations: */
; 998  :     TRY_FREE(strm, strm->state->pending_buf);

  00060	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00063	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00066	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0006a	74 1c		 je	 SHORT $LN4@deflateEnd
  0006c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0006f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00072	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00075	52		 push	 edx
  00076	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00079	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0007c	51		 push	 ecx
  0007d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00080	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00083	ff d0		 call	 eax
  00085	83 c4 08	 add	 esp, 8
$LN4@deflateEnd:

; 999  :     TRY_FREE(strm, strm->state->head);

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0008b	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0008e	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00092	74 1c		 je	 SHORT $LN3@deflateEnd
  00094	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00097	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0009a	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0009d	52		 push	 edx
  0009e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000a1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000a4	51		 push	 ecx
  000a5	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000a8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000ab	ff d0		 call	 eax
  000ad	83 c4 08	 add	 esp, 8
$LN3@deflateEnd:

; 1000 :     TRY_FREE(strm, strm->state->prev);

  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000b3	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000b6	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  000ba	74 1c		 je	 SHORT $LN2@deflateEnd
  000bc	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000bf	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000c2	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000c5	52		 push	 edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c9	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000cc	51		 push	 ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000d0	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000d3	ff d0		 call	 eax
  000d5	83 c4 08	 add	 esp, 8
$LN2@deflateEnd:

; 1001 :     TRY_FREE(strm, strm->state->window);

  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000db	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000de	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  000e2	74 1c		 je	 SHORT $LN1@deflateEnd
  000e4	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000e7	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000ea	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  000ed	52		 push	 edx
  000ee	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000f1	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000f4	51		 push	 ecx
  000f5	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000f8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000fb	ff d0		 call	 eax
  000fd	83 c4 08	 add	 esp, 8
$LN1@deflateEnd:

; 1002 : 
; 1003 :     ZFREE(strm, strm->state);

  00100	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00103	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00106	52		 push	 edx
  00107	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0010a	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0010d	51		 push	 ecx
  0010e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00111	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00114	ff d0		 call	 eax
  00116	83 c4 08	 add	 esp, 8

; 1004 :     strm->state = Z_NULL;

  00119	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0011c	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 1005 : 
; 1006 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  00123	33 c0		 xor	 eax, eax
  00125	83 7d fc 71	 cmp	 DWORD PTR _status$[ebp], 113 ; 00000071H
  00129	0f 95 c0	 setne	 al
  0012c	83 e8 01	 sub	 eax, 1
  0012f	83 e0 fd	 and	 eax, -3			; fffffffdH
$LN8@deflateEnd:

; 1007 : }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _flush_pending
_TEXT	SEGMENT
_len$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush_pending PROC					; COMDAT

; 644  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 645  :     unsigned len;
; 646  :     deflate_state *s = strm->state;

  00006	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00009	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000c	89 4d fc	 mov	 DWORD PTR _s$[ebp], ecx

; 647  : 
; 648  :     _tr_flush_bits(s);

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00012	52		 push	 edx
  00013	e8 00 00 00 00	 call	 __tr_flush_bits
  00018	83 c4 04	 add	 esp, 4

; 649  :     len = s->pending;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0001e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00021	89 4d f8	 mov	 DWORD PTR _len$[ebp], ecx

; 650  :     if (len > strm->avail_out) len = strm->avail_out;

  00024	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00027	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0002a	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0002d	76 09		 jbe	 SHORT $LN3@flush_pend
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00032	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00035	89 55 f8	 mov	 DWORD PTR _len$[ebp], edx
$LN3@flush_pend:

; 651  :     if (len == 0) return;

  00038	83 7d f8 00	 cmp	 DWORD PTR _len$[ebp], 0
  0003c	75 02		 jne	 SHORT $LN2@flush_pend
  0003e	eb 7a		 jmp	 SHORT $LN4@flush_pend
$LN2@flush_pend:

; 652  : 
; 653  :     zmemcpy(strm->next_out, s->pending_out, len);

  00040	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  00043	50		 push	 eax
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00047	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004a	52		 push	 edx
  0004b	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0004e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _memcpy
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 654  :     strm->next_out  += len;

  0005a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0005d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00060	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00066	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 655  :     s->pending_out  += len;

  00069	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0006c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0006f	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00075	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 656  :     strm->total_out += len;

  00078	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0007b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007e	03 45 f8	 add	 eax, DWORD PTR _len$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00084	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 657  :     strm->avail_out  -= len;

  00087	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0008a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008d	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00093	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 658  :     s->pending -= len;

  00096	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00099	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009c	2b 45 f8	 sub	 eax, DWORD PTR _len$[ebp]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000a2	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 659  :     if (s->pending == 0) {

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a8	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  000ac	75 0c		 jne	 SHORT $LN4@flush_pend

; 660  :         s->pending_out = s->pending_buf;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000b4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000b7	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN4@flush_pend:

; 661  :     }
; 662  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_flush_pending ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_s$ = 8							; size = 4
_b$ = 12						; size = 4
_putShortMSB PROC					; COMDAT

; 631  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  :     put_byte(s, (Byte)(b >> 8));

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	c1 e8 08	 shr	 eax, 8
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00015	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00018	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0001e	83 c0 01	 add	 eax, 1
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00024	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 633  :     put_byte(s, (Byte)(b & 0xff));

  00027	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0002a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	83 c2 01	 add	 edx, 1
  00048	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 634  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
PUBLIC	_deflateBound@8
; Function compile flags: /Odtp
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
tv77 = -20						; size = 4
_str$ = -16						; size = 4
_wraplen$ = -12						; size = 4
_complen$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 569  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 570  :     deflate_state *s;
; 571  :     uLong complen, wraplen;
; 572  :     Bytef *str;
; 573  : 
; 574  :     /* conservative upper bound for compressed data */
; 575  :     complen = sourceLen +
; 576  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00009	83 c0 07	 add	 eax, 7
  0000c	c1 e8 03	 shr	 eax, 3
  0000f	03 45 0c	 add	 eax, DWORD PTR _sourceLen$[ebp]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00015	83 c1 3f	 add	 ecx, 63			; 0000003fH
  00018	c1 e9 06	 shr	 ecx, 6
  0001b	8d 54 08 05	 lea	 edx, DWORD PTR [eax+ecx+5]
  0001f	89 55 f8	 mov	 DWORD PTR _complen$[ebp], edx

; 577  : 
; 578  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 579  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00022	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00026	74 09		 je	 SHORT $LN20@deflateBou
  00028	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0002b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0002f	75 0b		 jne	 SHORT $LN21@deflateBou
$LN20@deflateBou:

; 580  :         return complen + 6;

  00031	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  00034	83 c0 06	 add	 eax, 6
  00037	e9 32 01 00 00	 jmp	 $LN22@deflateBou
$LN21@deflateBou:

; 581  : 
; 582  :     /* compute wrapper length */
; 583  :     s = strm->state;

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00042	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 584  :     switch (s->wrap) {

  00045	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00048	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0004b	89 4d ec	 mov	 DWORD PTR tv77[ebp], ecx
  0004e	83 7d ec 00	 cmp	 DWORD PTR tv77[ebp], 0
  00052	74 11		 je	 SHORT $LN17@deflateBou
  00054	83 7d ec 01	 cmp	 DWORD PTR tv77[ebp], 1
  00058	74 17		 je	 SHORT $LN16@deflateBou
  0005a	83 7d ec 02	 cmp	 DWORD PTR tv77[ebp], 2
  0005e	74 29		 je	 SHORT $LN15@deflateBou
  00060	e9 ca 00 00 00	 jmp	 $LN3@deflateBou
$LN17@deflateBou:

; 585  :     case 0:                                 /* raw deflate */
; 586  :         wraplen = 0;

  00065	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 0

; 587  :         break;

  0006c	e9 c5 00 00 00	 jmp	 $LN18@deflateBou
$LN16@deflateBou:

; 588  :     case 1:                                 /* zlib wrapper */
; 589  :         wraplen = 6 + (s->strstart ? 4 : 0);

  00071	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00074	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00077	f7 d8		 neg	 eax
  00079	1b c0		 sbb	 eax, eax
  0007b	83 e0 04	 and	 eax, 4
  0007e	83 c0 06	 add	 eax, 6
  00081	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 590  :         break;

  00084	e9 ad 00 00 00	 jmp	 $LN18@deflateBou
$LN15@deflateBou:

; 591  :     case 2:                                 /* gzip wrapper */
; 592  :         wraplen = 18;

  00089	c7 45 f4 12 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 18 ; 00000012H

; 593  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00090	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00093	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00097	0f 84 90 00 00
	00		 je	 $LN14@deflateBou

; 594  :             if (s->gzhead->extra != Z_NULL)

  0009d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000a3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000a7	74 13		 je	 SHORT $LN13@deflateBou

; 595  :                 wraplen += 2 + s->gzhead->extra_len;

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ac	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000af	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  000b5	8d 54 01 02	 lea	 edx, DWORD PTR [ecx+eax+2]
  000b9	89 55 f4	 mov	 DWORD PTR _wraplen$[ebp], edx
$LN13@deflateBou:

; 596  :             str = s->gzhead->name;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000bf	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  000c2	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000c5	89 55 f0	 mov	 DWORD PTR _str$[ebp], edx

; 597  :             if (str != Z_NULL)

  000c8	83 7d f0 00	 cmp	 DWORD PTR _str$[ebp], 0
  000cc	74 1c		 je	 SHORT $LN12@deflateBou
$LN11@deflateBou:

; 598  :                 do {
; 599  :                     wraplen++;

  000ce	8b 45 f4	 mov	 eax, DWORD PTR _wraplen$[ebp]
  000d1	83 c0 01	 add	 eax, 1
  000d4	89 45 f4	 mov	 DWORD PTR _wraplen$[ebp], eax

; 600  :                 } while (*str++);

  000d7	8b 4d f0	 mov	 ecx, DWORD PTR _str$[ebp]
  000da	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000dd	8b 45 f0	 mov	 eax, DWORD PTR _str$[ebp]
  000e0	83 c0 01	 add	 eax, 1
  000e3	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax
  000e6	85 d2		 test	 edx, edx
  000e8	75 e4		 jne	 SHORT $LN11@deflateBou
$LN12@deflateBou:

; 601  :             str = s->gzhead->comment;

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ed	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  000f0	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f3	89 45 f0	 mov	 DWORD PTR _str$[ebp], eax

; 602  :             if (str != Z_NULL)

  000f6	83 7d f0 00	 cmp	 DWORD PTR _str$[ebp], 0
  000fa	74 1c		 je	 SHORT $LN8@deflateBou
$LN7@deflateBou:

; 603  :                 do {
; 604  :                     wraplen++;

  000fc	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  000ff	83 c1 01	 add	 ecx, 1
  00102	89 4d f4	 mov	 DWORD PTR _wraplen$[ebp], ecx

; 605  :                 } while (*str++);

  00105	8b 55 f0	 mov	 edx, DWORD PTR _str$[ebp]
  00108	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0010b	8b 4d f0	 mov	 ecx, DWORD PTR _str$[ebp]
  0010e	83 c1 01	 add	 ecx, 1
  00111	89 4d f0	 mov	 DWORD PTR _str$[ebp], ecx
  00114	85 c0		 test	 eax, eax
  00116	75 e4		 jne	 SHORT $LN7@deflateBou
$LN8@deflateBou:

; 606  :             if (s->gzhead->hcrc)

  00118	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0011b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0011e	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00122	74 09		 je	 SHORT $LN14@deflateBou

; 607  :                 wraplen += 2;

  00124	8b 4d f4	 mov	 ecx, DWORD PTR _wraplen$[ebp]
  00127	83 c1 02	 add	 ecx, 2
  0012a	89 4d f4	 mov	 DWORD PTR _wraplen$[ebp], ecx
$LN14@deflateBou:

; 608  :         }
; 609  :         break;

  0012d	eb 07		 jmp	 SHORT $LN18@deflateBou
$LN3@deflateBou:

; 610  :     default:                                /* for compiler happiness */
; 611  :         wraplen = 6;

  0012f	c7 45 f4 06 00
	00 00		 mov	 DWORD PTR _wraplen$[ebp], 6
$LN18@deflateBou:

; 612  :     }
; 613  : 
; 614  :     /* if not default parameters, return conservative bound */
; 615  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  00136	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00139	83 7a 30 0f	 cmp	 DWORD PTR [edx+48], 15	; 0000000fH
  0013d	75 09		 jne	 SHORT $LN1@deflateBou
  0013f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00142	83 78 50 0f	 cmp	 DWORD PTR [eax+80], 15	; 0000000fH
  00146	74 08		 je	 SHORT $LN2@deflateBou
$LN1@deflateBou:

; 616  :         return complen + wraplen;

  00148	8b 45 f8	 mov	 eax, DWORD PTR _complen$[ebp]
  0014b	03 45 f4	 add	 eax, DWORD PTR _wraplen$[ebp]
  0014e	eb 1e		 jmp	 SHORT $LN22@deflateBou
$LN2@deflateBou:

; 617  : 
; 618  :     /* default settings: return tight bound for that case */
; 619  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +
; 620  :            (sourceLen >> 25) + 13 - 6 + wraplen;

  00150	8b 4d 0c	 mov	 ecx, DWORD PTR _sourceLen$[ebp]
  00153	c1 e9 0c	 shr	 ecx, 12			; 0000000cH
  00156	03 4d 0c	 add	 ecx, DWORD PTR _sourceLen$[ebp]
  00159	8b 55 0c	 mov	 edx, DWORD PTR _sourceLen$[ebp]
  0015c	c1 ea 0e	 shr	 edx, 14			; 0000000eH
  0015f	03 ca		 add	 ecx, edx
  00161	8b 45 0c	 mov	 eax, DWORD PTR _sourceLen$[ebp]
  00164	c1 e8 19	 shr	 eax, 25			; 00000019H
  00167	03 4d f4	 add	 ecx, DWORD PTR _wraplen$[ebp]
  0016a	8d 44 08 07	 lea	 eax, DWORD PTR [eax+ecx+7]
$LN22@deflateBou:

; 621  : }

  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateTune@20
; Function compile flags: /Odtp
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 537  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 538  :     deflate_state *s;
; 539  : 
; 540  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00004	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00008	74 09		 je	 SHORT $LN1@deflateTun
  0000a	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000d	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00011	75 07		 jne	 SHORT $LN2@deflateTun
$LN1@deflateTun:
  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00018	eb 38		 jmp	 SHORT $LN3@deflateTun
$LN2@deflateTun:

; 541  :     s = strm->state;

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0001d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00020	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 542  :     s->good_match = good_length;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _good_length$[ebp]
  00029	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 543  :     s->max_lazy_match = max_lazy;

  0002f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00032	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00035	89 82 80 00 00
	00		 mov	 DWORD PTR [edx+128], eax

; 544  :     s->nice_match = nice_length;

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0003e	8b 55 14	 mov	 edx, DWORD PTR _nice_length$[ebp]
  00041	89 91 90 00 00
	00		 mov	 DWORD PTR [ecx+144], edx

; 545  :     s->max_chain_length = max_chain;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004a	8b 4d 18	 mov	 ecx, DWORD PTR _max_chain$[ebp]
  0004d	89 48 7c	 mov	 DWORD PTR [eax+124], ecx

; 546  :     return Z_OK;

  00050	33 c0		 xor	 eax, eax
$LN3@deflateTun:

; 547  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
PUBLIC	_deflatePrime@12
; Function compile flags: /Odtp
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_s$ = -8						; size = 4
_put$ = -4						; size = 4
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 469  :     deflate_state *s;
; 470  :     int put;
; 471  : 
; 472  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00006	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  0000a	74 09		 je	 SHORT $LN6@deflatePri
  0000c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000f	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00013	75 0a		 jne	 SHORT $LN7@deflatePri
$LN6@deflatePri:
  00015	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0001a	e9 b7 00 00 00	 jmp	 $LN8@deflatePri
$LN7@deflatePri:

; 473  :     s = strm->state;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00022	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00025	89 55 f8	 mov	 DWORD PTR _s$[ebp], edx

; 474  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  00028	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0002b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002e	83 c1 02	 add	 ecx, 2
  00031	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00034	39 8a a4 16 00
	00		 cmp	 DWORD PTR [edx+5796], ecx
  0003a	73 0a		 jae	 SHORT $LN4@deflatePri

; 475  :         return Z_BUF_ERROR;

  0003c	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00041	e9 90 00 00 00	 jmp	 $LN8@deflatePri
$LN4@deflatePri:

; 476  :     do {
; 477  :         put = Buf_size - s->bi_valid;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00049	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0004e	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00054	89 4d fc	 mov	 DWORD PTR _put$[ebp], ecx

; 478  :         if (put > bits)

  00057	8b 55 fc	 mov	 edx, DWORD PTR _put$[ebp]
  0005a	3b 55 0c	 cmp	 edx, DWORD PTR _bits$[ebp]
  0005d	7e 06		 jle	 SHORT $LN1@deflatePri

; 479  :             put = bits;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _bits$[ebp]
  00062	89 45 fc	 mov	 DWORD PTR _put$[ebp], eax
$LN1@deflatePri:

; 480  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  00065	ba 01 00 00 00	 mov	 edx, 1
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _put$[ebp]
  0006d	d3 e2		 shl	 edx, cl
  0006f	83 ea 01	 sub	 edx, 1
  00072	23 55 10	 and	 edx, DWORD PTR _value$[ebp]
  00075	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00078	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0007e	d3 e2		 shl	 edx, cl
  00080	0f b7 ca	 movzx	 ecx, dx
  00083	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00086	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0008d	0b c1		 or	 eax, ecx
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00092	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 481  :         s->bi_valid += put;

  00099	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000a2	03 45 fc	 add	 eax, DWORD PTR _put$[ebp]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000a8	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax

; 482  :         _tr_flush_bits(s);

  000ae	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 __tr_flush_bits
  000b7	83 c4 04	 add	 esp, 4

; 483  :         value >>= put;

  000ba	8b 45 10	 mov	 eax, DWORD PTR _value$[ebp]
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _put$[ebp]
  000c0	d3 f8		 sar	 eax, cl
  000c2	89 45 10	 mov	 DWORD PTR _value$[ebp], eax

; 484  :         bits -= put;

  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR _bits$[ebp]
  000c8	2b 4d fc	 sub	 ecx, DWORD PTR _put$[ebp]
  000cb	89 4d 0c	 mov	 DWORD PTR _bits$[ebp], ecx

; 485  :     } while (bits);

  000ce	0f 85 72 ff ff
	ff		 jne	 $LN4@deflatePri

; 486  :     return Z_OK;

  000d4	33 c0		 xor	 eax, eax
$LN8@deflatePri:

; 487  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
PUBLIC	_deflatePending@12
; Function compile flags: /Odtp
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00007	74 09		 je	 SHORT $LN3@deflatePen
  00009	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000c	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00010	75 07		 jne	 SHORT $LN4@deflatePen
$LN3@deflatePen:
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	eb 2d		 jmp	 SHORT $LN5@deflatePen
$LN4@deflatePen:

; 456  :     if (pending != Z_NULL)

  00019	83 7d 0c 00	 cmp	 DWORD PTR _pending$[ebp], 0
  0001d	74 0e		 je	 SHORT $LN2@deflatePen

; 457  :         *pending = strm->state->pending;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00022	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00025	8b 45 0c	 mov	 eax, DWORD PTR _pending$[ebp]
  00028	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@deflatePen:

; 458  :     if (bits != Z_NULL)

  0002d	83 7d 10 00	 cmp	 DWORD PTR _bits$[ebp], 0
  00031	74 11		 je	 SHORT $LN1@deflatePen

; 459  :         *bits = strm->state->bi_valid;

  00033	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00036	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  0003c	8b 90 bc 16 00
	00		 mov	 edx, DWORD PTR [eax+5820]
  00042	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@deflatePen:

; 460  :     return Z_OK;

  00044	33 c0		 xor	 eax, eax
$LN5@deflatePen:

; 461  : }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetHeader@8
; Function compile flags: /Odtp
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 443  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  00003	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00007	74 09		 je	 SHORT $LN2@deflateSet
  00009	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000c	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00010	75 07		 jne	 SHORT $LN3@deflateSet
$LN2@deflateSet:
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	eb 21		 jmp	 SHORT $LN4@deflateSet
$LN3@deflateSet:

; 444  :     if (strm->state->wrap != 2) return Z_STREAM_ERROR;

  00019	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0001c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001f	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  00023	74 07		 je	 SHORT $LN1@deflateSet
  00025	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0002a	eb 0e		 jmp	 SHORT $LN4@deflateSet
$LN1@deflateSet:

; 445  :     strm->state->gzhead = head;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0002f	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00032	8b 55 0c	 mov	 edx, DWORD PTR _head$[ebp]
  00035	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 446  :     return Z_OK;

  00038	33 c0		 xor	 eax, eax
$LN4@deflateSet:

; 447  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
; Function compile flags: /Odtp
;	COMDAT _read_buf
_TEXT	SEGMENT
_len$ = -4						; size = 4
_strm$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_read_buf PROC						; COMDAT

; 1080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1081 :     unsigned len = strm->avail_in;

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000a	89 4d fc	 mov	 DWORD PTR _len$[ebp], ecx

; 1082 : 
; 1083 :     if (len > size) len = size;

  0000d	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00010	3b 55 10	 cmp	 edx, DWORD PTR _size$[ebp]
  00013	76 06		 jbe	 SHORT $LN5@read_buf
  00015	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR _len$[ebp], eax
$LN5@read_buf:

; 1084 :     if (len == 0) return 0;

  0001b	83 7d fc 00	 cmp	 DWORD PTR _len$[ebp], 0
  0001f	75 07		 jne	 SHORT $LN4@read_buf
  00021	33 c0		 xor	 eax, eax
  00023	e9 92 00 00 00	 jmp	 $LN6@read_buf
$LN4@read_buf:

; 1085 : 
; 1086 :     strm->avail_in  -= len;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002e	2b 55 fc	 sub	 edx, DWORD PTR _len$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00034	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1087 : 
; 1088 :     zmemcpy(buf, strm->next_in, len);

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0003e	8b 02		 mov	 eax, DWORD PTR [edx]
  00040	50		 push	 eax
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _memcpy
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1089 :     if (strm->state->wrap == 1) {

  0004d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00050	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00053	83 78 18 01	 cmp	 DWORD PTR [eax+24], 1
  00057	75 1c		 jne	 SHORT $LN3@read_buf

; 1090 :         strm->adler = adler32(strm->adler, buf, len);

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _len$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00060	52		 push	 edx
  00061	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00064	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 _adler32@12
  0006d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00070	89 42 30	 mov	 DWORD PTR [edx+48], eax
  00073	eb 26		 jmp	 SHORT $LN2@read_buf
$LN3@read_buf:

; 1091 :     }
; 1092 : #ifdef GZIP
; 1093 :     else if (strm->state->wrap == 2) {

  00075	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00078	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0007b	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  0007f	75 1a		 jne	 SHORT $LN2@read_buf

; 1094 :         strm->adler = crc32(strm->adler, buf, len);

  00081	8b 55 fc	 mov	 edx, DWORD PTR _len$[ebp]
  00084	52		 push	 edx
  00085	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0008c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _crc32@12
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00098	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN2@read_buf:

; 1095 :     }
; 1096 : #endif
; 1097 :     strm->next_in  += len;

  0009b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0009e	8b 02		 mov	 eax, DWORD PTR [edx]
  000a0	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax

; 1098 :     strm->total_in += len;

  000a8	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000ab	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ae	03 45 fc	 add	 eax, DWORD PTR _len$[ebp]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  000b4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1099 : 
; 1100 :     return (int)len;

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _len$[ebp]
$LN6@read_buf:

; 1101 : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
PUBLIC	_deflateCopy@8
; Function compile flags: /Odtp
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_ss$ = -12						; size = 4
_ds$ = -8						; size = 4
_overlay$ = -4						; size = 4
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1018 : #ifdef MAXSEG_64K
; 1019 :     return Z_STREAM_ERROR;
; 1020 : #else
; 1021 :     deflate_state *ds;
; 1022 :     deflate_state *ss;
; 1023 :     ushf *overlay;
; 1024 : 
; 1025 : 
; 1026 :     if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {

  00006	83 7d 0c 00	 cmp	 DWORD PTR _source$[ebp], 0
  0000a	74 0f		 je	 SHORT $LN4@deflateCop
  0000c	83 7d 08 00	 cmp	 DWORD PTR _dest$[ebp], 0
  00010	74 09		 je	 SHORT $LN4@deflateCop
  00012	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00015	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00019	75 0a		 jne	 SHORT $LN5@deflateCop
$LN4@deflateCop:

; 1027 :         return Z_STREAM_ERROR;

  0001b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00020	e9 2f 02 00 00	 jmp	 $LN6@deflateCop
$LN5@deflateCop:

; 1028 :     }
; 1029 : 
; 1030 :     ss = source->state;

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00028	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002b	89 55 f4	 mov	 DWORD PTR _ss$[ebp], edx

; 1031 : 
; 1032 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0002e	6a 38		 push	 56			; 00000038H
  00030	8b 45 0c	 mov	 eax, DWORD PTR _source$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _memcpy
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1033 : 
; 1034 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00040	68 c4 16 00 00	 push	 5828			; 000016c4H
  00045	6a 01		 push	 1
  00047	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0004a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00051	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00054	ff d2		 call	 edx
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	89 45 f8	 mov	 DWORD PTR _ds$[ebp], eax

; 1035 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  0005c	83 7d f8 00	 cmp	 DWORD PTR _ds$[ebp], 0
  00060	75 0a		 jne	 SHORT $LN3@deflateCop
  00062	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00067	e9 e8 01 00 00	 jmp	 $LN6@deflateCop
$LN3@deflateCop:

; 1036 :     dest->state = (struct internal_state FAR *) ds;

  0006c	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0006f	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00072	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 1037 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00075	68 c4 16 00 00	 push	 5828			; 000016c4H
  0007a	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 _memcpy
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1038 :     ds->strm = dest;

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0008d	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00090	89 11		 mov	 DWORD PTR [ecx], edx

; 1039 : 
; 1040 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00092	6a 02		 push	 2
  00094	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00097	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  0009e	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000a1	50		 push	 eax
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000a5	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000a8	ff d2		 call	 edx
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  000b0	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 1041 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  000b3	6a 02		 push	 2
  000b5	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000b8	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000bb	50		 push	 eax
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000bf	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  000c2	52		 push	 edx
  000c3	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  000c6	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000c9	ff d1		 call	 ecx
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000d1	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1042 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  000d4	6a 02		 push	 2
  000d6	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  000d9	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000dc	51		 push	 ecx
  000dd	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  000e0	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000e3	50		 push	 eax
  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  000e7	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ea	ff d2		 call	 edx
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ef	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  000f2	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 1043 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  000f5	6a 04		 push	 4
  000f7	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  000fa	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00100	50		 push	 eax
  00101	8b 4d 08	 mov	 ecx, DWORD PTR _dest$[ebp]
  00104	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00107	52		 push	 edx
  00108	8b 45 08	 mov	 eax, DWORD PTR _dest$[ebp]
  0010b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0010e	ff d1		 call	 ecx
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
  00113	89 45 fc	 mov	 DWORD PTR _overlay$[ebp], eax

; 1044 :     ds->pending_buf = (uchf *) overlay;

  00116	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  00119	8b 45 fc	 mov	 eax, DWORD PTR _overlay$[ebp]
  0011c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1045 : 
; 1046 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
; 1047 :         ds->pending_buf == Z_NULL) {

  0011f	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00122	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00126	74 1b		 je	 SHORT $LN1@deflateCop
  00128	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  0012b	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  0012f	74 12		 je	 SHORT $LN1@deflateCop
  00131	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00134	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  00138	74 09		 je	 SHORT $LN1@deflateCop
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0013d	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00141	75 13		 jne	 SHORT $LN2@deflateCop
$LN1@deflateCop:

; 1048 :         deflateEnd (dest);

  00143	8b 55 08	 mov	 edx, DWORD PTR _dest$[ebp]
  00146	52		 push	 edx
  00147	e8 00 00 00 00	 call	 _deflateEnd@4

; 1049 :         return Z_MEM_ERROR;

  0014c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00151	e9 fe 00 00 00	 jmp	 $LN6@deflateCop
$LN2@deflateCop:

; 1050 :     }
; 1051 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1052 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  00156	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00159	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0015c	d1 e1		 shl	 ecx, 1
  0015e	51		 push	 ecx
  0015f	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  00162	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00165	50		 push	 eax
  00166	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00169	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 _memcpy
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1053 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  00175	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00178	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0017b	d1 e1		 shl	 ecx, 1
  0017d	51		 push	 ecx
  0017e	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  00181	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00184	50		 push	 eax
  00185	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00188	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 _memcpy
  00191	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1054 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00194	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00197	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0019a	d1 e1		 shl	 ecx, 1
  0019c	51		 push	 ecx
  0019d	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  001a0	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001a3	50		 push	 eax
  001a4	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001a7	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  001aa	52		 push	 edx
  001ab	e8 00 00 00 00	 call	 _memcpy
  001b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1055 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  001b3	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001b6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  001b9	51		 push	 ecx
  001ba	8b 55 f4	 mov	 edx, DWORD PTR _ss$[ebp]
  001bd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c0	50		 push	 eax
  001c1	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001c4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 _memcpy
  001cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1056 : 
; 1057 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  001d0	8b 45 f4	 mov	 eax, DWORD PTR _ss$[ebp]
  001d3	8b 4d f4	 mov	 ecx, DWORD PTR _ss$[ebp]
  001d6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  001d9	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  001dc	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001df	03 50 08	 add	 edx, DWORD PTR [eax+8]
  001e2	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  001e5	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1058 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);

  001e8	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  001eb	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  001f1	d1 e8		 shr	 eax, 1
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _overlay$[ebp]
  001f6	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  001f9	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  001fc	89 90 a4 16 00
	00		 mov	 DWORD PTR [eax+5796], edx

; 1059 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

  00202	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00205	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  0020b	6b d2 03	 imul	 edx, 3
  0020e	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00211	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00214	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00217	89 91 98 16 00
	00		 mov	 DWORD PTR [ecx+5784], edx

; 1060 : 
; 1061 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  0021d	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  00220	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00226	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00229	89 90 18 0b 00
	00		 mov	 DWORD PTR [eax+2840], edx

; 1062 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0022f	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  00232	81 c1 88 09 00
	00		 add	 ecx, 2440		; 00000988H
  00238	8b 55 f8	 mov	 edx, DWORD PTR _ds$[ebp]
  0023b	89 8a 24 0b 00
	00		 mov	 DWORD PTR [edx+2852], ecx

; 1063 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  00241	8b 45 f8	 mov	 eax, DWORD PTR _ds$[ebp]
  00244	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  00249	8b 4d f8	 mov	 ecx, DWORD PTR _ds$[ebp]
  0024c	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 1064 : 
; 1065 :     return Z_OK;

  00252	33 c0		 xor	 eax, eax
$LN6@deflateCop:

; 1066 : #endif /* MAXSEG_64K */
; 1067 : }

  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateResetKeep@4
; Function compile flags: /Odtp
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
tv131 = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 395  :     deflate_state *s;
; 396  : 
; 397  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 398  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {

  00006	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  0000a	74 1b		 je	 SHORT $LN2@deflateRes
  0000c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0000f	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00013	74 12		 je	 SHORT $LN2@deflateRes
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00018	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  0001c	74 09		 je	 SHORT $LN2@deflateRes
  0001e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00021	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  00025	75 0a		 jne	 SHORT $LN3@deflateRes
$LN2@deflateRes:

; 399  :         return Z_STREAM_ERROR;

  00027	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0002c	e9 bc 00 00 00	 jmp	 $LN4@deflateRes
$LN3@deflateRes:

; 400  :     }
; 401  : 
; 402  :     strm->total_in = strm->total_out = 0;

  00031	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00034	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0003e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 403  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */

  00045	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00048	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0

; 404  :     strm->data_type = Z_UNKNOWN;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00052	c7 40 2c 02 00
	00 00		 mov	 DWORD PTR [eax+44], 2

; 405  : 
; 406  :     s = (deflate_state *)strm->state;

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0005c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0005f	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 407  :     s->pending = 0;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00065	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 408  :     s->pending_out = s->pending_buf;

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00072	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00075	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 409  : 
; 410  :     if (s->wrap < 0) {

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0007b	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  0007f	7d 0e		 jge	 SHORT $LN1@deflateRes

; 411  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00081	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00084	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00087	f7 d8		 neg	 eax
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0008c	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN1@deflateRes:

; 412  :     }
; 413  :     s->status = s->wrap ? INIT_STATE : BUSY_STATE;

  0008f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00095	f7 d8		 neg	 eax
  00097	1b c0		 sbb	 eax, eax
  00099	83 e0 b9	 and	 eax, -71		; ffffffb9H
  0009c	83 c0 71	 add	 eax, 113		; 00000071H
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000a2	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 414  :     strm->adler =
; 415  : #ifdef GZIP
; 416  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 417  : #endif
; 418  :         adler32(0L, Z_NULL, 0);

  000a5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a8	83 7a 18 02	 cmp	 DWORD PTR [edx+24], 2
  000ac	75 10		 jne	 SHORT $LN6@deflateRes
  000ae	6a 00		 push	 0
  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
  000b4	e8 00 00 00 00	 call	 _crc32@12
  000b9	89 45 f8	 mov	 DWORD PTR tv131[ebp], eax
  000bc	eb 0e		 jmp	 SHORT $LN7@deflateRes
$LN6@deflateRes:
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	e8 00 00 00 00	 call	 _adler32@12
  000c9	89 45 f8	 mov	 DWORD PTR tv131[ebp], eax
$LN7@deflateRes:
  000cc	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR tv131[ebp]
  000d2	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 419  :     s->last_flush = Z_NO_FLUSH;

  000d5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000d8	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0

; 420  : 
; 421  :     _tr_init(s);

  000df	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 __tr_init
  000e8	83 c4 04	 add	 esp, 4

; 422  : 
; 423  :     return Z_OK;

  000eb	33 c0		 xor	 eax, eax
$LN4@deflateRes:

; 424  : }

  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
; Function compile flags: /Odtp
;	COMDAT _fill_window
_TEXT	SEGMENT
tv149 = -40						; size = 4
tv138 = -36						; size = 4
_curr$78092 = -32					; size = 4
_init$78094 = -28					; size = 4
_str$78084 = -24					; size = 4
_m$ = -20						; size = 4
_wsize$ = -16						; size = 4
_more$ = -12						; size = 4
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_s$ = 8							; size = 4
_fill_window PROC					; COMDAT

; 1392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 1393 :     register unsigned n, m;
; 1394 :     register Posf *p;
; 1395 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1396 :     uInt wsize = s->w_size;

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000d	89 4d f0	 mov	 DWORD PTR _wsize$[ebp], ecx
$LN26@fill_windo:

; 1397 : 
; 1398 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1399 : 
; 1400 :     do {
; 1401 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00010	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00013	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00016	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00019	2b 48 74	 sub	 ecx, DWORD PTR [eax+116]
  0001c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001f	2b 4a 6c	 sub	 ecx, DWORD PTR [edx+108]
  00022	89 4d f4	 mov	 DWORD PTR _more$[ebp], ecx

; 1402 : 
; 1403 :         /* Deal with !@#$% 64K limit: */
; 1404 :         if (sizeof(int) <= 2) {

  00025	33 c0		 xor	 eax, eax
  00027	74 2f		 je	 SHORT $LN23@fill_windo

; 1405 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {

  00029	83 7d f4 00	 cmp	 DWORD PTR _more$[ebp], 0
  0002d	75 1a		 jne	 SHORT $LN22@fill_windo
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00032	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  00036	75 11		 jne	 SHORT $LN22@fill_windo
  00038	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003b	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  0003f	75 08		 jne	 SHORT $LN22@fill_windo

; 1406 :                 more = wsize;

  00041	8b 45 f0	 mov	 eax, DWORD PTR _wsize$[ebp]
  00044	89 45 f4	 mov	 DWORD PTR _more$[ebp], eax
  00047	eb 0f		 jmp	 SHORT $LN23@fill_windo
$LN22@fill_windo:

; 1407 : 
; 1408 :             } else if (more == (unsigned)(-1)) {

  00049	83 7d f4 ff	 cmp	 DWORD PTR _more$[ebp], -1
  0004d	75 09		 jne	 SHORT $LN23@fill_windo

; 1409 :                 /* Very unlikely, but possible on 16 bit machine if
; 1410 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1411 :                  */
; 1412 :                 more--;

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _more$[ebp]
  00052	83 e9 01	 sub	 ecx, 1
  00055	89 4d f4	 mov	 DWORD PTR _more$[ebp], ecx
$LN23@fill_windo:

; 1413 :             }
; 1414 :         }
; 1415 : 
; 1416 :         /* If the window is almost full and there is insufficient lookahead,
; 1417 :          * move the upper half to the lower one to make room in the upper half.
; 1418 :          */
; 1419 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00058	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00061	8d 94 01 fa fe
	ff ff		 lea	 edx, DWORD PTR [ecx+eax-262]
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	39 50 6c	 cmp	 DWORD PTR [eax+108], edx
  0006e	0f 82 02 01 00
	00		 jb	 $LN19@fill_windo

; 1420 : 
; 1421 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize);

  00074	8b 4d f0	 mov	 ecx, DWORD PTR _wsize$[ebp]
  00077	51		 push	 ecx
  00078	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0007e	03 45 f0	 add	 eax, DWORD PTR _wsize$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00085	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _memcpy
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1422 :             s->match_start -= wsize;

  00091	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00094	8b 48 70	 mov	 ecx, DWORD PTR [eax+112]
  00097	2b 4d f0	 sub	 ecx, DWORD PTR _wsize$[ebp]
  0009a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009d	89 4a 70	 mov	 DWORD PTR [edx+112], ecx

; 1423 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  000a0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a3	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000a6	2b 4d f0	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ac	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1424 :             s->block_start -= (long) wsize;

  000af	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b2	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  000b5	2b 4d f0	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bb	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx

; 1425 : 
; 1426 :             /* Slide the hash table (could be avoided with 32 bit values
; 1427 :                at the expense of memory usage). We slide even when level == 0
; 1428 :                to keep the hash table consistent if we switch back to level > 0
; 1429 :                later. (Using level 0 permanently is not an optimal usage of
; 1430 :                zlib, so we don't care about this pathological case.)
; 1431 :              */
; 1432 :             n = s->hash_size;

  000be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000c4	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx

; 1433 :             p = &s->head[n];

  000c7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ca	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000d0	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  000d3	89 55 fc	 mov	 DWORD PTR _p$[ebp], edx
$LN18@fill_windo:

; 1434 :             do {
; 1435 :                 m = *--p;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  000d9	83 e8 02	 sub	 eax, 2
  000dc	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  000e2	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000e5	89 55 ec	 mov	 DWORD PTR _m$[ebp], edx

; 1436 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

  000e8	8b 45 ec	 mov	 eax, DWORD PTR _m$[ebp]
  000eb	3b 45 f0	 cmp	 eax, DWORD PTR _wsize$[ebp]
  000ee	72 0b		 jb	 SHORT $LN29@fill_windo
  000f0	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  000f3	2b 4d f0	 sub	 ecx, DWORD PTR _wsize$[ebp]
  000f6	89 4d dc	 mov	 DWORD PTR tv138[ebp], ecx
  000f9	eb 07		 jmp	 SHORT $LN30@fill_windo
$LN29@fill_windo:
  000fb	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv138[ebp], 0
$LN30@fill_windo:
  00102	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00105	66 8b 45 dc	 mov	 ax, WORD PTR tv138[ebp]
  00109	66 89 02	 mov	 WORD PTR [edx], ax

; 1437 :             } while (--n);

  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0010f	83 e9 01	 sub	 ecx, 1
  00112	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
  00115	75 bf		 jne	 SHORT $LN18@fill_windo

; 1438 : 
; 1439 :             n = wsize;

  00117	8b 55 f0	 mov	 edx, DWORD PTR _wsize$[ebp]
  0011a	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx

; 1440 : #ifndef FASTEST
; 1441 :             p = &s->prev[n];

  0011d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00120	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00123	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00126	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]
  00129	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
$LN15@fill_windo:

; 1442 :             do {
; 1443 :                 m = *--p;

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _p$[ebp]
  0012f	83 e9 02	 sub	 ecx, 2
  00132	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx
  00135	8b 55 fc	 mov	 edx, DWORD PTR _p$[ebp]
  00138	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0013b	89 45 ec	 mov	 DWORD PTR _m$[ebp], eax

; 1444 :                 *p = (Pos)(m >= wsize ? m-wsize : NIL);

  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _m$[ebp]
  00141	3b 4d f0	 cmp	 ecx, DWORD PTR _wsize$[ebp]
  00144	72 0b		 jb	 SHORT $LN31@fill_windo
  00146	8b 55 ec	 mov	 edx, DWORD PTR _m$[ebp]
  00149	2b 55 f0	 sub	 edx, DWORD PTR _wsize$[ebp]
  0014c	89 55 d8	 mov	 DWORD PTR tv149[ebp], edx
  0014f	eb 07		 jmp	 SHORT $LN32@fill_windo
$LN31@fill_windo:
  00151	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN32@fill_windo:
  00158	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0015b	66 8b 4d d8	 mov	 cx, WORD PTR tv149[ebp]
  0015f	66 89 08	 mov	 WORD PTR [eax], cx

; 1445 :                 /* If n is not on any hash chain, prev[n] is garbage but
; 1446 :                  * its value will never be used.
; 1447 :                  */
; 1448 :             } while (--n);

  00162	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00165	83 ea 01	 sub	 edx, 1
  00168	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
  0016b	75 bf		 jne	 SHORT $LN15@fill_windo

; 1449 : #endif
; 1450 :             more += wsize;

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _more$[ebp]
  00170	03 45 f0	 add	 eax, DWORD PTR _wsize$[ebp]
  00173	89 45 f4	 mov	 DWORD PTR _more$[ebp], eax
$LN19@fill_windo:

; 1451 :         }
; 1452 :         if (s->strm->avail_in == 0) break;

  00176	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00179	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017b	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0017f	75 05		 jne	 SHORT $LN12@fill_windo
  00181	e9 63 01 00 00	 jmp	 $LN24@fill_windo
$LN12@fill_windo:

; 1453 : 
; 1454 :         /* If there was no sliding:
; 1455 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1456 :          *    more == window_size - lookahead - strstart
; 1457 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1458 :          * => more >= window_size - 2*WSIZE + 2
; 1459 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1460 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1461 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1462 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1463 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1464 :          */
; 1465 :         Assert(more >= 2, "more < 2");
; 1466 : 
; 1467 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  00186	8b 45 f4	 mov	 eax, DWORD PTR _more$[ebp]
  00189	50		 push	 eax
  0018a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00190	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00193	03 50 6c	 add	 edx, DWORD PTR [eax+108]
  00196	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00199	03 51 74	 add	 edx, DWORD PTR [ecx+116]
  0019c	52		 push	 edx
  0019d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a0	8b 02		 mov	 eax, DWORD PTR [edx]
  001a2	50		 push	 eax
  001a3	e8 00 00 00 00	 call	 _read_buf
  001a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ab	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 1468 :         s->lookahead += n;

  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b1	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001b4	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  001b7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ba	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1469 : 
; 1470 :         /* Initialize the hash value now that we have some input: */
; 1471 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c0	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  001c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c6	03 90 b4 16 00
	00		 add	 edx, DWORD PTR [eax+5812]
  001cc	83 fa 03	 cmp	 edx, 3
  001cf	0f 82 f9 00 00
	00		 jb	 $LN25@fill_windo

; 1472 :             uInt str = s->strstart - s->insert;

  001d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001db	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  001de	2b 82 b4 16 00
	00		 sub	 eax, DWORD PTR [edx+5812]
  001e4	89 45 e8	 mov	 DWORD PTR _str$78084[ebp], eax

; 1473 :             s->ins_h = s->window[str];

  001e7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ea	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  001ed	8b 45 e8	 mov	 eax, DWORD PTR _str$78084[ebp]
  001f0	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  001f4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f7	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1474 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  001fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00200	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00203	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00206	d3 e2		 shl	 edx, cl
  00208	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0020e	8b 45 e8	 mov	 eax, DWORD PTR _str$78084[ebp]
  00211	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  00216	33 d1		 xor	 edx, ecx
  00218	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0021b	23 50 54	 and	 edx, DWORD PTR [eax+84]
  0021e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00221	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN10@fill_windo:

; 1475 : #if MIN_MATCH != 3
; 1476 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1477 : #endif
; 1478 :             while (s->insert) {

  00224	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00227	83 ba b4 16 00
	00 00		 cmp	 DWORD PTR [edx+5812], 0
  0022e	0f 84 9a 00 00
	00		 je	 $LN25@fill_windo

; 1479 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00234	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00237	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0023a	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  0023d	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00240	d3 e2		 shl	 edx, cl
  00242	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00245	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00248	8b 45 e8	 mov	 eax, DWORD PTR _str$78084[ebp]
  0024b	0f b6 4c 01 02	 movzx	 ecx, BYTE PTR [ecx+eax+2]
  00250	33 d1		 xor	 edx, ecx
  00252	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00255	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0025b	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 1480 : #ifndef FASTEST
; 1481 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  0025e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00261	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00264	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00267	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0026a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026d	8b 75 e8	 mov	 esi, DWORD PTR _str$78084[ebp]
  00270	23 71 34	 and	 esi, DWORD PTR [ecx+52]
  00273	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00276	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00279	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  0027d	66 89 14 71	 mov	 WORD PTR [ecx+esi*2], dx

; 1482 : #endif
; 1483 :                 s->head[s->ins_h] = (Pos)str;

  00281	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00284	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00287	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0028a	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0028d	66 8b 55 e8	 mov	 dx, WORD PTR _str$78084[ebp]
  00291	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1484 :                 str++;

  00295	8b 45 e8	 mov	 eax, DWORD PTR _str$78084[ebp]
  00298	83 c0 01	 add	 eax, 1
  0029b	89 45 e8	 mov	 DWORD PTR _str$78084[ebp], eax

; 1485 :                 s->insert--;

  0029e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a1	8b 91 b4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5812]
  002a7	83 ea 01	 sub	 edx, 1
  002aa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ad	89 90 b4 16 00
	00		 mov	 DWORD PTR [eax+5812], edx

; 1486 :                 if (s->lookahead + s->insert < MIN_MATCH)

  002b3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b6	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  002b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002bc	03 90 b4 16 00
	00		 add	 edx, DWORD PTR [eax+5812]
  002c2	83 fa 03	 cmp	 edx, 3
  002c5	73 02		 jae	 SHORT $LN8@fill_windo

; 1487 :                     break;

  002c7	eb 05		 jmp	 SHORT $LN25@fill_windo
$LN8@fill_windo:

; 1488 :             }

  002c9	e9 56 ff ff ff	 jmp	 $LN10@fill_windo
$LN25@fill_windo:

; 1489 :         }
; 1490 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1491 :          * but this is not important since only literal bytes will be emitted.
; 1492 :          */
; 1493 : 
; 1494 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  002ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d1	81 79 74 06 01
	00 00		 cmp	 DWORD PTR [ecx+116], 262 ; 00000106H
  002d8	73 0f		 jae	 SHORT $LN24@fill_windo
  002da	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002dd	8b 02		 mov	 eax, DWORD PTR [edx]
  002df	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  002e3	0f 85 27 fd ff
	ff		 jne	 $LN26@fill_windo
$LN24@fill_windo:

; 1495 : 
; 1496 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1497 :      * written, then zero those bytes in order to avoid memory check reports of
; 1498 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1499 :      * the longest match routines.  Update the high water mark for the next
; 1500 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1501 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1502 :      */
; 1503 :     if (s->high_water < s->window_size) {

  002e9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ef	8b 81 c0 16 00
	00		 mov	 eax, DWORD PTR [ecx+5824]
  002f5	3b 42 3c	 cmp	 eax, DWORD PTR [edx+60]
  002f8	0f 83 e6 00 00
	00		 jae	 $LN27@fill_windo

; 1504 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  002fe	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00301	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00304	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00307	03 50 74	 add	 edx, DWORD PTR [eax+116]
  0030a	89 55 e0	 mov	 DWORD PTR _curr$78092[ebp], edx

; 1505 :         ulg init;
; 1506 : 
; 1507 :         if (s->high_water < curr) {

  0030d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00310	8b 91 c0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5824]
  00316	3b 55 e0	 cmp	 edx, DWORD PTR _curr$78092[ebp]
  00319	73 48		 jae	 SHORT $LN5@fill_windo

; 1508 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1509 :              * bytes or up to end of window, whichever is less.
; 1510 :              */
; 1511 :             init = s->window_size - curr;

  0031b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031e	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00321	2b 4d e0	 sub	 ecx, DWORD PTR _curr$78092[ebp]
  00324	89 4d e4	 mov	 DWORD PTR _init$78094[ebp], ecx

; 1512 :             if (init > WIN_INIT)

  00327	81 7d e4 02 01
	00 00		 cmp	 DWORD PTR _init$78094[ebp], 258 ; 00000102H
  0032e	76 07		 jbe	 SHORT $LN4@fill_windo

; 1513 :                 init = WIN_INIT;

  00330	c7 45 e4 02 01
	00 00		 mov	 DWORD PTR _init$78094[ebp], 258 ; 00000102H
$LN4@fill_windo:

; 1514 :             zmemzero(s->window + curr, (unsigned)init);

  00337	8b 55 e4	 mov	 edx, DWORD PTR _init$78094[ebp]
  0033a	52		 push	 edx
  0033b	6a 00		 push	 0
  0033d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00340	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00343	03 4d e0	 add	 ecx, DWORD PTR _curr$78092[ebp]
  00346	51		 push	 ecx
  00347	e8 00 00 00 00	 call	 _memset
  0034c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1515 :             s->high_water = curr + init;

  0034f	8b 55 e0	 mov	 edx, DWORD PTR _curr$78092[ebp]
  00352	03 55 e4	 add	 edx, DWORD PTR _init$78094[ebp]
  00355	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00358	89 90 c0 16 00
	00		 mov	 DWORD PTR [eax+5824], edx
  0035e	e9 81 00 00 00	 jmp	 $LN27@fill_windo
$LN5@fill_windo:

; 1516 :         }
; 1517 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00363	8b 4d e0	 mov	 ecx, DWORD PTR _curr$78092[ebp]
  00366	81 c1 02 01 00
	00		 add	 ecx, 258		; 00000102H
  0036c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0036f	39 8a c0 16 00
	00		 cmp	 DWORD PTR [edx+5824], ecx
  00375	73 6d		 jae	 SHORT $LN27@fill_windo

; 1518 :             /* High water mark at or above current data, but below current data
; 1519 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1520 :              * to end of window, whichever is less.
; 1521 :              */
; 1522 :             init = (ulg)curr + WIN_INIT - s->high_water;

  00377	8b 45 e0	 mov	 eax, DWORD PTR _curr$78092[ebp]
  0037a	05 02 01 00 00	 add	 eax, 258		; 00000102H
  0037f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00382	2b 81 c0 16 00
	00		 sub	 eax, DWORD PTR [ecx+5824]
  00388	89 45 e4	 mov	 DWORD PTR _init$78094[ebp], eax

; 1523 :             if (init > s->window_size - s->high_water)

  0038b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0038e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00391	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00394	2b 88 c0 16 00
	00		 sub	 ecx, DWORD PTR [eax+5824]
  0039a	39 4d e4	 cmp	 DWORD PTR _init$78094[ebp], ecx
  0039d	76 12		 jbe	 SHORT $LN1@fill_windo

; 1524 :                 init = s->window_size - s->high_water;

  0039f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a5	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  003a8	2b 88 c0 16 00
	00		 sub	 ecx, DWORD PTR [eax+5824]
  003ae	89 4d e4	 mov	 DWORD PTR _init$78094[ebp], ecx
$LN1@fill_windo:

; 1525 :             zmemzero(s->window + s->high_water, (unsigned)init);

  003b1	8b 55 e4	 mov	 edx, DWORD PTR _init$78094[ebp]
  003b4	52		 push	 edx
  003b5	6a 00		 push	 0
  003b7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ba	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  003bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c0	03 8a c0 16 00
	00		 add	 ecx, DWORD PTR [edx+5824]
  003c6	51		 push	 ecx
  003c7	e8 00 00 00 00	 call	 _memset
  003cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1526 :             s->high_water += init;

  003cf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003d2	8b 88 c0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5824]
  003d8	03 4d e4	 add	 ecx, DWORD PTR _init$78094[ebp]
  003db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003de	89 8a c0 16 00
	00		 mov	 DWORD PTR [edx+5824], ecx
$LN27@fill_windo:

; 1527 :         }
; 1528 :     }
; 1529 : 
; 1530 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1531 :            "not enough room for search");
; 1532 : }

  003e4	5e		 pop	 esi
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
PUBLIC	_deflateReset@4
; Function compile flags: /Odtp
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 430  :     int ret;
; 431  : 
; 432  :     ret = deflateResetKeep(strm);

  00004	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000d	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 433  :     if (ret == Z_OK)

  00010	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00014	75 0f		 jne	 SHORT $LN1@deflateRes@2

; 434  :         lm_init(strm->state);

  00016	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00019	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 _lm_init
  00022	83 c4 04	 add	 esp, 4
$LN1@deflateRes@2:

; 435  :     return ret;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 436  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
PUBLIC	_deflateSetDictionary@12
; Function compile flags: /Odtp
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_str$ = -24						; size = 4
_avail$ = -20						; size = 4
_next$ = -16						; size = 4
_wrap$ = -12						; size = 4
_s$ = -8						; size = 4
_n$ = -4						; size = 4
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 328  :     deflate_state *s;
; 329  :     uInt str, n;
; 330  :     int wrap;
; 331  :     unsigned avail;
; 332  :     z_const unsigned char *next;
; 333  : 
; 334  :     if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  0000b	74 0f		 je	 SHORT $LN12@deflateSet@2
  0000d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00010	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00014	74 06		 je	 SHORT $LN12@deflateSet@2
  00016	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0001a	75 0a		 jne	 SHORT $LN13@deflateSet@2
$LN12@deflateSet@2:

; 335  :         return Z_STREAM_ERROR;

  0001c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00021	e9 37 02 00 00	 jmp	 $LN14@deflateSet@2
$LN13@deflateSet@2:

; 336  :     s = strm->state;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00029	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002c	89 55 f8	 mov	 DWORD PTR _s$[ebp], edx

; 337  :     wrap = s->wrap;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00032	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00035	89 4d f4	 mov	 DWORD PTR _wrap$[ebp], ecx

; 338  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  00038	83 7d f4 02	 cmp	 DWORD PTR _wrap$[ebp], 2
  0003c	74 18		 je	 SHORT $LN10@deflateSet@2
  0003e	83 7d f4 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00042	75 09		 jne	 SHORT $LN9@deflateSet@2
  00044	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00047	83 7a 04 2a	 cmp	 DWORD PTR [edx+4], 42	; 0000002aH
  0004b	75 09		 jne	 SHORT $LN10@deflateSet@2
$LN9@deflateSet@2:
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00050	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00054	74 0a		 je	 SHORT $LN11@deflateSet@2
$LN10@deflateSet@2:

; 339  :         return Z_STREAM_ERROR;

  00056	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0005b	e9 fd 01 00 00	 jmp	 $LN14@deflateSet@2
$LN11@deflateSet@2:

; 340  : 
; 341  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 342  :     if (wrap == 1)

  00060	83 7d f4 01	 cmp	 DWORD PTR _wrap$[ebp], 1
  00064	75 1a		 jne	 SHORT $LN8@deflateSet@2

; 343  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _dictLength$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 0c	 mov	 edx, DWORD PTR _dictionary$[ebp]
  0006d	52		 push	 edx
  0006e	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00071	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 _adler32@12
  0007a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0007d	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN8@deflateSet@2:

; 344  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  00080	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00083	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 345  : 
; 346  :     /* if dictionary would fill window, just replace the history */
; 347  :     if (dictLength >= s->w_size) {

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0008d	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  00090	3b 51 2c	 cmp	 edx, DWORD PTR [ecx+44]
  00093	72 6e		 jb	 SHORT $LN7@deflateSet@2

; 348  :         if (wrap == 0) {            /* already empty otherwise */

  00095	83 7d f4 00	 cmp	 DWORD PTR _wrap$[ebp], 0
  00099	75 50		 jne	 SHORT $LN6@deflateSet@2

; 349  :             CLEAR_HASH(s);

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0009e	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000a4	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000a7	33 d2		 xor	 edx, edx
  000a9	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000b1	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000b4	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  000b8	52		 push	 edx
  000b9	6a 00		 push	 0
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000be	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _memset
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 350  :             s->strstart = 0;

  000ca	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000cd	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 351  :             s->block_start = 0L;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  000d7	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 352  :             s->insert = 0;

  000de	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000e1	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0
$LN6@deflateSet@2:

; 353  :         }
; 354  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000eb	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  000ee	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  000f1	2b 42 2c	 sub	 eax, DWORD PTR [edx+44]
  000f4	03 45 0c	 add	 eax, DWORD PTR _dictionary$[ebp]
  000f7	89 45 0c	 mov	 DWORD PTR _dictionary$[ebp], eax

; 355  :         dictLength = s->w_size;

  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  000fd	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00100	89 55 10	 mov	 DWORD PTR _dictLength$[ebp], edx
$LN7@deflateSet@2:

; 356  :     }
; 357  : 
; 358  :     /* insert dictionary into window and hash */
; 359  :     avail = strm->avail_in;

  00103	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00106	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00109	89 4d ec	 mov	 DWORD PTR _avail$[ebp], ecx

; 360  :     next = strm->next_in;

  0010c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0010f	8b 02		 mov	 eax, DWORD PTR [edx]
  00111	89 45 f0	 mov	 DWORD PTR _next$[ebp], eax

; 361  :     strm->avail_in = dictLength;

  00114	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00117	8b 55 10	 mov	 edx, DWORD PTR _dictLength$[ebp]
  0011a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 362  :     strm->next_in = (z_const Bytef *)dictionary;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00120	8b 4d 0c	 mov	 ecx, DWORD PTR _dictionary$[ebp]
  00123	89 08		 mov	 DWORD PTR [eax], ecx

; 363  :     fill_window(s);

  00125	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _fill_window
  0012e	83 c4 04	 add	 esp, 4
$LN5@deflateSet@2:

; 364  :     while (s->lookahead >= MIN_MATCH) {

  00131	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00134	83 78 74 03	 cmp	 DWORD PTR [eax+116], 3
  00138	0f 82 ae 00 00
	00		 jb	 $LN4@deflateSet@2

; 365  :         str = s->strstart;

  0013e	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00141	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00144	89 55 e8	 mov	 DWORD PTR _str$[ebp], edx

; 366  :         n = s->lookahead - (MIN_MATCH-1);

  00147	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  0014a	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0014d	83 e9 02	 sub	 ecx, 2
  00150	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN3@deflateSet@2:

; 367  :         do {
; 368  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00153	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00156	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00159	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0015c	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0015f	d3 e2		 shl	 edx, cl
  00161	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00164	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00167	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  0016a	0f b6 4c 01 02	 movzx	 ecx, BYTE PTR [ecx+eax+2]
  0016f	33 d1		 xor	 edx, ecx
  00171	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00174	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0017a	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 369  : #ifndef FASTEST
; 370  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  0017d	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00180	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00183	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00186	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00189	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0018c	8b 75 e8	 mov	 esi, DWORD PTR _str$[ebp]
  0018f	23 71 34	 and	 esi, DWORD PTR [ecx+52]
  00192	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00195	8b 49 40	 mov	 ecx, DWORD PTR [ecx+64]
  00198	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  0019c	66 89 14 71	 mov	 WORD PTR [ecx+esi*2], dx

; 371  : #endif
; 372  :             s->head[s->ins_h] = (Pos)str;

  001a0	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001a3	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  001a6	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001a9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  001ac	66 8b 55 e8	 mov	 dx, WORD PTR _str$[ebp]
  001b0	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 373  :             str++;

  001b4	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  001b7	83 c0 01	 add	 eax, 1
  001ba	89 45 e8	 mov	 DWORD PTR _str$[ebp], eax

; 374  :         } while (--n);

  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  001c0	83 e9 01	 sub	 ecx, 1
  001c3	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
  001c6	75 8b		 jne	 SHORT $LN3@deflateSet@2

; 375  :         s->strstart = str;

  001c8	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	8b 45 e8	 mov	 eax, DWORD PTR _str$[ebp]
  001ce	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 376  :         s->lookahead = MIN_MATCH-1;

  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  001d4	c7 41 74 02 00
	00 00		 mov	 DWORD PTR [ecx+116], 2

; 377  :         fill_window(s);

  001db	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001de	52		 push	 edx
  001df	e8 00 00 00 00	 call	 _fill_window
  001e4	83 c4 04	 add	 esp, 4

; 378  :     }

  001e7	e9 45 ff ff ff	 jmp	 $LN5@deflateSet@2
$LN4@deflateSet@2:

; 379  :     s->strstart += s->lookahead;

  001ec	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001ef	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001f2	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  001f5	03 4a 74	 add	 ecx, DWORD PTR [edx+116]
  001f8	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  001fb	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 380  :     s->block_start = (long)s->strstart;

  001fe	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  00201	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00204	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00207	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 381  :     s->insert = s->lookahead;

  0020a	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0020d	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00210	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
  00213	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 382  :     s->lookahead = 0;

  00219	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0021c	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 383  :     s->match_length = s->prev_length = MIN_MATCH-1;

  00223	8b 55 f8	 mov	 edx, DWORD PTR _s$[ebp]
  00226	c7 42 78 02 00
	00 00		 mov	 DWORD PTR [edx+120], 2
  0022d	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00230	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 384  :     s->match_available = 0;

  00237	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp]
  0023a	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 385  :     strm->next_in = next;

  00241	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00244	8b 45 f0	 mov	 eax, DWORD PTR _next$[ebp]
  00247	89 02		 mov	 DWORD PTR [edx], eax

; 386  :     strm->avail_in = avail;

  00249	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0024c	8b 55 ec	 mov	 edx, DWORD PTR _avail$[ebp]
  0024f	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 387  :     s->wrap = wrap;

  00252	8b 45 f8	 mov	 eax, DWORD PTR _s$[ebp]
  00255	8b 4d f4	 mov	 ecx, DWORD PTR _wrap$[ebp]
  00258	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 388  :     return Z_OK;

  0025b	33 c0		 xor	 eax, eax
$LN14@deflateSet@2:

; 389  : }

  0025d	5e		 pop	 esi
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
PUBLIC	_deflateInit2_@32
; Function compile flags: /Odtp
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_wrap$ = -12						; size = 4
_overlay$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 224  :     deflate_state *s;
; 225  :     int wrap = 1;

  00006	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 1

; 226  :     static const char my_version[] = ZLIB_VERSION;
; 227  : 
; 228  :     ushf *overlay;
; 229  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 230  :      * output size for (length,distance) codes is <= 24 bits.
; 231  :      */
; 232  : 
; 233  :     if (version == Z_NULL || version[0] != my_version[0] ||
; 234  :         stream_size != sizeof(z_stream)) {

  0000d	83 7d 20 00	 cmp	 DWORD PTR _version$[ebp], 0
  00011	74 17		 je	 SHORT $LN14@deflateIni
  00013	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00016	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00019	0f be 15 00 00
	00 00		 movsx	 edx, BYTE PTR ?my_version@?1??deflateInit2_@@9@9
  00020	3b ca		 cmp	 ecx, edx
  00022	75 06		 jne	 SHORT $LN14@deflateIni
  00024	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00028	74 0a		 je	 SHORT $LN15@deflateIni
$LN14@deflateIni:

; 235  :         return Z_VERSION_ERROR;

  0002a	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0002f	e9 fd 02 00 00	 jmp	 $LN16@deflateIni
$LN15@deflateIni:

; 236  :     }
; 237  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00034	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00038	75 0a		 jne	 SHORT $LN13@deflateIni
  0003a	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  0003f	e9 ed 02 00 00	 jmp	 $LN16@deflateIni
$LN13@deflateIni:

; 238  : 
; 239  :     strm->msg = Z_NULL;

  00044	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00047	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 240  :     if (strm->zalloc == (alloc_func)0) {

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00051	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00055	75 14		 jne	 SHORT $LN12@deflateIni

; 241  : #ifdef Z_SOLO
; 242  :         return Z_STREAM_ERROR;
; 243  : #else
; 244  :         strm->zalloc = zcalloc;

  00057	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0005a	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], OFFSET _zcalloc

; 245  :         strm->opaque = (voidpf)0;

  00061	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00064	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
$LN12@deflateIni:

; 246  : #endif
; 247  :     }
; 248  :     if (strm->zfree == (free_func)0)

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0006e	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00072	75 0a		 jne	 SHORT $LN11@deflateIni

; 249  : #ifdef Z_SOLO
; 250  :         return Z_STREAM_ERROR;
; 251  : #else
; 252  :         strm->zfree = zcfree;

  00074	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00077	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], OFFSET _zcfree
$LN11@deflateIni:

; 253  : #endif
; 254  : 
; 255  : #ifdef FASTEST
; 256  :     if (level != 0) level = 1;
; 257  : #else
; 258  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0007e	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00082	75 07		 jne	 SHORT $LN10@deflateIni
  00084	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN10@deflateIni:

; 259  : #endif
; 260  : 
; 261  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0008b	83 7d 14 00	 cmp	 DWORD PTR _windowBits$[ebp], 0
  0008f	7d 11		 jge	 SHORT $LN9@deflateIni

; 262  :         wrap = 0;

  00091	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 0

; 263  :         windowBits = -windowBits;

  00098	8b 45 14	 mov	 eax, DWORD PTR _windowBits$[ebp]
  0009b	f7 d8		 neg	 eax
  0009d	89 45 14	 mov	 DWORD PTR _windowBits$[ebp], eax
  000a0	eb 16		 jmp	 SHORT $LN8@deflateIni
$LN9@deflateIni:

; 264  :     }
; 265  : #ifdef GZIP
; 266  :     else if (windowBits > 15) {

  000a2	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  000a6	7e 10		 jle	 SHORT $LN8@deflateIni

; 267  :         wrap = 2;       /* write gzip wrapper instead */

  000a8	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _wrap$[ebp], 2

; 268  :         windowBits -= 16;

  000af	8b 4d 14	 mov	 ecx, DWORD PTR _windowBits$[ebp]
  000b2	83 e9 10	 sub	 ecx, 16			; 00000010H
  000b5	89 4d 14	 mov	 DWORD PTR _windowBits$[ebp], ecx
$LN8@deflateIni:

; 269  :     }
; 270  : #endif
; 271  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 272  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 273  :         strategy < 0 || strategy > Z_FIXED) {

  000b8	83 7d 18 01	 cmp	 DWORD PTR _memLevel$[ebp], 1
  000bc	7c 30		 jl	 SHORT $LN5@deflateIni
  000be	83 7d 18 09	 cmp	 DWORD PTR _memLevel$[ebp], 9
  000c2	7f 2a		 jg	 SHORT $LN5@deflateIni
  000c4	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  000c8	75 24		 jne	 SHORT $LN5@deflateIni
  000ca	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  000ce	7c 1e		 jl	 SHORT $LN5@deflateIni
  000d0	83 7d 14 0f	 cmp	 DWORD PTR _windowBits$[ebp], 15 ; 0000000fH
  000d4	7f 18		 jg	 SHORT $LN5@deflateIni
  000d6	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  000da	7c 12		 jl	 SHORT $LN5@deflateIni
  000dc	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  000e0	7f 0c		 jg	 SHORT $LN5@deflateIni
  000e2	83 7d 1c 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  000e6	7c 06		 jl	 SHORT $LN5@deflateIni
  000e8	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000ec	7e 0a		 jle	 SHORT $LN6@deflateIni
$LN5@deflateIni:

; 274  :         return Z_STREAM_ERROR;

  000ee	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000f3	e9 39 02 00 00	 jmp	 $LN16@deflateIni
$LN6@deflateIni:

; 275  :     }
; 276  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000f8	83 7d 14 08	 cmp	 DWORD PTR _windowBits$[ebp], 8
  000fc	75 07		 jne	 SHORT $LN4@deflateIni
  000fe	c7 45 14 09 00
	00 00		 mov	 DWORD PTR _windowBits$[ebp], 9
$LN4@deflateIni:

; 277  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  00105	68 c4 16 00 00	 push	 5828			; 000016c4H
  0010a	6a 01		 push	 1
  0010c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0010f	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00112	50		 push	 eax
  00113	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00116	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00119	ff d2		 call	 edx
  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011e	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 278  :     if (s == Z_NULL) return Z_MEM_ERROR;

  00121	83 7d fc 00	 cmp	 DWORD PTR _s$[ebp], 0
  00125	75 0a		 jne	 SHORT $LN3@deflateIni
  00127	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0012c	e9 00 02 00 00	 jmp	 $LN16@deflateIni
$LN3@deflateIni:

; 279  :     strm->state = (struct internal_state FAR *)s;

  00131	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00134	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00137	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 280  :     s->strm = strm;

  0013a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0013d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00140	89 02		 mov	 DWORD PTR [edx], eax

; 281  : 
; 282  :     s->wrap = wrap;

  00142	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00145	8b 55 f4	 mov	 edx, DWORD PTR _wrap$[ebp]
  00148	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 283  :     s->gzhead = Z_NULL;

  0014b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0014e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 284  :     s->w_bits = windowBits;

  00155	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00158	8b 55 14	 mov	 edx, DWORD PTR _windowBits$[ebp]
  0015b	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 285  :     s->w_size = 1 << s->w_bits;

  0015e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00161	ba 01 00 00 00	 mov	 edx, 1
  00166	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00169	d3 e2		 shl	 edx, cl
  0016b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0016e	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 286  :     s->w_mask = s->w_size - 1;

  00171	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00174	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00177	83 ea 01	 sub	 edx, 1
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0017d	89 50 34	 mov	 DWORD PTR [eax+52], edx

; 287  : 
; 288  :     s->hash_bits = memLevel + 7;

  00180	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00183	83 c1 07	 add	 ecx, 7
  00186	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00189	89 4a 50	 mov	 DWORD PTR [edx+80], ecx

; 289  :     s->hash_size = 1 << s->hash_bits;

  0018c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0018f	ba 01 00 00 00	 mov	 edx, 1
  00194	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00197	d3 e2		 shl	 edx, cl
  00199	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0019c	89 50 4c	 mov	 DWORD PTR [eax+76], edx

; 290  :     s->hash_mask = s->hash_size - 1;

  0019f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a2	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  001a5	83 ea 01	 sub	 edx, 1
  001a8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001ab	89 50 54	 mov	 DWORD PTR [eax+84], edx

; 291  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001b1	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  001b4	83 c0 02	 add	 eax, 2
  001b7	33 d2		 xor	 edx, edx
  001b9	b9 03 00 00 00	 mov	 ecx, 3
  001be	f7 f1		 div	 ecx
  001c0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001c3	89 42 58	 mov	 DWORD PTR [edx+88], eax

; 292  : 
; 293  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  001c6	6a 02		 push	 2
  001c8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001cb	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001ce	51		 push	 ecx
  001cf	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  001d2	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  001d5	50		 push	 eax
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  001d9	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001dc	ff d2		 call	 edx
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001e4	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 294  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  001e7	6a 02		 push	 2
  001e9	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001ec	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001ef	50		 push	 eax
  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  001f3	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  001f6	52		 push	 edx
  001f7	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001fa	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001fd	ff d1		 call	 ecx
  001ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00202	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00205	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 295  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  00208	6a 02		 push	 2
  0020a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0020d	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00210	51		 push	 ecx
  00211	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00214	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00217	50		 push	 eax
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0021b	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0021e	ff d2		 call	 edx
  00220	83 c4 0c	 add	 esp, 12			; 0000000cH
  00223	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00226	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 296  : 
; 297  :     s->high_water = 0;      /* nothing written to s->window yet */

  00229	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0022c	c7 82 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5824], 0

; 298  : 
; 299  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  00236	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00239	83 c1 06	 add	 ecx, 6
  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	d3 e0		 shl	 eax, cl
  00243	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00246	89 81 9c 16 00
	00		 mov	 DWORD PTR [ecx+5788], eax

; 300  : 
; 301  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  0024c	6a 04		 push	 4
  0024e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00251	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  00257	50		 push	 eax
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0025b	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0025e	52		 push	 edx
  0025f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00262	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00265	ff d1		 call	 ecx
  00267	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026a	89 45 f8	 mov	 DWORD PTR _overlay$[ebp], eax

; 302  :     s->pending_buf = (uchf *) overlay;

  0026d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00270	8b 45 f8	 mov	 eax, DWORD PTR _overlay$[ebp]
  00273	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 303  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  00276	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00279	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  0027f	c1 e2 02	 shl	 edx, 2
  00282	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00285	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 304  : 
; 305  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
; 306  :         s->pending_buf == Z_NULL) {

  00288	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0028b	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0028f	74 1b		 je	 SHORT $LN1@deflateIni
  00291	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00294	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00298	74 12		 je	 SHORT $LN1@deflateIni
  0029a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0029d	83 78 44 00	 cmp	 DWORD PTR [eax+68], 0
  002a1	74 09		 je	 SHORT $LN1@deflateIni
  002a3	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002a6	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  002aa	75 26		 jne	 SHORT $LN2@deflateIni
$LN1@deflateIni:

; 307  :         s->status = FINISH_STATE;

  002ac	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002af	c7 42 04 9a 02
	00 00		 mov	 DWORD PTR [edx+4], 666	; 0000029aH

; 308  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  002b6	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  002b9	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _z_errmsg+24
  002bf	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 309  :         deflateEnd (strm);

  002c2	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  002c5	52		 push	 edx
  002c6	e8 00 00 00 00	 call	 _deflateEnd@4

; 310  :         return Z_MEM_ERROR;

  002cb	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  002d0	eb 5f		 jmp	 SHORT $LN16@deflateIni
$LN2@deflateIni:

; 311  :     }
; 312  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  002d2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002d5	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  002db	d1 e9		 shr	 ecx, 1
  002dd	8b 55 f8	 mov	 edx, DWORD PTR _overlay$[ebp]
  002e0	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  002e3	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002e6	89 81 a4 16 00
	00		 mov	 DWORD PTR [ecx+5796], eax

; 313  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

  002ec	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  002ef	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  002f5	6b c0 03	 imul	 eax, 3
  002f8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002fb	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  002fe	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00301	89 82 98 16 00
	00		 mov	 DWORD PTR [edx+5784], eax

; 314  : 
; 315  :     s->level = level;

  00307	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0030a	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  0030d	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx

; 316  :     s->strategy = strategy;

  00313	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00316	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  00319	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 317  :     s->method = (Byte)method;

  0031f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00322	8a 55 10	 mov	 dl, BYTE PTR _method$[ebp]
  00325	88 51 24	 mov	 BYTE PTR [ecx+36], dl

; 318  : 
; 319  :     return deflateReset(strm);

  00328	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _deflateReset@4
$LN16@deflateIni:

; 320  : }

  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
PUBLIC	_deflateInit_@16
; Function compile flags: /Odtp
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
; 208  :                          Z_DEFAULT_STRATEGY, version, stream_size);

  00003	8b 45 14	 mov	 eax, DWORD PTR _stream_size$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR _version$[ebp]
  0000a	51		 push	 ecx
  0000b	6a 00		 push	 0
  0000d	6a 08		 push	 8
  0000f	6a 0f		 push	 15			; 0000000fH
  00011	6a 08		 push	 8
  00013	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00016	52		 push	 edx
  00017	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _deflateInit2_@32

; 209  :     /* To do: ignore strm->next_in if we use it as window */
; 210  : }

  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
; Function compile flags: /Odtp
;	COMDAT _deflate_huff
_TEXT	SEGMENT
tv193 = -20						; size = 4
tv173 = -16						; size = 4
tv153 = -12						; size = 4
_cc$78317 = -5						; size = 1
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_huff PROC					; COMDAT

; 1937 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
$LN11@deflate_hu:

; 1938 :     int bflush;             /* set if current block must be flushed */
; 1939 : 
; 1940 :     for (;;) {
; 1941 :         /* Make sure that we have a literal to write. */
; 1942 :         if (s->lookahead == 0) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0000d	75 27		 jne	 SHORT $LN9@deflate_hu

; 1943 :             fill_window(s);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 _fill_window
  00018	83 c4 04	 add	 esp, 4

; 1944 :             if (s->lookahead == 0) {

  0001b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001e	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00022	75 12		 jne	 SHORT $LN9@deflate_hu

; 1945 :                 if (flush == Z_NO_FLUSH)

  00024	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00028	75 07		 jne	 SHORT $LN7@deflate_hu

; 1946 :                     return need_more;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 3d 02 00 00	 jmp	 $LN12@deflate_hu
$LN7@deflate_hu:

; 1947 :                 break;      /* flush the current block */

  00031	e9 35 01 00 00	 jmp	 $LN10@deflate_hu
$LN9@deflate_hu:

; 1948 :             }
; 1949 :         }
; 1950 : 
; 1951 :         /* Output a literal byte */
; 1952 :         s->match_length = 0;

  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [eax+96], 0

; 1953 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 1954 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00043	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00046	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0004c	8a 14 0a	 mov	 dl, BYTE PTR [edx+ecx]
  0004f	88 55 fb	 mov	 BYTE PTR _cc$78317[ebp], dl
  00052	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00055	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  00064	33 d2		 xor	 edx, edx
  00066	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006d	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00073	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00076	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0007c	8a 55 fb	 mov	 dl, BYTE PTR _cc$78317[ebp]
  0007f	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00082	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00085	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  0008b	83 c1 01	 add	 ecx, 1
  0008e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00091	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  00097	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$78317[ebp]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  000a6	66 83 c2 01	 add	 dx, 1
  000aa	0f b6 45 fb	 movzx	 eax, BYTE PTR _cc$78317[ebp]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b1	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  000b9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bc	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  000c2	83 e8 01	 sub	 eax, 1
  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c8	33 d2		 xor	 edx, edx
  000ca	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  000d0	0f 94 c2	 sete	 dl
  000d3	89 55 fc	 mov	 DWORD PTR _bflush$[ebp], edx

; 1955 :         s->lookahead--;

  000d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000dc	83 e9 01	 sub	 ecx, 1
  000df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000e2	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1956 :         s->strstart++;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e8	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000eb	83 c1 01	 add	 ecx, 1
  000ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f1	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1957 :         if (bflush) FLUSH_BLOCK(s, 0);

  000f4	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  000f8	74 6c		 je	 SHORT $LN6@deflate_hu
  000fa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fd	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00101	7c 11		 jl	 SHORT $LN14@deflate_hu
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00106	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00109	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010c	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0010f	89 55 f4	 mov	 DWORD PTR tv153[ebp], edx
  00112	eb 07		 jmp	 SHORT $LN15@deflate_hu
$LN14@deflate_hu:
  00114	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv153[ebp], 0
$LN15@deflate_hu:
  0011b	6a 00		 push	 0
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00120	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00123	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00126	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00129	50		 push	 eax
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR tv153[ebp]
  0012d	51		 push	 ecx
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	52		 push	 edx
  00132	e8 00 00 00 00	 call	 __tr_flush_block
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00140	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00143	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00146	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00149	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 _flush_pending
  00151	83 c4 04	 add	 esp, 4
  00154	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0015d	75 07		 jne	 SHORT $LN6@deflate_hu
  0015f	33 c0		 xor	 eax, eax
  00161	e9 08 01 00 00	 jmp	 $LN12@deflate_hu
$LN6@deflate_hu:

; 1958 :     }

  00166	e9 9b fe ff ff	 jmp	 $LN11@deflate_hu
$LN10@deflate_hu:

; 1959 :     s->insert = 0;

  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0016e	c7 81 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5812], 0

; 1960 :     if (flush == Z_FINISH) {

  00178	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0017c	75 76		 jne	 SHORT $LN4@deflate_hu

; 1961 :         FLUSH_BLOCK(s, 1);

  0017e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00181	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  00185	7c 11		 jl	 SHORT $LN16@deflate_hu
  00187	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0018a	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0018d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00190	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  00193	89 4d f0	 mov	 DWORD PTR tv173[ebp], ecx
  00196	eb 07		 jmp	 SHORT $LN17@deflate_hu
$LN16@deflate_hu:
  00198	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN17@deflate_hu:
  0019f	6a 01		 push	 1
  001a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a7	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  001aa	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  001ad	52		 push	 edx
  001ae	8b 45 f0	 mov	 eax, DWORD PTR tv173[ebp]
  001b1	50		 push	 eax
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b5	51		 push	 ecx
  001b6	e8 00 00 00 00	 call	 __tr_flush_block
  001bb	83 c4 10	 add	 esp, 16			; 00000010H
  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001c4	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  001c7	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  001ca	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cd	8b 02		 mov	 eax, DWORD PTR [edx]
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _flush_pending
  001d5	83 c4 04	 add	 esp, 4
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001db	8b 11		 mov	 edx, DWORD PTR [ecx]
  001dd	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  001e1	75 0a		 jne	 SHORT $LN3@deflate_hu
  001e3	b8 02 00 00 00	 mov	 eax, 2
  001e8	e9 81 00 00 00	 jmp	 $LN12@deflate_hu
$LN3@deflate_hu:

; 1962 :         return finish_done;

  001ed	b8 03 00 00 00	 mov	 eax, 3
  001f2	eb 7a		 jmp	 SHORT $LN12@deflate_hu
$LN4@deflate_hu:

; 1963 :     }
; 1964 :     if (s->last_lit)

  001f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f7	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  001fe	74 69		 je	 SHORT $LN2@deflate_hu

; 1965 :         FLUSH_BLOCK(s, 0);

  00200	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00203	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00207	7c 11		 jl	 SHORT $LN18@deflate_hu
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0020f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00212	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  00215	89 45 ec	 mov	 DWORD PTR tv193[ebp], eax
  00218	eb 07		 jmp	 SHORT $LN19@deflate_hu
$LN18@deflate_hu:
  0021a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv193[ebp], 0
$LN19@deflate_hu:
  00221	6a 00		 push	 0
  00223	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00226	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00229	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0022c	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  0022f	51		 push	 ecx
  00230	8b 55 ec	 mov	 edx, DWORD PTR tv193[ebp]
  00233	52		 push	 edx
  00234	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 __tr_flush_block
  0023d	83 c4 10	 add	 esp, 16			; 00000010H
  00240	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00243	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00246	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00249	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00251	52		 push	 edx
  00252	e8 00 00 00 00	 call	 _flush_pending
  00257	83 c4 04	 add	 esp, 4
  0025a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0025f	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00263	75 04		 jne	 SHORT $LN2@deflate_hu
  00265	33 c0		 xor	 eax, eax
  00267	eb 05		 jmp	 SHORT $LN12@deflate_hu
$LN2@deflate_hu:

; 1966 :     return block_done;

  00269	b8 01 00 00 00	 mov	 eax, 1
$LN12@deflate_hu:

; 1967 : }

  0026e	8b e5		 mov	 esp, ebp
  00270	5d		 pop	 ebp
  00271	c3		 ret	 0
_deflate_huff ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_rle
_TEXT	SEGMENT
tv324 = -44						; size = 4
tv304 = -40						; size = 4
tv284 = -36						; size = 4
tv210 = -32						; size = 4
_cc$78284 = -25						; size = 1
_dist$78282 = -24					; size = 2
_len$78281 = -17					; size = 1
_strend$ = -16						; size = 4
_bflush$ = -12						; size = 4
_scan$ = -8						; size = 4
_prev$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_rle PROC					; COMDAT

; 1864 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
$LN20@deflate_rl:

; 1865 :     int bflush;             /* set if current block must be flushed */
; 1866 :     uInt prev;              /* byte at distance one to match */
; 1867 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 1868 : 
; 1869 :     for (;;) {
; 1870 :         /* Make sure that we always have enough lookahead, except
; 1871 :          * at the end of the input file. We need MAX_MATCH bytes
; 1872 :          * for the longest run, plus one for the unrolled loop.
; 1873 :          */
; 1874 :         if (s->lookahead <= MAX_MATCH) {

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	81 78 74 02 01
	00 00		 cmp	 DWORD PTR [eax+116], 258 ; 00000102H
  00010	77 33		 ja	 SHORT $LN18@deflate_rl

; 1875 :             fill_window(s);

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 _fill_window
  0001b	83 c4 04	 add	 esp, 4

; 1876 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  0001e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00021	81 7a 74 02 01
	00 00		 cmp	 DWORD PTR [edx+116], 258 ; 00000102H
  00028	77 0d		 ja	 SHORT $LN17@deflate_rl
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002e	75 07		 jne	 SHORT $LN17@deflate_rl

; 1877 :                 return need_more;

  00030	33 c0		 xor	 eax, eax
  00032	e9 fc 04 00 00	 jmp	 $LN21@deflate_rl
$LN17@deflate_rl:

; 1878 :             }
; 1879 :             if (s->lookahead == 0) break; /* flush the current block */

  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003e	75 05		 jne	 SHORT $LN18@deflate_rl
  00040	e9 eb 03 00 00	 jmp	 $LN19@deflate_rl
$LN18@deflate_rl:

; 1880 :         }
; 1881 : 
; 1882 :         /* See how many times the previous byte repeats */
; 1883 :         s->match_length = 0;

  00045	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00048	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 1884 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  0004f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00052	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00056	0f 82 68 01 00
	00		 jb	 $LN15@deflate_rl
  0005c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005f	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  00063	0f 86 5b 01 00
	00		 jbe	 $LN15@deflate_rl

; 1885 :             scan = s->window + s->strstart - 1;

  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006c	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0006f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00072	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00075	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  00079	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx

; 1886 :             prev = *scan;

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  0007f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00082	89 4d fc	 mov	 DWORD PTR _prev$[ebp], ecx

; 1887 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  00085	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00088	83 c2 01	 add	 edx, 1
  0008b	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  0008e	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  00091	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00094	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  00097	0f 85 27 01 00
	00		 jne	 $LN15@deflate_rl
  0009d	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000a0	83 c2 01	 add	 edx, 1
  000a3	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  000a6	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  000a9	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000ac	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  000af	0f 85 0f 01 00
	00		 jne	 $LN15@deflate_rl
  000b5	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000b8	83 c2 01	 add	 edx, 1
  000bb	89 55 f8	 mov	 DWORD PTR _scan$[ebp], edx
  000be	8b 45 f8	 mov	 eax, DWORD PTR _scan$[ebp]
  000c1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000c4	39 4d fc	 cmp	 DWORD PTR _prev$[ebp], ecx
  000c7	0f 85 f7 00 00
	00		 jne	 $LN15@deflate_rl

; 1888 :                 strend = s->window + s->strstart + MAX_MATCH;

  000cd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000d6	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  000d9	8d 84 10 02 01
	00 00		 lea	 eax, DWORD PTR [eax+edx+258]
  000e0	89 45 f0	 mov	 DWORD PTR _strend$[ebp], eax
$LN12@deflate_rl:

; 1889 :                 do {
; 1890 :                 } while (prev == *++scan && prev == *++scan &&
; 1891 :                          prev == *++scan && prev == *++scan &&
; 1892 :                          prev == *++scan && prev == *++scan &&
; 1893 :                          prev == *++scan && prev == *++scan &&
; 1894 :                          scan < strend);

  000e3	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  000e6	83 c1 01	 add	 ecx, 1
  000e9	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  000ec	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  000ef	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000f2	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  000f5	0f 85 9c 00 00
	00		 jne	 $LN11@deflate_rl
  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  000fe	83 c1 01	 add	 ecx, 1
  00101	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00104	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00107	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0010a	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  0010d	0f 85 84 00 00
	00		 jne	 $LN11@deflate_rl
  00113	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00116	83 c1 01	 add	 ecx, 1
  00119	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  0011c	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0011f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00122	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00125	75 70		 jne	 SHORT $LN11@deflate_rl
  00127	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0012a	83 c1 01	 add	 ecx, 1
  0012d	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00130	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00133	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00136	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00139	75 5c		 jne	 SHORT $LN11@deflate_rl
  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0013e	83 c1 01	 add	 ecx, 1
  00141	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00144	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00147	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0014a	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  0014d	75 48		 jne	 SHORT $LN11@deflate_rl
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00152	83 c1 01	 add	 ecx, 1
  00155	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00158	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0015b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0015e	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00161	75 34		 jne	 SHORT $LN11@deflate_rl
  00163	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  00166	83 c1 01	 add	 ecx, 1
  00169	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  0016c	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  0016f	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00172	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00175	75 20		 jne	 SHORT $LN11@deflate_rl
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0017a	83 c1 01	 add	 ecx, 1
  0017d	89 4d f8	 mov	 DWORD PTR _scan$[ebp], ecx
  00180	8b 55 f8	 mov	 edx, DWORD PTR _scan$[ebp]
  00183	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00186	39 45 fc	 cmp	 DWORD PTR _prev$[ebp], eax
  00189	75 0c		 jne	 SHORT $LN11@deflate_rl
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _scan$[ebp]
  0018e	3b 4d f0	 cmp	 ecx, DWORD PTR _strend$[ebp]
  00191	0f 82 4c ff ff
	ff		 jb	 $LN12@deflate_rl
$LN11@deflate_rl:

; 1895 :                 s->match_length = MAX_MATCH - (int)(strend - scan);

  00197	8b 55 f0	 mov	 edx, DWORD PTR _strend$[ebp]
  0019a	2b 55 f8	 sub	 edx, DWORD PTR _scan$[ebp]
  0019d	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  001a2	2b c2		 sub	 eax, edx
  001a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a7	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1896 :                 if (s->match_length > s->lookahead)

  001aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b0	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  001b3	3b 48 74	 cmp	 ecx, DWORD PTR [eax+116]
  001b6	76 0c		 jbe	 SHORT $LN15@deflate_rl

; 1897 :                     s->match_length = s->lookahead;

  001b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001bb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001be	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001c1	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN15@deflate_rl:

; 1898 :             }
; 1899 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 1900 :         }
; 1901 : 
; 1902 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 1903 :         if (s->match_length >= MIN_MATCH) {

  001c4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c7	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  001cb	0f 82 34 01 00
	00		 jb	 $LN8@deflate_rl

; 1904 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 1905 : 
; 1906 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  001d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d4	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001d7	83 e9 03	 sub	 ecx, 3
  001da	88 4d ef	 mov	 BYTE PTR _len$78281[ebp], cl
  001dd	ba 01 00 00 00	 mov	 edx, 1
  001e2	66 89 55 e8	 mov	 WORD PTR _dist$78282[ebp], dx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  001ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f2	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  001f8	66 8b 55 e8	 mov	 dx, WORD PTR _dist$78282[ebp]
  001fc	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  00200	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00203	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  00209	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020c	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00212	8a 55 ef	 mov	 dl, BYTE PTR _len$78281[ebp]
  00215	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00218	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0021b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00221	83 c1 01	 add	 ecx, 1
  00224	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00227	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  0022d	66 8b 45 e8	 mov	 ax, WORD PTR _dist$78282[ebp]
  00231	66 83 e8 01	 sub	 ax, 1
  00235	66 89 45 e8	 mov	 WORD PTR _dist$78282[ebp], ax
  00239	0f b6 4d ef	 movzx	 ecx, BYTE PTR _len$78281[ebp]
  0023d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  00244	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00247	66 8b 8c 90 98
	04 00 00	 mov	 cx, WORD PTR [eax+edx*4+1176]
  0024f	66 83 c1 01	 add	 cx, 1
  00253	0f b6 55 ef	 movzx	 edx, BYTE PTR _len$78281[ebp]
  00257	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[edx]
  0025e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00261	66 89 8c 82 98
	04 00 00	 mov	 WORD PTR [edx+eax*4+1176], cx
  00269	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$78282[ebp]
  0026d	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00272	7d 10		 jge	 SHORT $LN23@deflate_rl
  00274	0f b7 4d e8	 movzx	 ecx, WORD PTR _dist$78282[ebp]
  00278	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __dist_code[ecx]
  0027f	89 55 e0	 mov	 DWORD PTR tv210[ebp], edx
  00282	eb 11		 jmp	 SHORT $LN24@deflate_rl
$LN23@deflate_rl:
  00284	0f b7 45 e8	 movzx	 eax, WORD PTR _dist$78282[ebp]
  00288	c1 f8 07	 sar	 eax, 7
  0028b	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax+256]
  00292	89 4d e0	 mov	 DWORD PTR tv210[ebp], ecx
$LN24@deflate_rl:
  00295	8b 55 e0	 mov	 edx, DWORD PTR tv210[ebp]
  00298	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029b	66 8b 8c 90 88
	09 00 00	 mov	 cx, WORD PTR [eax+edx*4+2440]
  002a3	66 83 c1 01	 add	 cx, 1
  002a7	8b 55 e0	 mov	 edx, DWORD PTR tv210[ebp]
  002aa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ad	66 89 8c 90 88
	09 00 00	 mov	 WORD PTR [eax+edx*4+2440], cx
  002b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b8	8b 91 9c 16 00
	00		 mov	 edx, DWORD PTR [ecx+5788]
  002be	83 ea 01	 sub	 edx, 1
  002c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002c4	33 c9		 xor	 ecx, ecx
  002c6	39 90 a0 16 00
	00		 cmp	 DWORD PTR [eax+5792], edx
  002cc	0f 94 c1	 sete	 cl
  002cf	89 4d f4	 mov	 DWORD PTR _bflush$[ebp], ecx

; 1907 : 
; 1908 :             s->lookahead -= s->match_length;

  002d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d8	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  002db	2b 48 60	 sub	 ecx, DWORD PTR [eax+96]
  002de	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e1	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1909 :             s->strstart += s->match_length;

  002e4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e7	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002ea	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ed	03 4a 60	 add	 ecx, DWORD PTR [edx+96]
  002f0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f3	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 1910 :             s->match_length = 0;

  002f6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f9	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 1911 :         } else {

  00300	e9 b4 00 00 00	 jmp	 $LN7@deflate_rl
$LN8@deflate_rl:

; 1912 :             /* No match, output a literal byte */
; 1913 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1914 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00305	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00308	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0030e	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00311	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  00314	88 45 e7	 mov	 BYTE PTR _cc$78284[ebp], al
  00317	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00320	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00323	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  00329	33 c0		 xor	 eax, eax
  0032b	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0032f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00332	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  00338	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0033b	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00341	8a 45 e7	 mov	 al, BYTE PTR _cc$78284[ebp]
  00344	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00347	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034a	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00350	83 c2 01	 add	 edx, 1
  00353	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00356	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  0035c	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$78284[ebp]
  00360	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00363	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  0036b	66 83 c0 01	 add	 ax, 1
  0036f	0f b6 4d e7	 movzx	 ecx, BYTE PTR _cc$78284[ebp]
  00373	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00376	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  0037e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00381	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00387	83 e9 01	 sub	 ecx, 1
  0038a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0038d	33 c0		 xor	 eax, eax
  0038f	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00395	0f 94 c0	 sete	 al
  00398	89 45 f4	 mov	 DWORD PTR _bflush$[ebp], eax

; 1915 :             s->lookahead--;

  0039b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0039e	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  003a1	83 ea 01	 sub	 edx, 1
  003a4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003a7	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1916 :             s->strstart++;

  003aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ad	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  003b0	83 c2 01	 add	 edx, 1
  003b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b6	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN7@deflate_rl:

; 1917 :         }
; 1918 :         if (bflush) FLUSH_BLOCK(s, 0);

  003b9	83 7d f4 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  003bd	74 6c		 je	 SHORT $LN6@deflate_rl
  003bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003c2	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  003c6	7c 11		 jl	 SHORT $LN25@deflate_rl
  003c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cb	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  003ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d1	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  003d4	89 45 dc	 mov	 DWORD PTR tv284[ebp], eax
  003d7	eb 07		 jmp	 SHORT $LN26@deflate_rl
$LN25@deflate_rl:
  003d9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv284[ebp], 0
$LN26@deflate_rl:
  003e0	6a 00		 push	 0
  003e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003e8	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  003eb	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  003ee	51		 push	 ecx
  003ef	8b 55 dc	 mov	 edx, DWORD PTR tv284[ebp]
  003f2	52		 push	 edx
  003f3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003f6	50		 push	 eax
  003f7	e8 00 00 00 00	 call	 __tr_flush_block
  003fc	83 c4 10	 add	 esp, 16			; 00000010H
  003ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00402	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00405	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00408	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	52		 push	 edx
  00411	e8 00 00 00 00	 call	 _flush_pending
  00416	83 c4 04	 add	 esp, 4
  00419	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041e	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00422	75 07		 jne	 SHORT $LN6@deflate_rl
  00424	33 c0		 xor	 eax, eax
  00426	e9 08 01 00 00	 jmp	 $LN21@deflate_rl
$LN6@deflate_rl:

; 1919 :     }

  0042b	e9 d6 fb ff ff	 jmp	 $LN20@deflate_rl
$LN19@deflate_rl:

; 1920 :     s->insert = 0;

  00430	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00433	c7 82 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5812], 0

; 1921 :     if (flush == Z_FINISH) {

  0043d	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00441	75 76		 jne	 SHORT $LN4@deflate_rl

; 1922 :         FLUSH_BLOCK(s, 1);

  00443	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00446	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0044a	7c 11		 jl	 SHORT $LN27@deflate_rl
  0044c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044f	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00452	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00455	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  00458	89 55 d8	 mov	 DWORD PTR tv304[ebp], edx
  0045b	eb 07		 jmp	 SHORT $LN28@deflate_rl
$LN27@deflate_rl:
  0045d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv304[ebp], 0
$LN28@deflate_rl:
  00464	6a 01		 push	 1
  00466	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00469	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046c	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  0046f	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00472	50		 push	 eax
  00473	8b 4d d8	 mov	 ecx, DWORD PTR tv304[ebp]
  00476	51		 push	 ecx
  00477	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0047a	52		 push	 edx
  0047b	e8 00 00 00 00	 call	 __tr_flush_block
  00480	83 c4 10	 add	 esp, 16			; 00000010H
  00483	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00486	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00489	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0048c	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  0048f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00492	8b 08		 mov	 ecx, DWORD PTR [eax]
  00494	51		 push	 ecx
  00495	e8 00 00 00 00	 call	 _flush_pending
  0049a	83 c4 04	 add	 esp, 4
  0049d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a0	8b 02		 mov	 eax, DWORD PTR [edx]
  004a2	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  004a6	75 0a		 jne	 SHORT $LN3@deflate_rl
  004a8	b8 02 00 00 00	 mov	 eax, 2
  004ad	e9 81 00 00 00	 jmp	 $LN21@deflate_rl
$LN3@deflate_rl:

; 1923 :         return finish_done;

  004b2	b8 03 00 00 00	 mov	 eax, 3
  004b7	eb 7a		 jmp	 SHORT $LN21@deflate_rl
$LN4@deflate_rl:

; 1924 :     }
; 1925 :     if (s->last_lit)

  004b9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004bc	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  004c3	74 69		 je	 SHORT $LN2@deflate_rl

; 1926 :         FLUSH_BLOCK(s, 0);

  004c5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004c8	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  004cc	7c 11		 jl	 SHORT $LN29@deflate_rl
  004ce	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004d1	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  004d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d7	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  004da	89 4d d4	 mov	 DWORD PTR tv324[ebp], ecx
  004dd	eb 07		 jmp	 SHORT $LN30@deflate_rl
$LN29@deflate_rl:
  004df	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv324[ebp], 0
$LN30@deflate_rl:
  004e6	6a 00		 push	 0
  004e8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ee	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  004f1	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  004f4	52		 push	 edx
  004f5	8b 45 d4	 mov	 eax, DWORD PTR tv324[ebp]
  004f8	50		 push	 eax
  004f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fc	51		 push	 ecx
  004fd	e8 00 00 00 00	 call	 __tr_flush_block
  00502	83 c4 10	 add	 esp, 16			; 00000010H
  00505	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00508	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0050e	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00511	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00514	8b 02		 mov	 eax, DWORD PTR [edx]
  00516	50		 push	 eax
  00517	e8 00 00 00 00	 call	 _flush_pending
  0051c	83 c4 04	 add	 esp, 4
  0051f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00522	8b 11		 mov	 edx, DWORD PTR [ecx]
  00524	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00528	75 04		 jne	 SHORT $LN2@deflate_rl
  0052a	33 c0		 xor	 eax, eax
  0052c	eb 05		 jmp	 SHORT $LN21@deflate_rl
$LN2@deflate_rl:

; 1927 :     return block_done;

  0052e	b8 01 00 00 00	 mov	 eax, 1
$LN21@deflate_rl:

; 1928 : }

  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c3		 ret	 0
_deflate_rle ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv464 = -48						; size = 4
tv444 = -44						; size = 4
tv432 = -40						; size = 4
tv368 = -36						; size = 4
tv315 = -32						; size = 4
tv231 = -28						; size = 4
_cc$78243 = -22						; size = 1
_cc$78233 = -21						; size = 1
_dist$78218 = -20					; size = 2
_len$78217 = -13					; size = 1
_max_insert$78216 = -12					; size = 4
_hash_head$ = -8					; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
$LN26@deflate_sl:

; 1734 :     IPos hash_head;          /* head of hash chain */
; 1735 :     int bflush;              /* set if current block must be flushed */
; 1736 : 
; 1737 :     /* Process the input block. */
; 1738 :     for (;;) {
; 1739 :         /* Make sure that we always have enough lookahead, except
; 1740 :          * at the end of the input file. We need MAX_MATCH bytes
; 1741 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1742 :          * string following the next match.
; 1743 :          */
; 1744 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  00011	73 33		 jae	 SHORT $LN24@deflate_sl

; 1745 :             fill_window(s);

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _fill_window
  0001c	83 c4 04	 add	 esp, 4

; 1746 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00029	73 0d		 jae	 SHORT $LN23@deflate_sl
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002f	75 07		 jne	 SHORT $LN23@deflate_sl

; 1747 :                 return need_more;

  00031	33 c0		 xor	 eax, eax
  00033	e9 32 07 00 00	 jmp	 $LN27@deflate_sl
$LN23@deflate_sl:

; 1748 :             }
; 1749 :             if (s->lookahead == 0) break; /* flush the current block */

  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003f	75 05		 jne	 SHORT $LN24@deflate_sl
  00041	e9 59 05 00 00	 jmp	 $LN25@deflate_sl
$LN24@deflate_sl:

; 1750 :         }
; 1751 : 
; 1752 :         /* Insert the string window[strstart .. strstart+2] in the
; 1753 :          * dictionary, and set hash_head to the head of the hash chain:
; 1754 :          */
; 1755 :         hash_head = NIL;

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1756 :         if (s->lookahead >= MIN_MATCH) {

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00050	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00054	0f 82 83 00 00
	00		 jb	 $LN21@deflate_sl

; 1757 :             INSERT_STRING(s, s->strstart, hash_head);

  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00060	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00063	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00066	d3 e2		 shl	 edx, cl
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00071	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00074	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00079	33 d1		 xor	 edx, ecx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00084	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00099	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  0009c	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0009f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000a2	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000a5	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000a9	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000b6	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000bf	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000c3	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN21@deflate_sl:

; 1758 :         }
; 1759 : 
; 1760 :         /* Find the longest match, discarding those <= prev_length.
; 1761 :          */
; 1762 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000dd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e3	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  000e6	89 50 78	 mov	 DWORD PTR [eax+120], edx
  000e9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ef	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  000f2	89 50 64	 mov	 DWORD PTR [eax+100], edx

; 1763 :         s->match_length = MIN_MATCH-1;

  000f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f8	c7 40 60 02 00
	00 00		 mov	 DWORD PTR [eax+96], 2

; 1764 : 
; 1765 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
; 1766 :             s->strstart - hash_head <= MAX_DIST(s)) {

  000ff	83 7d f8 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  00103	74 7c		 je	 SHORT $LN20@deflate_sl
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00108	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010b	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  0010e	3b 82 80 00 00
	00		 cmp	 eax, DWORD PTR [edx+128]
  00114	73 6b		 jae	 SHORT $LN20@deflate_sl
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00119	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0011c	2b 55 f8	 sub	 edx, DWORD PTR _hash_head$[ebp]
  0011f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00122	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00125	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  0012b	3b d1		 cmp	 edx, ecx
  0012d	77 52		 ja	 SHORT $LN20@deflate_sl

; 1767 :             /* To simplify the code, we prevent matches with the string
; 1768 :              * of window index 0 (in particular we have to avoid a match
; 1769 :              * of the string with itself at the start of the input file).
; 1770 :              */
; 1771 :             s->match_length = longest_match (s, hash_head);

  0012f	8b 55 f8	 mov	 edx, DWORD PTR _hash_head$[ebp]
  00132	52		 push	 edx
  00133	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 _longest_match
  0013c	83 c4 08	 add	 esp, 8
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00142	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 1772 :             /* longest_match() sets match_start */
; 1773 : 
; 1774 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED
; 1775 : #if TOO_FAR <= 32767
; 1776 :                 || (s->match_length == MIN_MATCH &&
; 1777 :                     s->strstart - s->match_start > TOO_FAR)
; 1778 : #endif
; 1779 :                 )) {

  00145	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00148	83 7a 60 05	 cmp	 DWORD PTR [edx+96], 5
  0014c	77 33		 ja	 SHORT $LN20@deflate_sl
  0014e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00151	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [eax+136], 1
  00158	74 1d		 je	 SHORT $LN18@deflate_sl
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015d	83 79 60 03	 cmp	 DWORD PTR [ecx+96], 3
  00161	75 1e		 jne	 SHORT $LN20@deflate_sl
  00163	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00166	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00169	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0016c	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  0016f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00175	76 0a		 jbe	 SHORT $LN20@deflate_sl
$LN18@deflate_sl:

; 1780 : 
; 1781 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1782 :                  * but we will ignore the current match anyway.
; 1783 :                  */
; 1784 :                 s->match_length = MIN_MATCH-1;

  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2
$LN20@deflate_sl:

; 1785 :             }
; 1786 :         }
; 1787 :         /* If there was a match at the previous step and the current
; 1788 :          * match is not better, output the previous match:
; 1789 :          */
; 1790 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00181	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00184	83 78 78 03	 cmp	 DWORD PTR [eax+120], 3
  00188	0f 82 ae 02 00
	00		 jb	 $LN17@deflate_sl
  0018e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00191	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00194	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
  00197	3b 42 78	 cmp	 eax, DWORD PTR [edx+120]
  0019a	0f 87 9c 02 00
	00		 ja	 $LN17@deflate_sl

; 1791 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a3	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  001a6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001a9	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  001ac	8d 54 0a fd	 lea	 edx, DWORD PTR [edx+ecx-3]
  001b0	89 55 f4	 mov	 DWORD PTR _max_insert$78216[ebp], edx

; 1792 :             /* Do not insert strings in hash table beyond this. */
; 1793 : 
; 1794 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1795 : 
; 1796 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,
; 1797 :                            s->prev_length - MIN_MATCH, bflush);

  001b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b6	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  001b9	83 e9 03	 sub	 ecx, 3
  001bc	88 4d f3	 mov	 BYTE PTR _len$78217[ebp], cl
  001bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c2	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  001c5	83 e8 01	 sub	 eax, 1
  001c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cb	2b 41 64	 sub	 eax, DWORD PTR [ecx+100]
  001ce	66 89 45 ec	 mov	 WORD PTR _dist$78218[ebp], ax
  001d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d5	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001de	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  001e4	66 8b 4d ec	 mov	 cx, WORD PTR _dist$78218[ebp]
  001e8	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  001ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ef	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f8	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  001fe	8a 4d f3	 mov	 cl, BYTE PTR _len$78217[ebp]
  00201	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00204	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00207	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  0020d	83 c0 01	 add	 eax, 1
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00213	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  00219	66 8b 55 ec	 mov	 dx, WORD PTR _dist$78218[ebp]
  0021d	66 83 ea 01	 sub	 dx, 1
  00221	66 89 55 ec	 mov	 WORD PTR _dist$78218[ebp], dx
  00225	0f b6 45 f3	 movzx	 eax, BYTE PTR _len$78217[ebp]
  00229	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  00230	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00233	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  0023b	66 83 c0 01	 add	 ax, 1
  0023f	0f b6 4d f3	 movzx	 ecx, BYTE PTR _len$78217[ebp]
  00243	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  0024a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0024d	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  00255	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$78218[ebp]
  00259	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  0025f	7d 10		 jge	 SHORT $LN29@deflate_sl
  00261	0f b7 45 ec	 movzx	 eax, WORD PTR _dist$78218[ebp]
  00265	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  0026c	89 4d e4	 mov	 DWORD PTR tv231[ebp], ecx
  0026f	eb 11		 jmp	 SHORT $LN30@deflate_sl
$LN29@deflate_sl:
  00271	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$78218[ebp]
  00275	c1 fa 07	 sar	 edx, 7
  00278	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  0027f	89 45 e4	 mov	 DWORD PTR tv231[ebp], eax
$LN30@deflate_sl:
  00282	8b 4d e4	 mov	 ecx, DWORD PTR tv231[ebp]
  00285	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00288	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  00290	66 83 c0 01	 add	 ax, 1
  00294	8b 4d e4	 mov	 ecx, DWORD PTR tv231[ebp]
  00297	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029a	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  002a2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a5	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  002ab	83 e9 01	 sub	 ecx, 1
  002ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b1	33 c0		 xor	 eax, eax
  002b3	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  002b9	0f 94 c0	 sete	 al
  002bc	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1798 : 
; 1799 :             /* Insert in hash table all strings up to the end of the match.
; 1800 :              * strstart-1 and strstart are already inserted. If there is not
; 1801 :              * enough lookahead, the last two strings are not inserted in
; 1802 :              * the hash table.
; 1803 :              */
; 1804 :             s->lookahead -= s->prev_length-1;

  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c2	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  002c5	83 ea 01	 sub	 edx, 1
  002c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  002ce	2b ca		 sub	 ecx, edx
  002d0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d3	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1805 :             s->prev_length -= 2;

  002d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d9	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  002dc	83 e9 02	 sub	 ecx, 2
  002df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e2	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
$LN16@deflate_sl:

; 1806 :             do {
; 1807 :                 if (++s->strstart <= max_insert) {

  002e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e8	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002eb	83 c1 01	 add	 ecx, 1
  002ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f1	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  002f4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f7	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  002fa	3b 4d f4	 cmp	 ecx, DWORD PTR _max_insert$78216[ebp]
  002fd	0f 87 83 00 00
	00		 ja	 $LN15@deflate_sl

; 1808 :                     INSERT_STRING(s, s->strstart, hash_head);

  00303	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00306	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00309	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  0030c	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  0030f	d3 e2		 shl	 edx, cl
  00311	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00314	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00317	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031a	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0031d	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00322	33 d1		 xor	 edx, ecx
  00324	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00327	23 50 54	 and	 edx, DWORD PTR [eax+84]
  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032d	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00330	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00333	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00336	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00339	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  0033c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00342	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  00345	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00348	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0034b	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  0034e	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  00352	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  00356	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00359	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0035c	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0035f	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  00362	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00365	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00368	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  0036c	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  0036f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00372	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00375	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00378	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  0037b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037e	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  00382	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN15@deflate_sl:

; 1809 :                 }
; 1810 :             } while (--s->prev_length != 0);

  00386	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00389	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  0038c	83 e9 01	 sub	 ecx, 1
  0038f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00392	89 4a 78	 mov	 DWORD PTR [edx+120], ecx
  00395	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00398	83 78 78 00	 cmp	 DWORD PTR [eax+120], 0
  0039c	0f 85 43 ff ff
	ff		 jne	 $LN16@deflate_sl

; 1811 :             s->match_available = 0;

  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a5	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0

; 1812 :             s->match_length = MIN_MATCH-1;

  003ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003af	c7 42 60 02 00
	00 00		 mov	 DWORD PTR [edx+96], 2

; 1813 :             s->strstart++;

  003b6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b9	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  003bc	83 c1 01	 add	 ecx, 1
  003bf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003c2	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1814 : 
; 1815 :             if (bflush) FLUSH_BLOCK(s, 0);

  003c5	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  003c9	74 6c		 je	 SHORT $LN12@deflate_sl
  003cb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ce	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  003d2	7c 11		 jl	 SHORT $LN31@deflate_sl
  003d4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d7	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  003da	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003dd	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  003e0	89 55 e0	 mov	 DWORD PTR tv315[ebp], edx
  003e3	eb 07		 jmp	 SHORT $LN32@deflate_sl
$LN31@deflate_sl:
  003e5	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv315[ebp], 0
$LN32@deflate_sl:
  003ec	6a 00		 push	 0
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003f4	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  003f7	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  003fa	50		 push	 eax
  003fb	8b 4d e0	 mov	 ecx, DWORD PTR tv315[ebp]
  003fe	51		 push	 ecx
  003ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00402	52		 push	 edx
  00403	e8 00 00 00 00	 call	 __tr_flush_block
  00408	83 c4 10	 add	 esp, 16			; 00000010H
  0040b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0040e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00411	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00414	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  00417	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0041a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041c	51		 push	 ecx
  0041d	e8 00 00 00 00	 call	 _flush_pending
  00422	83 c4 04	 add	 esp, 4
  00425	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00428	8b 02		 mov	 eax, DWORD PTR [edx]
  0042a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0042e	75 07		 jne	 SHORT $LN12@deflate_sl
  00430	33 c0		 xor	 eax, eax
  00432	e9 33 03 00 00	 jmp	 $LN27@deflate_sl
$LN12@deflate_sl:
  00437	e9 5e 01 00 00	 jmp	 $LN10@deflate_sl
$LN17@deflate_sl:

; 1816 : 
; 1817 :         } else if (s->match_available) {

  0043c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0043f	83 79 68 00	 cmp	 DWORD PTR [ecx+104], 0
  00443	0f 84 29 01 00
	00		 je	 $LN9@deflate_sl

; 1818 :             /* If there was no match at the previous position, output a
; 1819 :              * single literal. If there was a match but the current match
; 1820 :              * is longer, truncate the previous match to a single literal.
; 1821 :              */
; 1822 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1823 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00449	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044c	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0044f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00452	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00455	8a 44 10 ff	 mov	 al, BYTE PTR [eax+edx-1]
  00459	88 45 eb	 mov	 BYTE PTR _cc$78233[ebp], al
  0045c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0045f	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00465	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00468	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  0046e	33 c0		 xor	 eax, eax
  00470	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00477	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  0047d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00480	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  00486	8a 45 eb	 mov	 al, BYTE PTR _cc$78233[ebp]
  00489	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0048c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048f	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00495	83 c2 01	 add	 edx, 1
  00498	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0049b	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  004a1	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$78233[ebp]
  004a5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a8	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  004b0	66 83 c0 01	 add	 ax, 1
  004b4	0f b6 4d eb	 movzx	 ecx, BYTE PTR _cc$78233[ebp]
  004b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004bb	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  004c3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c6	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  004cc	83 e9 01	 sub	 ecx, 1
  004cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d2	33 c0		 xor	 eax, eax
  004d4	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  004da	0f 94 c0	 sete	 al
  004dd	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1824 :             if (bflush) {

  004e0	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  004e4	74 5a		 je	 SHORT $LN8@deflate_sl

; 1825 :                 FLUSH_BLOCK_ONLY(s, 0);

  004e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e9	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  004ed	7c 11		 jl	 SHORT $LN33@deflate_sl
  004ef	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f2	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f8	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  004fb	89 45 dc	 mov	 DWORD PTR tv368[ebp], eax
  004fe	eb 07		 jmp	 SHORT $LN34@deflate_sl
$LN33@deflate_sl:
  00500	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv368[ebp], 0
$LN34@deflate_sl:
  00507	6a 00		 push	 0
  00509	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050f	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00512	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00515	51		 push	 ecx
  00516	8b 55 dc	 mov	 edx, DWORD PTR tv368[ebp]
  00519	52		 push	 edx
  0051a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0051d	50		 push	 eax
  0051e	e8 00 00 00 00	 call	 __tr_flush_block
  00523	83 c4 10	 add	 esp, 16			; 00000010H
  00526	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00529	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052c	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0052f	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00532	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00535	8b 11		 mov	 edx, DWORD PTR [ecx]
  00537	52		 push	 edx
  00538	e8 00 00 00 00	 call	 _flush_pending
  0053d	83 c4 04	 add	 esp, 4
$LN8@deflate_sl:

; 1826 :             }
; 1827 :             s->strstart++;

  00540	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00543	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00546	83 c1 01	 add	 ecx, 1
  00549	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0054c	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1828 :             s->lookahead--;

  0054f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00552	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00555	83 e9 01	 sub	 ecx, 1
  00558	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0055b	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1829 :             if (s->strm->avail_out == 0) return need_more;

  0055e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00561	8b 08		 mov	 ecx, DWORD PTR [eax]
  00563	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00567	75 07		 jne	 SHORT $LN7@deflate_sl
  00569	33 c0		 xor	 eax, eax
  0056b	e9 fa 01 00 00	 jmp	 $LN27@deflate_sl
$LN7@deflate_sl:

; 1830 :         } else {

  00570	eb 28		 jmp	 SHORT $LN10@deflate_sl
$LN9@deflate_sl:

; 1831 :             /* There is no previous match to compare with, wait for
; 1832 :              * the next step to decide.
; 1833 :              */
; 1834 :             s->match_available = 1;

  00572	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00575	c7 42 68 01 00
	00 00		 mov	 DWORD PTR [edx+104], 1

; 1835 :             s->strstart++;

  0057c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0057f	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00582	83 c1 01	 add	 ecx, 1
  00585	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00588	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1836 :             s->lookahead--;

  0058b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0058e	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00591	83 e9 01	 sub	 ecx, 1
  00594	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00597	89 4a 74	 mov	 DWORD PTR [edx+116], ecx
$LN10@deflate_sl:

; 1837 :         }
; 1838 :     }

  0059a	e9 68 fa ff ff	 jmp	 $LN26@deflate_sl
$LN25@deflate_sl:

; 1839 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 1840 :     if (s->match_available) {

  0059f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005a2	83 78 68 00	 cmp	 DWORD PTR [eax+104], 0
  005a6	0f 84 a1 00 00
	00		 je	 $LN5@deflate_sl

; 1841 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 1842 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  005ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005af	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005b2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b5	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  005b8	8a 54 0a ff	 mov	 dl, BYTE PTR [edx+ecx-1]
  005bc	88 55 ea	 mov	 BYTE PTR _cc$78243[ebp], dl
  005bf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005c2	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  005c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005cb	8b 82 a4 16 00
	00		 mov	 eax, DWORD PTR [edx+5796]
  005d1	33 d2		 xor	 edx, edx
  005d3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  005d7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005da	8b 88 98 16 00
	00		 mov	 ecx, DWORD PTR [eax+5784]
  005e0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005e3	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  005e9	8a 55 ea	 mov	 dl, BYTE PTR _cc$78243[ebp]
  005ec	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  005ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005f2	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  005f8	83 c1 01	 add	 ecx, 1
  005fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005fe	89 8a a0 16 00
	00		 mov	 DWORD PTR [edx+5792], ecx
  00604	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$78243[ebp]
  00608	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0060b	66 8b 94 81 94
	00 00 00	 mov	 dx, WORD PTR [ecx+eax*4+148]
  00613	66 83 c2 01	 add	 dx, 1
  00617	0f b6 45 ea	 movzx	 eax, BYTE PTR _cc$78243[ebp]
  0061b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0061e	66 89 94 81 94
	00 00 00	 mov	 WORD PTR [ecx+eax*4+148], dx
  00626	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00629	8b 82 9c 16 00
	00		 mov	 eax, DWORD PTR [edx+5788]
  0062f	83 e8 01	 sub	 eax, 1
  00632	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00635	33 d2		 xor	 edx, edx
  00637	39 81 a0 16 00
	00		 cmp	 DWORD PTR [ecx+5792], eax
  0063d	0f 94 c2	 sete	 dl
  00640	89 55 fc	 mov	 DWORD PTR _bflush$[ebp], edx

; 1843 :         s->match_available = 0;

  00643	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00646	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [eax+104], 0
$LN5@deflate_sl:

; 1844 :     }
; 1845 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  0064d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00650	83 79 6c 02	 cmp	 DWORD PTR [ecx+108], 2
  00654	73 0b		 jae	 SHORT $LN35@deflate_sl
  00656	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00659	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0065c	89 45 d8	 mov	 DWORD PTR tv432[ebp], eax
  0065f	eb 07		 jmp	 SHORT $LN36@deflate_sl
$LN35@deflate_sl:
  00661	c7 45 d8 02 00
	00 00		 mov	 DWORD PTR tv432[ebp], 2
$LN36@deflate_sl:
  00668	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0066b	8b 55 d8	 mov	 edx, DWORD PTR tv432[ebp]
  0066e	89 91 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], edx

; 1846 :     if (flush == Z_FINISH) {

  00674	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00678	75 76		 jne	 SHORT $LN4@deflate_sl

; 1847 :         FLUSH_BLOCK(s, 1);

  0067a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0067d	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  00681	7c 11		 jl	 SHORT $LN37@deflate_sl
  00683	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00686	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00689	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0068c	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0068f	89 55 d4	 mov	 DWORD PTR tv444[ebp], edx
  00692	eb 07		 jmp	 SHORT $LN38@deflate_sl
$LN37@deflate_sl:
  00694	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv444[ebp], 0
$LN38@deflate_sl:
  0069b	6a 01		 push	 1
  0069d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006a0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006a3	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  006a6	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  006a9	50		 push	 eax
  006aa	8b 4d d4	 mov	 ecx, DWORD PTR tv444[ebp]
  006ad	51		 push	 ecx
  006ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006b1	52		 push	 edx
  006b2	e8 00 00 00 00	 call	 __tr_flush_block
  006b7	83 c4 10	 add	 esp, 16			; 00000010H
  006ba	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006c0	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  006c3	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  006c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  006cb	51		 push	 ecx
  006cc	e8 00 00 00 00	 call	 _flush_pending
  006d1	83 c4 04	 add	 esp, 4
  006d4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006d7	8b 02		 mov	 eax, DWORD PTR [edx]
  006d9	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  006dd	75 0a		 jne	 SHORT $LN3@deflate_sl
  006df	b8 02 00 00 00	 mov	 eax, 2
  006e4	e9 81 00 00 00	 jmp	 $LN27@deflate_sl
$LN3@deflate_sl:

; 1848 :         return finish_done;

  006e9	b8 03 00 00 00	 mov	 eax, 3
  006ee	eb 7a		 jmp	 SHORT $LN27@deflate_sl
$LN4@deflate_sl:

; 1849 :     }
; 1850 :     if (s->last_lit)

  006f0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006f3	83 b9 a0 16 00
	00 00		 cmp	 DWORD PTR [ecx+5792], 0
  006fa	74 69		 je	 SHORT $LN2@deflate_sl

; 1851 :         FLUSH_BLOCK(s, 0);

  006fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006ff	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  00703	7c 11		 jl	 SHORT $LN39@deflate_sl
  00705	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00708	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0070b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0070e	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  00711	89 4d d0	 mov	 DWORD PTR tv464[ebp], ecx
  00714	eb 07		 jmp	 SHORT $LN40@deflate_sl
$LN39@deflate_sl:
  00716	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv464[ebp], 0
$LN40@deflate_sl:
  0071d	6a 00		 push	 0
  0071f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00722	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00725	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00728	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  0072b	52		 push	 edx
  0072c	8b 45 d0	 mov	 eax, DWORD PTR tv464[ebp]
  0072f	50		 push	 eax
  00730	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00733	51		 push	 ecx
  00734	e8 00 00 00 00	 call	 __tr_flush_block
  00739	83 c4 10	 add	 esp, 16			; 00000010H
  0073c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0073f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00742	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00745	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00748	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0074b	8b 02		 mov	 eax, DWORD PTR [edx]
  0074d	50		 push	 eax
  0074e	e8 00 00 00 00	 call	 _flush_pending
  00753	83 c4 04	 add	 esp, 4
  00756	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00759	8b 11		 mov	 edx, DWORD PTR [ecx]
  0075b	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0075f	75 04		 jne	 SHORT $LN2@deflate_sl
  00761	33 c0		 xor	 eax, eax
  00763	eb 05		 jmp	 SHORT $LN27@deflate_sl
$LN2@deflate_sl:

; 1852 :     return block_done;

  00765	b8 01 00 00 00	 mov	 eax, 1
$LN27@deflate_sl:

; 1853 : }

  0076a	5e		 pop	 esi
  0076b	8b e5		 mov	 esp, ebp
  0076d	5d		 pop	 ebp
  0076e	c3		 ret	 0
_deflate_slow ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv395 = -40						; size = 4
tv375 = -36						; size = 4
tv363 = -32						; size = 4
tv351 = -28						; size = 4
tv204 = -24						; size = 4
_cc$78176 = -17						; size = 1
_dist$78168 = -16					; size = 2
_len$78167 = -9						; size = 1
_hash_head$ = -8					; size = 4
_bflush$ = -4						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1631 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
$LN20@deflate_fa:

; 1632 :     IPos hash_head;       /* head of the hash chain */
; 1633 :     int bflush;           /* set if current block must be flushed */
; 1634 : 
; 1635 :     for (;;) {
; 1636 :         /* Make sure that we always have enough lookahead, except
; 1637 :          * at the end of the input file. We need MAX_MATCH bytes
; 1638 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1639 :          * string following the next match.
; 1640 :          */
; 1641 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00007	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000a	81 78 74 06 01
	00 00		 cmp	 DWORD PTR [eax+116], 262 ; 00000106H
  00011	73 33		 jae	 SHORT $LN18@deflate_fa

; 1642 :             fill_window(s);

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 _fill_window
  0001c	83 c4 04	 add	 esp, 4

; 1643 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  0001f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00022	81 7a 74 06 01
	00 00		 cmp	 DWORD PTR [edx+116], 262 ; 00000106H
  00029	73 0d		 jae	 SHORT $LN17@deflate_fa
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  0002f	75 07		 jne	 SHORT $LN17@deflate_fa

; 1644 :                 return need_more;

  00031	33 c0		 xor	 eax, eax
  00033	e9 9d 05 00 00	 jmp	 $LN21@deflate_fa
$LN17@deflate_fa:

; 1645 :             }
; 1646 :             if (s->lookahead == 0) break; /* flush the current block */

  00038	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003b	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  0003f	75 05		 jne	 SHORT $LN18@deflate_fa
  00041	e9 72 04 00 00	 jmp	 $LN19@deflate_fa
$LN18@deflate_fa:

; 1647 :         }
; 1648 : 
; 1649 :         /* Insert the string window[strstart .. strstart+2] in the
; 1650 :          * dictionary, and set hash_head to the head of the hash chain:
; 1651 :          */
; 1652 :         hash_head = NIL;

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hash_head$[ebp], 0

; 1653 :         if (s->lookahead >= MIN_MATCH) {

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00050	83 79 74 03	 cmp	 DWORD PTR [ecx+116], 3
  00054	0f 82 83 00 00
	00		 jb	 $LN15@deflate_fa

; 1654 :             INSERT_STRING(s, s->strstart, hash_head);

  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00060	8b 52 48	 mov	 edx, DWORD PTR [edx+72]
  00063	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  00066	d3 e2		 shl	 edx, cl
  00068	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0006b	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0006e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00071	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00074	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00079	33 d1		 xor	 edx, ecx
  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00084	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00090	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00099	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  0009c	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0009f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  000a2	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  000a5	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  000a9	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000b6	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  000bf	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  000c3	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  000c6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c9	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cf	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  000d2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d5	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  000d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN15@deflate_fa:

; 1655 :         }
; 1656 : 
; 1657 :         /* Find the longest match, discarding those <= prev_length.
; 1658 :          * At this point we have always match_length < MIN_MATCH
; 1659 :          */
; 1660 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000dd	83 7d f8 00	 cmp	 DWORD PTR _hash_head$[ebp], 0
  000e1	74 2e		 je	 SHORT $LN14@deflate_fa
  000e3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e6	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000e9	2b 4d f8	 sub	 ecx, DWORD PTR _hash_head$[ebp]
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000f2	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000f7	3b c8		 cmp	 ecx, eax
  000f9	77 16		 ja	 SHORT $LN14@deflate_fa

; 1661 :             /* To simplify the code, we prevent matches with the string
; 1662 :              * of window index 0 (in particular we have to avoid a match
; 1663 :              * of the string with itself at the start of the input file).
; 1664 :              */
; 1665 :             s->match_length = longest_match (s, hash_head);

  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _hash_head$[ebp]
  000fe	51		 push	 ecx
  000ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 _longest_match
  00108	83 c4 08	 add	 esp, 8
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010e	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN14@deflate_fa:

; 1666 :             /* longest_match() sets match_start */
; 1667 :         }
; 1668 :         if (s->match_length >= MIN_MATCH) {

  00111	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00114	83 7a 60 03	 cmp	 DWORD PTR [edx+96], 3
  00118	0f 82 6f 02 00
	00		 jb	 $LN13@deflate_fa

; 1669 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1670 : 
; 1671 :             _tr_tally_dist(s, s->strstart - s->match_start,
; 1672 :                            s->match_length - MIN_MATCH, bflush);

  0011e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00121	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00124	83 e9 03	 sub	 ecx, 3
  00127	88 4d f7	 mov	 BYTE PTR _len$78167[ebp], cl
  0012a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00130	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00133	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  00136	66 89 4d f0	 mov	 WORD PTR _dist$78168[ebp], cx
  0013a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0013d	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00143	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00146	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  0014c	66 8b 4d f0	 mov	 cx, WORD PTR _dist$78168[ebp]
  00150	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  00154	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00157	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  0015d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00160	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  00166	8a 4d f7	 mov	 cl, BYTE PTR _len$78167[ebp]
  00169	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0016c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016f	8b 82 a0 16 00
	00		 mov	 eax, DWORD PTR [edx+5792]
  00175	83 c0 01	 add	 eax, 1
  00178	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017b	89 81 a0 16 00
	00		 mov	 DWORD PTR [ecx+5792], eax
  00181	66 8b 55 f0	 mov	 dx, WORD PTR _dist$78168[ebp]
  00185	66 83 ea 01	 sub	 dx, 1
  00189	66 89 55 f0	 mov	 WORD PTR _dist$78168[ebp], dx
  0018d	0f b6 45 f7	 movzx	 eax, BYTE PTR _len$78167[ebp]
  00191	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  00198	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0019b	66 8b 84 8a 98
	04 00 00	 mov	 ax, WORD PTR [edx+ecx*4+1176]
  001a3	66 83 c0 01	 add	 ax, 1
  001a7	0f b6 4d f7	 movzx	 ecx, BYTE PTR _len$78167[ebp]
  001ab	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR __length_code[ecx]
  001b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b5	66 89 84 91 98
	04 00 00	 mov	 WORD PTR [ecx+edx*4+1176], ax
  001bd	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$78168[ebp]
  001c1	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  001c7	7d 10		 jge	 SHORT $LN23@deflate_fa
  001c9	0f b7 45 f0	 movzx	 eax, WORD PTR _dist$78168[ebp]
  001cd	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  001d4	89 4d e8	 mov	 DWORD PTR tv204[ebp], ecx
  001d7	eb 11		 jmp	 SHORT $LN24@deflate_fa
$LN23@deflate_fa:
  001d9	0f b7 55 f0	 movzx	 edx, WORD PTR _dist$78168[ebp]
  001dd	c1 fa 07	 sar	 edx, 7
  001e0	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  001e7	89 45 e8	 mov	 DWORD PTR tv204[ebp], eax
$LN24@deflate_fa:
  001ea	8b 4d e8	 mov	 ecx, DWORD PTR tv204[ebp]
  001ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f0	66 8b 84 8a 88
	09 00 00	 mov	 ax, WORD PTR [edx+ecx*4+2440]
  001f8	66 83 c0 01	 add	 ax, 1
  001fc	8b 4d e8	 mov	 ecx, DWORD PTR tv204[ebp]
  001ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00202	66 89 84 8a 88
	09 00 00	 mov	 WORD PTR [edx+ecx*4+2440], ax
  0020a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0020d	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  00213	83 e9 01	 sub	 ecx, 1
  00216	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00219	33 c0		 xor	 eax, eax
  0021b	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  00221	0f 94 c0	 sete	 al
  00224	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1673 : 
; 1674 :             s->lookahead -= s->match_length;

  00227	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0022d	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00230	2b 42 60	 sub	 eax, DWORD PTR [edx+96]
  00233	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00236	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 1675 : 
; 1676 :             /* Insert new strings in the hash table only if the match length
; 1677 :              * is not too large. This saves time but degrades compression.
; 1678 :              */
; 1679 : #ifndef FASTEST
; 1680 :             if (s->match_length <= s->max_insert_length &&
; 1681 :                 s->lookahead >= MIN_MATCH) {

  00239	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023f	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00242	3b 88 80 00 00
	00		 cmp	 ecx, DWORD PTR [eax+128]
  00248	0f 87 db 00 00
	00		 ja	 $LN12@deflate_fa
  0024e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00251	83 7a 74 03	 cmp	 DWORD PTR [edx+116], 3
  00255	0f 82 ce 00 00
	00		 jb	 $LN12@deflate_fa

; 1682 :                 s->match_length--; /* string at strstart already in table */

  0025b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0025e	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00261	83 e9 01	 sub	 ecx, 1
  00264	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00267	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
$LN11@deflate_fa:

; 1683 :                 do {
; 1684 :                     s->strstart++;

  0026a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026d	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00270	83 c1 01	 add	 ecx, 1
  00273	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00276	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx

; 1685 :                     INSERT_STRING(s, s->strstart, hash_head);

  00279	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027f	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00282	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00285	d3 e2		 shl	 edx, cl
  00287	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0028a	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0028d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00290	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00293	0f b6 4c 08 02	 movzx	 ecx, BYTE PTR [eax+ecx+2]
  00298	33 d1		 xor	 edx, ecx
  0029a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029d	23 50 54	 and	 edx, DWORD PTR [eax+84]
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a3	89 51 48	 mov	 DWORD PTR [ecx+72], edx
  002a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a9	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  002ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002af	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  002b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002b5	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002b8	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
  002bb	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  002be	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  002c1	8b 76 40	 mov	 esi, DWORD PTR [esi+64]
  002c4	66 8b 14 42	 mov	 dx, WORD PTR [edx+eax*2]
  002c8	66 89 14 4e	 mov	 WORD PTR [esi+ecx*2], dx
  002cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d2	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  002d5	23 51 34	 and	 edx, DWORD PTR [ecx+52]
  002d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002db	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  002de	0f b7 14 51	 movzx	 edx, WORD PTR [ecx+edx*2]
  002e2	89 55 f8	 mov	 DWORD PTR _hash_head$[ebp], edx
  002e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e8	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  002eb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ee	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  002f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f4	66 8b 52 6c	 mov	 dx, WORD PTR [edx+108]
  002f8	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1686 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1687 :                      * always MIN_MATCH bytes ahead.
; 1688 :                      */
; 1689 :                 } while (--s->match_length != 0);

  002fc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002ff	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00302	83 e9 01	 sub	 ecx, 1
  00305	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00308	89 4a 60	 mov	 DWORD PTR [edx+96], ecx
  0030b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030e	83 78 60 00	 cmp	 DWORD PTR [eax+96], 0
  00312	0f 85 52 ff ff
	ff		 jne	 $LN11@deflate_fa

; 1690 :                 s->strstart++;

  00318	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031b	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0031e	83 c2 01	 add	 edx, 1
  00321	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00324	89 50 6c	 mov	 DWORD PTR [eax+108], edx

; 1691 :             } else

  00327	eb 5f		 jmp	 SHORT $LN8@deflate_fa
$LN12@deflate_fa:

; 1692 : #endif
; 1693 :             {
; 1694 :                 s->strstart += s->match_length;

  00329	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032c	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  0032f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00332	03 50 60	 add	 edx, DWORD PTR [eax+96]
  00335	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00338	89 51 6c	 mov	 DWORD PTR [ecx+108], edx

; 1695 :                 s->match_length = 0;

  0033b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0033e	c7 42 60 00 00
	00 00		 mov	 DWORD PTR [edx+96], 0

; 1696 :                 s->ins_h = s->window[s->strstart];

  00345	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00348	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0034b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0034e	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00351	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  00355	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00358	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 1697 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  0035b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00361	8b 50 48	 mov	 edx, DWORD PTR [eax+72]
  00364	8b 49 58	 mov	 ecx, DWORD PTR [ecx+88]
  00367	d3 e2		 shl	 edx, cl
  00369	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0036c	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  0036f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00372	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00375	0f b6 4c 08 01	 movzx	 ecx, BYTE PTR [eax+ecx+1]
  0037a	33 d1		 xor	 edx, ecx
  0037c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0037f	23 50 54	 and	 edx, DWORD PTR [eax+84]
  00382	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00385	89 51 48	 mov	 DWORD PTR [ecx+72], edx
$LN8@deflate_fa:

; 1698 : #if MIN_MATCH != 3
; 1699 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1700 : #endif
; 1701 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1702 :                  * matter since it will be recomputed at next deflate call.
; 1703 :                  */
; 1704 :             }
; 1705 :         } else {

  00388	e9 b4 00 00 00	 jmp	 $LN7@deflate_fa
$LN13@deflate_fa:

; 1706 :             /* No match, output a literal byte */
; 1707 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1708 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  0038d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00390	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00393	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00396	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00399	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  0039c	88 45 ef	 mov	 BYTE PTR _cc$78176[ebp], al
  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a2	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003a8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ab	8b 88 a4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5796]
  003b1	33 c0		 xor	 eax, eax
  003b3	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  003b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ba	8b 91 98 16 00
	00		 mov	 edx, DWORD PTR [ecx+5784]
  003c0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003c3	8b 88 a0 16 00
	00		 mov	 ecx, DWORD PTR [eax+5792]
  003c9	8a 45 ef	 mov	 al, BYTE PTR _cc$78176[ebp]
  003cc	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003cf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d2	8b 91 a0 16 00
	00		 mov	 edx, DWORD PTR [ecx+5792]
  003d8	83 c2 01	 add	 edx, 1
  003db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003de	89 90 a0 16 00
	00		 mov	 DWORD PTR [eax+5792], edx
  003e4	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$78176[ebp]
  003e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003eb	66 8b 84 8a 94
	00 00 00	 mov	 ax, WORD PTR [edx+ecx*4+148]
  003f3	66 83 c0 01	 add	 ax, 1
  003f7	0f b6 4d ef	 movzx	 ecx, BYTE PTR _cc$78176[ebp]
  003fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fe	66 89 84 8a 94
	00 00 00	 mov	 WORD PTR [edx+ecx*4+148], ax
  00406	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00409	8b 88 9c 16 00
	00		 mov	 ecx, DWORD PTR [eax+5788]
  0040f	83 e9 01	 sub	 ecx, 1
  00412	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00415	33 c0		 xor	 eax, eax
  00417	39 8a a0 16 00
	00		 cmp	 DWORD PTR [edx+5792], ecx
  0041d	0f 94 c0	 sete	 al
  00420	89 45 fc	 mov	 DWORD PTR _bflush$[ebp], eax

; 1709 :             s->lookahead--;

  00423	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00426	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
  00429	83 ea 01	 sub	 edx, 1
  0042c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0042f	89 50 74	 mov	 DWORD PTR [eax+116], edx

; 1710 :             s->strstart++;

  00432	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00435	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00438	83 c2 01	 add	 edx, 1
  0043b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0043e	89 50 6c	 mov	 DWORD PTR [eax+108], edx
$LN7@deflate_fa:

; 1711 :         }
; 1712 :         if (bflush) FLUSH_BLOCK(s, 0);

  00441	83 7d fc 00	 cmp	 DWORD PTR _bflush$[ebp], 0
  00445	74 6c		 je	 SHORT $LN6@deflate_fa
  00447	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044a	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0044e	7c 11		 jl	 SHORT $LN25@deflate_fa
  00450	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00453	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00456	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00459	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  0045c	89 45 e4	 mov	 DWORD PTR tv351[ebp], eax
  0045f	eb 07		 jmp	 SHORT $LN26@deflate_fa
$LN25@deflate_fa:
  00461	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv351[ebp], 0
$LN26@deflate_fa:
  00468	6a 00		 push	 0
  0046a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0046d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00470	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00473	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00476	51		 push	 ecx
  00477	8b 55 e4	 mov	 edx, DWORD PTR tv351[ebp]
  0047a	52		 push	 edx
  0047b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0047e	50		 push	 eax
  0047f	e8 00 00 00 00	 call	 __tr_flush_block
  00484	83 c4 10	 add	 esp, 16			; 00000010H
  00487	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0048a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0048d	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00490	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00493	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00496	8b 11		 mov	 edx, DWORD PTR [ecx]
  00498	52		 push	 edx
  00499	e8 00 00 00 00	 call	 _flush_pending
  0049e	83 c4 04	 add	 esp, 4
  004a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  004a6	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  004aa	75 07		 jne	 SHORT $LN6@deflate_fa
  004ac	33 c0		 xor	 eax, eax
  004ae	e9 22 01 00 00	 jmp	 $LN21@deflate_fa
$LN6@deflate_fa:

; 1713 :     }

  004b3	e9 4f fb ff ff	 jmp	 $LN20@deflate_fa
$LN19@deflate_fa:

; 1714 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  004b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004bb	83 7a 6c 02	 cmp	 DWORD PTR [edx+108], 2
  004bf	73 0b		 jae	 SHORT $LN27@deflate_fa
  004c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c4	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  004c7	89 4d e0	 mov	 DWORD PTR tv363[ebp], ecx
  004ca	eb 07		 jmp	 SHORT $LN28@deflate_fa
$LN27@deflate_fa:
  004cc	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR tv363[ebp], 2
$LN28@deflate_fa:
  004d3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004d6	8b 45 e0	 mov	 eax, DWORD PTR tv363[ebp]
  004d9	89 82 b4 16 00
	00		 mov	 DWORD PTR [edx+5812], eax

; 1715 :     if (flush == Z_FINISH) {

  004df	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  004e3	75 76		 jne	 SHORT $LN4@deflate_fa

; 1716 :         FLUSH_BLOCK(s, 1);

  004e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e8	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  004ec	7c 11		 jl	 SHORT $LN29@deflate_fa
  004ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f1	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  004f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004f7	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  004fa	89 45 dc	 mov	 DWORD PTR tv375[ebp], eax
  004fd	eb 07		 jmp	 SHORT $LN30@deflate_fa
$LN29@deflate_fa:
  004ff	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv375[ebp], 0
$LN30@deflate_fa:
  00506	6a 01		 push	 1
  00508	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0050b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0050e	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00511	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  00514	51		 push	 ecx
  00515	8b 55 dc	 mov	 edx, DWORD PTR tv375[ebp]
  00518	52		 push	 edx
  00519	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0051c	50		 push	 eax
  0051d	e8 00 00 00 00	 call	 __tr_flush_block
  00522	83 c4 10	 add	 esp, 16			; 00000010H
  00525	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00528	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0052b	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0052e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00531	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00534	8b 11		 mov	 edx, DWORD PTR [ecx]
  00536	52		 push	 edx
  00537	e8 00 00 00 00	 call	 _flush_pending
  0053c	83 c4 04	 add	 esp, 4
  0053f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00542	8b 08		 mov	 ecx, DWORD PTR [eax]
  00544	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00548	75 0a		 jne	 SHORT $LN3@deflate_fa
  0054a	b8 02 00 00 00	 mov	 eax, 2
  0054f	e9 81 00 00 00	 jmp	 $LN21@deflate_fa
$LN3@deflate_fa:

; 1717 :         return finish_done;

  00554	b8 03 00 00 00	 mov	 eax, 3
  00559	eb 7a		 jmp	 SHORT $LN21@deflate_fa
$LN4@deflate_fa:

; 1718 :     }
; 1719 :     if (s->last_lit)

  0055b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0055e	83 ba a0 16 00
	00 00		 cmp	 DWORD PTR [edx+5792], 0
  00565	74 69		 je	 SHORT $LN2@deflate_fa

; 1720 :         FLUSH_BLOCK(s, 0);

  00567	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0056a	83 78 5c 00	 cmp	 DWORD PTR [eax+92], 0
  0056e	7c 11		 jl	 SHORT $LN31@deflate_fa
  00570	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00573	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00576	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00579	03 50 5c	 add	 edx, DWORD PTR [eax+92]
  0057c	89 55 d8	 mov	 DWORD PTR tv395[ebp], edx
  0057f	eb 07		 jmp	 SHORT $LN32@deflate_fa
$LN31@deflate_fa:
  00581	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv395[ebp], 0
$LN32@deflate_fa:
  00588	6a 00		 push	 0
  0058a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0058d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00590	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00593	2b 42 5c	 sub	 eax, DWORD PTR [edx+92]
  00596	50		 push	 eax
  00597	8b 4d d8	 mov	 ecx, DWORD PTR tv395[ebp]
  0059a	51		 push	 ecx
  0059b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0059e	52		 push	 edx
  0059f	e8 00 00 00 00	 call	 __tr_flush_block
  005a4	83 c4 10	 add	 esp, 16			; 00000010H
  005a7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005aa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005ad	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  005b0	89 50 5c	 mov	 DWORD PTR [eax+92], edx
  005b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005b8	51		 push	 ecx
  005b9	e8 00 00 00 00	 call	 _flush_pending
  005be	83 c4 04	 add	 esp, 4
  005c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005c4	8b 02		 mov	 eax, DWORD PTR [edx]
  005c6	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  005ca	75 04		 jne	 SHORT $LN2@deflate_fa
  005cc	33 c0		 xor	 eax, eax
  005ce	eb 05		 jmp	 SHORT $LN21@deflate_fa
$LN2@deflate_fa:

; 1721 :     return block_done;

  005d0	b8 01 00 00 00	 mov	 eax, 1
$LN21@deflate_fa:

; 1722 : }

  005d5	5e		 pop	 esi
  005d6	8b e5		 mov	 esp, ebp
  005d8	5d		 pop	 ebp
  005d9	c3		 ret	 0
_deflate_fast ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv199 = -24						; size = 4
tv178 = -20						; size = 4
tv158 = -16						; size = 4
tv134 = -12						; size = 4
_max_block_size$ = -8					; size = 4
_max_start$ = -4					; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1567 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1568 :     /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
; 1569 :      * to pending_buf_size, and each stored block has a 5 byte header:
; 1570 :      */
; 1571 :     ulg max_block_size = 0xffff;

  00006	c7 45 f8 ff ff
	00 00		 mov	 DWORD PTR _max_block_size$[ebp], 65535 ; 0000ffffH

; 1572 :     ulg max_start;
; 1573 : 
; 1574 :     if (max_block_size > s->pending_buf_size - 5) {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00013	83 e9 05	 sub	 ecx, 5
  00016	39 4d f8	 cmp	 DWORD PTR _max_block_size$[ebp], ecx
  00019	76 0c		 jbe	 SHORT $LN14@deflate_st

; 1575 :         max_block_size = s->pending_buf_size - 5;

  0001b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00021	83 e8 05	 sub	 eax, 5
  00024	89 45 f8	 mov	 DWORD PTR _max_block_size$[ebp], eax
$LN14@deflate_st:

; 1576 :     }
; 1577 : 
; 1578 :     /* Copy as much as possible from input to output: */
; 1579 :     for (;;) {
; 1580 :         /* Fill the window as much as possible: */
; 1581 :         if (s->lookahead <= 1) {

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0002a	83 79 74 01	 cmp	 DWORD PTR [ecx+116], 1
  0002e	77 30		 ja	 SHORT $LN12@deflate_st

; 1582 : 
; 1583 :             Assert(s->strstart < s->w_size+MAX_DIST(s) ||
; 1584 :                    s->block_start >= (long)s->w_size, "slide too late");
; 1585 : 
; 1586 :             fill_window(s);

  00030	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _fill_window
  00039	83 c4 04	 add	 esp, 4

; 1587 :             if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003f	83 78 74 00	 cmp	 DWORD PTR [eax+116], 0
  00043	75 0d		 jne	 SHORT $LN11@deflate_st
  00045	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00049	75 07		 jne	 SHORT $LN11@deflate_st
  0004b	33 c0		 xor	 eax, eax
  0004d	e9 64 02 00 00	 jmp	 $LN16@deflate_st
$LN11@deflate_st:

; 1588 : 
; 1589 :             if (s->lookahead == 0) break; /* flush the current block */

  00052	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00055	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  00059	75 05		 jne	 SHORT $LN12@deflate_st
  0005b	e9 51 01 00 00	 jmp	 $LN13@deflate_st
$LN12@deflate_st:

; 1590 :         }
; 1591 :         Assert(s->block_start >= 0L, "block gone");
; 1592 : 
; 1593 :         s->strstart += s->lookahead;

  00060	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00063	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00069	03 41 74	 add	 eax, DWORD PTR [ecx+116]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006f	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 1594 :         s->lookahead = 0;

  00072	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00075	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [eax+116], 0

; 1595 : 
; 1596 :         /* Emit a stored block if pending_buf will be full: */
; 1597 :         max_start = s->block_start + max_block_size;

  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007f	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00082	03 55 f8	 add	 edx, DWORD PTR _max_block_size$[ebp]
  00085	89 55 fc	 mov	 DWORD PTR _max_start$[ebp], edx

; 1598 :         if (s->strstart == 0 || (ulg)s->strstart >= max_start) {

  00088	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0008b	83 78 6c 00	 cmp	 DWORD PTR [eax+108], 0
  0008f	74 0f		 je	 SHORT $LN8@deflate_st
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00094	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00097	3b 55 fc	 cmp	 edx, DWORD PTR _max_start$[ebp]
  0009a	0f 82 84 00 00
	00		 jb	 $LN9@deflate_st
$LN8@deflate_st:

; 1599 :             /* strstart == 0 is possible when wraparound on 16-bit machine */
; 1600 :             s->lookahead = (uInt)(s->strstart - max_start);

  000a0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a3	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  000a6	2b 4d fc	 sub	 ecx, DWORD PTR _max_start$[ebp]
  000a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ac	89 4a 74	 mov	 DWORD PTR [edx+116], ecx

; 1601 :             s->strstart = (uInt)max_start;

  000af	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _max_start$[ebp]
  000b5	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 1602 :             FLUSH_BLOCK(s, 0);

  000b8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000bb	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  000bf	7c 11		 jl	 SHORT $LN18@deflate_st
  000c1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c4	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ca	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  000cd	89 4d f4	 mov	 DWORD PTR tv134[ebp], ecx
  000d0	eb 07		 jmp	 SHORT $LN19@deflate_st
$LN18@deflate_st:
  000d2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv134[ebp], 0
$LN19@deflate_st:
  000d9	6a 00		 push	 0
  000db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e1	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  000e4	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  000e7	52		 push	 edx
  000e8	8b 45 f4	 mov	 eax, DWORD PTR tv134[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 __tr_flush_block
  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000fb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fe	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00101	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00104	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00107	8b 02		 mov	 eax, DWORD PTR [edx]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 _flush_pending
  0010f	83 c4 04	 add	 esp, 4
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00115	8b 11		 mov	 edx, DWORD PTR [ecx]
  00117	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0011b	75 07		 jne	 SHORT $LN9@deflate_st
  0011d	33 c0		 xor	 eax, eax
  0011f	e9 92 01 00 00	 jmp	 $LN16@deflate_st
$LN9@deflate_st:

; 1603 :         }
; 1604 :         /* Flush if we may have to slide, otherwise block_start may become
; 1605 :          * negative and the data will be gone:
; 1606 :          */
; 1607 :         if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {

  00124	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012a	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0012d	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  00130	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00133	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00136	81 e9 06 01 00
	00		 sub	 ecx, 262		; 00000106H
  0013c	3b d1		 cmp	 edx, ecx
  0013e	72 6c		 jb	 SHORT $LN6@deflate_st

; 1608 :             FLUSH_BLOCK(s, 0);

  00140	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00143	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  00147	7c 11		 jl	 SHORT $LN20@deflate_st
  00149	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014c	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0014f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00152	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  00155	89 4d f0	 mov	 DWORD PTR tv158[ebp], ecx
  00158	eb 07		 jmp	 SHORT $LN21@deflate_st
$LN20@deflate_st:
  0015a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv158[ebp], 0
$LN21@deflate_st:
  00161	6a 00		 push	 0
  00163	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00166	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00169	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0016c	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  0016f	52		 push	 edx
  00170	8b 45 f0	 mov	 eax, DWORD PTR tv158[ebp]
  00173	50		 push	 eax
  00174	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00177	51		 push	 ecx
  00178	e8 00 00 00 00	 call	 __tr_flush_block
  0017d	83 c4 10	 add	 esp, 16			; 00000010H
  00180	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00183	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00186	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00189	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  0018c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0018f	8b 02		 mov	 eax, DWORD PTR [edx]
  00191	50		 push	 eax
  00192	e8 00 00 00 00	 call	 _flush_pending
  00197	83 c4 04	 add	 esp, 4
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  001a3	75 07		 jne	 SHORT $LN6@deflate_st
  001a5	33 c0		 xor	 eax, eax
  001a7	e9 0a 01 00 00	 jmp	 $LN16@deflate_st
$LN6@deflate_st:

; 1609 :         }
; 1610 :     }

  001ac	e9 76 fe ff ff	 jmp	 $LN14@deflate_st
$LN13@deflate_st:

; 1611 :     s->insert = 0;

  001b1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001b4	c7 80 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5812], 0

; 1612 :     if (flush == Z_FINISH) {

  001be	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  001c2	75 76		 jne	 SHORT $LN4@deflate_st

; 1613 :         FLUSH_BLOCK(s, 1);

  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c7	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  001cb	7c 11		 jl	 SHORT $LN22@deflate_st
  001cd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001d0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d6	03 41 5c	 add	 eax, DWORD PTR [ecx+92]
  001d9	89 45 ec	 mov	 DWORD PTR tv178[ebp], eax
  001dc	eb 07		 jmp	 SHORT $LN23@deflate_st
$LN22@deflate_st:
  001de	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv178[ebp], 0
$LN23@deflate_st:
  001e5	6a 01		 push	 1
  001e7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ed	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  001f0	2b 48 5c	 sub	 ecx, DWORD PTR [eax+92]
  001f3	51		 push	 ecx
  001f4	8b 55 ec	 mov	 edx, DWORD PTR tv178[ebp]
  001f7	52		 push	 edx
  001f8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fb	50		 push	 eax
  001fc	e8 00 00 00 00	 call	 __tr_flush_block
  00201	83 c4 10	 add	 esp, 16			; 00000010H
  00204	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00207	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0020a	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0020d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  00210	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00213	8b 11		 mov	 edx, DWORD PTR [ecx]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 _flush_pending
  0021b	83 c4 04	 add	 esp, 4
  0021e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00221	8b 08		 mov	 ecx, DWORD PTR [eax]
  00223	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00227	75 0a		 jne	 SHORT $LN3@deflate_st
  00229	b8 02 00 00 00	 mov	 eax, 2
  0022e	e9 83 00 00 00	 jmp	 $LN16@deflate_st
$LN3@deflate_st:

; 1614 :         return finish_done;

  00233	b8 03 00 00 00	 mov	 eax, 3
  00238	eb 7c		 jmp	 SHORT $LN16@deflate_st
$LN4@deflate_st:

; 1615 :     }
; 1616 :     if ((long)s->strstart > s->block_start)

  0023a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00240	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00243	3b 48 5c	 cmp	 ecx, DWORD PTR [eax+92]
  00246	7e 69		 jle	 SHORT $LN2@deflate_st

; 1617 :         FLUSH_BLOCK(s, 0);

  00248	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0024b	83 7a 5c 00	 cmp	 DWORD PTR [edx+92], 0
  0024f	7c 11		 jl	 SHORT $LN24@deflate_st
  00251	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00254	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00257	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025a	03 4a 5c	 add	 ecx, DWORD PTR [edx+92]
  0025d	89 4d e8	 mov	 DWORD PTR tv199[ebp], ecx
  00260	eb 07		 jmp	 SHORT $LN25@deflate_st
$LN24@deflate_st:
  00262	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv199[ebp], 0
$LN25@deflate_st:
  00269	6a 00		 push	 0
  0026b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00271	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00274	2b 51 5c	 sub	 edx, DWORD PTR [ecx+92]
  00277	52		 push	 edx
  00278	8b 45 e8	 mov	 eax, DWORD PTR tv199[ebp]
  0027b	50		 push	 eax
  0027c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0027f	51		 push	 ecx
  00280	e8 00 00 00 00	 call	 __tr_flush_block
  00285	83 c4 10	 add	 esp, 16			; 00000010H
  00288	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0028b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0028e	8b 48 6c	 mov	 ecx, DWORD PTR [eax+108]
  00291	89 4a 5c	 mov	 DWORD PTR [edx+92], ecx
  00294	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00297	8b 02		 mov	 eax, DWORD PTR [edx]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 _flush_pending
  0029f	83 c4 04	 add	 esp, 4
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a7	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  002ab	75 04		 jne	 SHORT $LN2@deflate_st
  002ad	33 c0		 xor	 eax, eax
  002af	eb 05		 jmp	 SHORT $LN16@deflate_st
$LN2@deflate_st:

; 1618 :     return block_done;

  002b1	b8 01 00 00 00	 mov	 eax, 1
$LN16@deflate_st:

; 1619 : }

  002b6	8b e5		 mov	 esp, ebp
  002b8	5d		 pop	 ebp
  002b9	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
PUBLIC	_deflate@8
; Function compile flags: /Odtp
;	COMDAT _deflate@8
_TEXT	SEGMENT
tv659 = -64						; size = 4
tv660 = -60						; size = 4
tv285 = -56						; size = 4
tv286 = -52						; size = 4
tv189 = -48						; size = 4
tv190 = -44						; size = 4
_bstate$77946 = -40					; size = 4
_val$77922 = -36					; size = 4
_beg$77921 = -32					; size = 4
_val$77909 = -28					; size = 4
_beg$77908 = -24					; size = 4
_beg$77896 = -20					; size = 4
_header$77881 = -16					; size = 4
_level_flags$77882 = -12				; size = 4
_old_flush$ = -8					; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 668  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi

; 669  :     int old_flush; /* value of flush param for previous deflate call */
; 670  :     deflate_state *s;
; 671  : 
; 672  :     if (strm == Z_NULL || strm->state == Z_NULL ||
; 673  :         flush > Z_BLOCK || flush < 0) {

  00007	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  0000b	74 15		 je	 SHORT $LN82@deflate
  0000d	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00010	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00014	74 0c		 je	 SHORT $LN82@deflate
  00016	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  0001a	7f 06		 jg	 SHORT $LN82@deflate
  0001c	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00020	7d 0a		 jge	 SHORT $LN83@deflate
$LN82@deflate:

; 674  :         return Z_STREAM_ERROR;

  00022	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00027	e9 9d 0e 00 00	 jmp	 $LN84@deflate
$LN83@deflate:

; 675  :     }
; 676  :     s = strm->state;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0002f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00032	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 677  : 
; 678  :     if (strm->next_out == Z_NULL ||
; 679  :         (strm->next_in == Z_NULL && strm->avail_in != 0) ||
; 680  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {

  00035	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00038	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0003c	74 23		 je	 SHORT $LN80@deflate
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00041	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00044	75 09		 jne	 SHORT $LN79@deflate
  00046	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00049	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0004d	75 12		 jne	 SHORT $LN80@deflate
$LN79@deflate:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00052	81 78 04 9a 02
	00 00		 cmp	 DWORD PTR [eax+4], 666	; 0000029aH
  00059	75 1c		 jne	 SHORT $LN81@deflate
  0005b	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0005f	74 16		 je	 SHORT $LN81@deflate
$LN80@deflate:

; 681  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg+16
  0006a	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0006d	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00072	e9 52 0e 00 00	 jmp	 $LN84@deflate
$LN81@deflate:

; 682  :     }
; 683  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00077	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0007a	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0007e	75 16		 jne	 SHORT $LN78@deflate
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00083	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg+28
  00089	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  0008c	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00091	e9 33 0e 00 00	 jmp	 $LN84@deflate
$LN78@deflate:

; 684  : 
; 685  :     s->strm = strm; /* just in case */

  00096	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0009c	89 08		 mov	 DWORD PTR [eax], ecx

; 686  :     old_flush = s->last_flush;

  0009e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000a1	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  000a4	89 45 f8	 mov	 DWORD PTR _old_flush$[ebp], eax

; 687  :     s->last_flush = flush;

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000aa	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  000ad	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 688  : 
; 689  :     /* Write the header */
; 690  :     if (s->status == INIT_STATE) {

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b3	83 78 04 2a	 cmp	 DWORD PTR [eax+4], 42	; 0000002aH
  000b7	0f 85 22 05 00
	00		 jne	 $LN77@deflate

; 691  : #ifdef GZIP
; 692  :         if (s->wrap == 2) {

  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c0	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  000c4	0f 85 15 04 00
	00		 jne	 $LN76@deflate

; 693  :             strm->adler = crc32(0L, Z_NULL, 0);

  000ca	6a 00		 push	 0
  000cc	6a 00		 push	 0
  000ce	6a 00		 push	 0
  000d0	e8 00 00 00 00	 call	 _crc32@12
  000d5	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000d8	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 694  :             put_byte(s, 31);

  000db	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000de	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  000e4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e7	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ee	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f1	83 c2 01	 add	 edx, 1
  000f4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000f7	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 695  :             put_byte(s, 139);

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000fd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00100	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00103	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00106	c6 04 0a 8b	 mov	 BYTE PTR [edx+ecx], 139	; 0000008bH
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0010d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00110	83 c0 01	 add	 eax, 1
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00116	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 696  :             put_byte(s, 8);

  00119	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0011c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00122	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00125	c6 04 10 08	 mov	 BYTE PTR [eax+edx], 8
  00129	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0012c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0012f	83 c1 01	 add	 ecx, 1
  00132	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00135	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 697  :             if (s->gzhead == Z_NULL) {

  00138	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0013b	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0013f	0f 85 2d 01 00
	00		 jne	 $LN75@deflate

; 698  :                 put_byte(s, 0);

  00145	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00148	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0014b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0014e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00151	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
  00155	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00158	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0015b	83 c0 01	 add	 eax, 1
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00161	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 699  :                 put_byte(s, 0);

  00164	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00167	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0016d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00170	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  00174	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00177	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0017a	83 c1 01	 add	 ecx, 1
  0017d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00180	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 700  :                 put_byte(s, 0);

  00183	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00186	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00189	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0018c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0018f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00193	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00196	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00199	83 c2 01	 add	 edx, 1
  0019c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0019f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 701  :                 put_byte(s, 0);

  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001a5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001a8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001ab	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001ae	c6 04 0a 00	 mov	 BYTE PTR [edx+ecx], 0
  001b2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001b5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001b8	83 c0 01	 add	 eax, 1
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001be	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 702  :                 put_byte(s, 0);

  001c1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001c4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001ca	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001cd	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
  001d1	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001d4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001d7	83 c1 01	 add	 ecx, 1
  001da	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  001dd	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 703  :                 put_byte(s, s->level == 9 ? 2 :
; 704  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 705  :                              4 : 0));

  001e0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  001e3	83 b8 84 00 00
	00 09		 cmp	 DWORD PTR [eax+132], 9
  001ea	75 09		 jne	 SHORT $LN88@deflate
  001ec	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR tv190[ebp], 2
  001f3	eb 2e		 jmp	 SHORT $LN89@deflate
$LN88@deflate:
  001f5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  001f8	83 b9 88 00 00
	00 02		 cmp	 DWORD PTR [ecx+136], 2
  001ff	7d 15		 jge	 SHORT $LN86@deflate
  00201	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00204	83 ba 84 00 00
	00 02		 cmp	 DWORD PTR [edx+132], 2
  0020b	7c 09		 jl	 SHORT $LN86@deflate
  0020d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv189[ebp], 0
  00214	eb 07		 jmp	 SHORT $LN87@deflate
$LN86@deflate:
  00216	c7 45 d0 04 00
	00 00		 mov	 DWORD PTR tv189[ebp], 4
$LN87@deflate:
  0021d	8b 45 d0	 mov	 eax, DWORD PTR tv189[ebp]
  00220	89 45 d4	 mov	 DWORD PTR tv190[ebp], eax
$LN89@deflate:
  00223	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00226	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00229	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0022c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0022f	8a 45 d4	 mov	 al, BYTE PTR tv190[ebp]
  00232	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00235	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00238	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0023b	83 c2 01	 add	 edx, 1
  0023e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00241	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 706  :                 put_byte(s, OS_CODE);

  00244	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00247	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0024a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0024d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00250	c6 04 0a 0b	 mov	 BYTE PTR [edx+ecx], 11	; 0000000bH
  00254	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00257	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0025a	83 c0 01	 add	 eax, 1
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00260	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 707  :                 s->status = BUSY_STATE;

  00263	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00266	c7 42 04 71 00
	00 00		 mov	 DWORD PTR [edx+4], 113	; 00000071H

; 708  :             }
; 709  :             else {

  0026d	e9 68 02 00 00	 jmp	 $LN74@deflate
$LN75@deflate:

; 710  :                 put_byte(s, (s->gzhead->text ? 1 : 0) +
; 711  :                             (s->gzhead->hcrc ? 2 : 0) +
; 712  :                             (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 713  :                             (s->gzhead->name == Z_NULL ? 0 : 8) +
; 714  :                             (s->gzhead->comment == Z_NULL ? 0 : 16)
; 715  :                         );

  00272	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00275	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00278	33 d2		 xor	 edx, edx
  0027a	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0027d	0f 95 c2	 setne	 dl
  00280	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00283	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00286	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00289	f7 d8		 neg	 eax
  0028b	1b c0		 sbb	 eax, eax
  0028d	83 e0 02	 and	 eax, 2
  00290	03 d0		 add	 edx, eax
  00292	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00295	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00298	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0029b	f7 d9		 neg	 ecx
  0029d	1b c9		 sbb	 ecx, ecx
  0029f	83 e1 04	 and	 ecx, 4
  002a2	03 d1		 add	 edx, ecx
  002a4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002a7	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  002aa	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  002ad	f7 d8		 neg	 eax
  002af	1b c0		 sbb	 eax, eax
  002b1	83 e0 08	 and	 eax, 8
  002b4	03 d0		 add	 edx, eax
  002b6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002b9	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  002bc	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002bf	f7 d9		 neg	 ecx
  002c1	1b c9		 sbb	 ecx, ecx
  002c3	83 e1 10	 and	 ecx, 16			; 00000010H
  002c6	03 d1		 add	 edx, ecx
  002c8	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002cb	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002ce	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002d1	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002d4	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002d7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002da	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002dd	83 c2 01	 add	 edx, 1
  002e0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  002e3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 716  :                 put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002e6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002e9	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  002ec	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002ef	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002f7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002fa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  002fd	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00300	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00303	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00306	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00309	83 c0 01	 add	 eax, 1
  0030c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0030f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 717  :                 put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  00312	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00315	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00318	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0031b	c1 e9 08	 shr	 ecx, 8
  0031e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00324	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00327	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0032a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0032d	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00330	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00333	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00336	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00339	83 c1 01	 add	 ecx, 1
  0033c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0033f	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 718  :                 put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  00342	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00345	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00348	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0034b	c1 ea 10	 shr	 edx, 16			; 00000010H
  0034e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00354	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00357	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0035a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0035d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00360	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00363	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00366	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00369	83 c2 01	 add	 edx, 1
  0036c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0036f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 719  :                 put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00372	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00375	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00378	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0037b	c1 e8 18	 shr	 eax, 24			; 00000018H
  0037e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00383	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00386	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00389	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0038c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0038f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00392	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00395	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00398	83 c0 01	 add	 eax, 1
  0039b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0039e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 720  :                 put_byte(s, s->level == 9 ? 2 :
; 721  :                             (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 722  :                              4 : 0));

  003a1	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003a4	83 ba 84 00 00
	00 09		 cmp	 DWORD PTR [edx+132], 9
  003ab	75 09		 jne	 SHORT $LN92@deflate
  003ad	c7 45 cc 02 00
	00 00		 mov	 DWORD PTR tv286[ebp], 2
  003b4	eb 2e		 jmp	 SHORT $LN93@deflate
$LN92@deflate:
  003b6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003b9	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  003c0	7d 15		 jge	 SHORT $LN90@deflate
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  003c5	83 b9 84 00 00
	00 02		 cmp	 DWORD PTR [ecx+132], 2
  003cc	7c 09		 jl	 SHORT $LN90@deflate
  003ce	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv285[ebp], 0
  003d5	eb 07		 jmp	 SHORT $LN91@deflate
$LN90@deflate:
  003d7	c7 45 c8 04 00
	00 00		 mov	 DWORD PTR tv285[ebp], 4
$LN91@deflate:
  003de	8b 55 c8	 mov	 edx, DWORD PTR tv285[ebp]
  003e1	89 55 cc	 mov	 DWORD PTR tv286[ebp], edx
$LN93@deflate:
  003e4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003e7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003ea	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  003ed	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003f0	8a 55 cc	 mov	 dl, BYTE PTR tv286[ebp]
  003f3	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  003f6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  003f9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003fc	83 c1 01	 add	 ecx, 1
  003ff	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00402	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 723  :                 put_byte(s, s->gzhead->os & 0xff);

  00405	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00408	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0040b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0040e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00414	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00417	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0041a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0041d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00420	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00426	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00429	83 c2 01	 add	 edx, 1
  0042c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0042f	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 724  :                 if (s->gzhead->extra != Z_NULL) {

  00432	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00435	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00438	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  0043c	74 5c		 je	 SHORT $LN73@deflate

; 725  :                     put_byte(s, s->gzhead->extra_len & 0xff);

  0043e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00441	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00444	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00447	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0044d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00450	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00453	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00456	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00459	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0045c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0045f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00462	83 c2 01	 add	 edx, 1
  00465	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00468	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 726  :                     put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  0046b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0046e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00471	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00474	c1 e8 08	 shr	 eax, 8
  00477	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0047c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0047f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00482	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00485	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00488	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0048b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0048e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00491	83 c0 01	 add	 eax, 1
  00494	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00497	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN73@deflate:

; 727  :                 }
; 728  :                 if (s->gzhead->hcrc)

  0049a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0049d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  004a0	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004a4	74 20		 je	 SHORT $LN72@deflate

; 729  :                     strm->adler = crc32(strm->adler, s->pending_buf,
; 730  :                                         s->pending);

  004a6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  004a9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  004ac	52		 push	 edx
  004ad	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004b0	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004b3	51		 push	 ecx
  004b4	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  004b7	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  004ba	50		 push	 eax
  004bb	e8 00 00 00 00	 call	 _crc32@12
  004c0	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  004c3	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN72@deflate:

; 731  :                 s->gzindex = 0;

  004c6	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  004c9	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 732  :                 s->status = EXTRA_STATE;

  004d0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004d3	c7 40 04 45 00
	00 00		 mov	 DWORD PTR [eax+4], 69	; 00000045H
$LN74@deflate:

; 733  :             }
; 734  :         }
; 735  :         else

  004da	e9 00 01 00 00	 jmp	 $LN77@deflate
$LN76@deflate:

; 736  : #endif
; 737  :         {
; 738  :             uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  004df	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  004e2	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  004e5	83 ea 08	 sub	 edx, 8
  004e8	c1 e2 04	 shl	 edx, 4
  004eb	83 c2 08	 add	 edx, 8
  004ee	c1 e2 08	 shl	 edx, 8
  004f1	89 55 f0	 mov	 DWORD PTR _header$77881[ebp], edx

; 739  :             uInt level_flags;
; 740  : 
; 741  :             if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  004f4	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  004f7	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  004fe	7d 0c		 jge	 SHORT $LN69@deflate
  00500	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00503	83 b9 84 00 00
	00 02		 cmp	 DWORD PTR [ecx+132], 2
  0050a	7d 09		 jge	 SHORT $LN70@deflate
$LN69@deflate:

; 742  :                 level_flags = 0;

  0050c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _level_flags$77882[ebp], 0
  00513	eb 31		 jmp	 SHORT $LN68@deflate
$LN70@deflate:

; 743  :             else if (s->level < 6)

  00515	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00518	83 ba 84 00 00
	00 06		 cmp	 DWORD PTR [edx+132], 6
  0051f	7d 09		 jge	 SHORT $LN67@deflate

; 744  :                 level_flags = 1;

  00521	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _level_flags$77882[ebp], 1
  00528	eb 1c		 jmp	 SHORT $LN68@deflate
$LN67@deflate:

; 745  :             else if (s->level == 6)

  0052a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0052d	83 b8 84 00 00
	00 06		 cmp	 DWORD PTR [eax+132], 6
  00534	75 09		 jne	 SHORT $LN65@deflate

; 746  :                 level_flags = 2;

  00536	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _level_flags$77882[ebp], 2

; 747  :             else

  0053d	eb 07		 jmp	 SHORT $LN68@deflate
$LN65@deflate:

; 748  :                 level_flags = 3;

  0053f	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR _level_flags$77882[ebp], 3
$LN68@deflate:

; 749  :             header |= (level_flags << 6);

  00546	8b 4d f4	 mov	 ecx, DWORD PTR _level_flags$77882[ebp]
  00549	c1 e1 06	 shl	 ecx, 6
  0054c	0b 4d f0	 or	 ecx, DWORD PTR _header$77881[ebp]
  0054f	89 4d f0	 mov	 DWORD PTR _header$77881[ebp], ecx

; 750  :             if (s->strstart != 0) header |= PRESET_DICT;

  00552	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00555	83 7a 6c 00	 cmp	 DWORD PTR [edx+108], 0
  00559	74 09		 je	 SHORT $LN63@deflate
  0055b	8b 45 f0	 mov	 eax, DWORD PTR _header$77881[ebp]
  0055e	83 c8 20	 or	 eax, 32			; 00000020H
  00561	89 45 f0	 mov	 DWORD PTR _header$77881[ebp], eax
$LN63@deflate:

; 751  :             header += 31 - (header % 31);

  00564	8b 45 f0	 mov	 eax, DWORD PTR _header$77881[ebp]
  00567	33 d2		 xor	 edx, edx
  00569	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  0056e	f7 f1		 div	 ecx
  00570	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00575	2b c2		 sub	 eax, edx
  00577	03 45 f0	 add	 eax, DWORD PTR _header$77881[ebp]
  0057a	89 45 f0	 mov	 DWORD PTR _header$77881[ebp], eax

; 752  : 
; 753  :             s->status = BUSY_STATE;

  0057d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00580	c7 41 04 71 00
	00 00		 mov	 DWORD PTR [ecx+4], 113	; 00000071H

; 754  :             putShortMSB(s, header);

  00587	8b 55 f0	 mov	 edx, DWORD PTR _header$77881[ebp]
  0058a	52		 push	 edx
  0058b	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0058e	50		 push	 eax
  0058f	e8 00 00 00 00	 call	 _putShortMSB
  00594	83 c4 08	 add	 esp, 8

; 755  : 
; 756  :             /* Save the adler32 of the preset dictionary: */
; 757  :             if (s->strstart != 0) {

  00597	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0059a	83 79 6c 00	 cmp	 DWORD PTR [ecx+108], 0
  0059e	74 2e		 je	 SHORT $LN62@deflate

; 758  :                 putShortMSB(s, (uInt)(strm->adler >> 16));

  005a0	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  005a3	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  005a6	c1 e8 10	 shr	 eax, 16			; 00000010H
  005a9	50		 push	 eax
  005aa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005ad	51		 push	 ecx
  005ae	e8 00 00 00 00	 call	 _putShortMSB
  005b3	83 c4 08	 add	 esp, 8

; 759  :                 putShortMSB(s, (uInt)(strm->adler & 0xffff));

  005b6	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  005b9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  005bc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  005c1	50		 push	 eax
  005c2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005c5	51		 push	 ecx
  005c6	e8 00 00 00 00	 call	 _putShortMSB
  005cb	83 c4 08	 add	 esp, 8
$LN62@deflate:

; 760  :             }
; 761  :             strm->adler = adler32(0L, Z_NULL, 0);

  005ce	6a 00		 push	 0
  005d0	6a 00		 push	 0
  005d2	6a 00		 push	 0
  005d4	e8 00 00 00 00	 call	 _adler32@12
  005d9	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  005dc	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN77@deflate:

; 762  :         }
; 763  :     }
; 764  : #ifdef GZIP
; 765  :     if (s->status == EXTRA_STATE) {

  005df	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005e2	83 78 04 45	 cmp	 DWORD PTR [eax+4], 69	; 00000045H
  005e6	0f 85 56 01 00
	00		 jne	 $LN61@deflate

; 766  :         if (s->gzhead->extra != Z_NULL) {

  005ec	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  005ef	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  005f2	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  005f6	0f 84 3c 01 00
	00		 je	 $LN60@deflate

; 767  :             uInt beg = s->pending;  /* start of bytes to update crc */

  005fc	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  005ff	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00602	89 4d ec	 mov	 DWORD PTR _beg$77896[ebp], ecx
$LN59@deflate:

; 768  : 
; 769  :             while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {

  00605	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00608	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0060b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0060e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00614	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00617	39 4a 20	 cmp	 DWORD PTR [edx+32], ecx
  0061a	0f 83 b4 00 00
	00		 jae	 $LN58@deflate

; 770  :                 if (s->pending == s->pending_buf_size) {

  00620	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00623	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00626	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00629	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0062c	75 62		 jne	 SHORT $LN57@deflate

; 771  :                     if (s->gzhead->hcrc && s->pending > beg)

  0062e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00631	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00634	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00638	74 31		 je	 SHORT $LN56@deflate
  0063a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0063d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00640	3b 45 ec	 cmp	 eax, DWORD PTR _beg$77896[ebp]
  00643	76 26		 jbe	 SHORT $LN56@deflate

; 772  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 773  :                                             s->pending - beg);

  00645	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00648	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0064b	2b 55 ec	 sub	 edx, DWORD PTR _beg$77896[ebp]
  0064e	52		 push	 edx
  0064f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00652	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00655	03 4d ec	 add	 ecx, DWORD PTR _beg$77896[ebp]
  00658	51		 push	 ecx
  00659	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0065c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0065f	50		 push	 eax
  00660	e8 00 00 00 00	 call	 _crc32@12
  00665	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00668	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN56@deflate:

; 774  :                     flush_pending(strm);

  0066b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0066e	52		 push	 edx
  0066f	e8 00 00 00 00	 call	 _flush_pending
  00674	83 c4 04	 add	 esp, 4

; 775  :                     beg = s->pending;

  00677	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0067a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0067d	89 4d ec	 mov	 DWORD PTR _beg$77896[ebp], ecx

; 776  :                     if (s->pending == s->pending_buf_size)

  00680	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00683	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00686	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00689	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  0068c	75 02		 jne	 SHORT $LN57@deflate

; 777  :                         break;

  0068e	eb 44		 jmp	 SHORT $LN58@deflate
$LN57@deflate:

; 778  :                 }
; 779  :                 put_byte(s, s->gzhead->extra[s->gzindex]);

  00690	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00693	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00696	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00699	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0069c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0069f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006a2	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  006a5	8b 75 fc	 mov	 esi, DWORD PTR _s$[ebp]
  006a8	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  006ab	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  006ae	88 04 32	 mov	 BYTE PTR [edx+esi], al
  006b1	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006b4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  006b7	83 c2 01	 add	 edx, 1
  006ba	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006bd	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 780  :                 s->gzindex++;

  006c0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006c3	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  006c6	83 c2 01	 add	 edx, 1
  006c9	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006cc	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 781  :             }

  006cf	e9 31 ff ff ff	 jmp	 $LN59@deflate
$LN58@deflate:

; 782  :             if (s->gzhead->hcrc && s->pending > beg)

  006d4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006d7	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  006da	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  006de	74 31		 je	 SHORT $LN54@deflate
  006e0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  006e3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  006e6	3b 4d ec	 cmp	 ecx, DWORD PTR _beg$77896[ebp]
  006e9	76 26		 jbe	 SHORT $LN54@deflate

; 783  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 784  :                                     s->pending - beg);

  006eb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  006ee	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  006f1	2b 45 ec	 sub	 eax, DWORD PTR _beg$77896[ebp]
  006f4	50		 push	 eax
  006f5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  006f8	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  006fb	03 55 ec	 add	 edx, DWORD PTR _beg$77896[ebp]
  006fe	52		 push	 edx
  006ff	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00702	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00705	51		 push	 ecx
  00706	e8 00 00 00 00	 call	 _crc32@12
  0070b	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  0070e	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN54@deflate:

; 785  :             if (s->gzindex == s->gzhead->extra_len) {

  00711	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00714	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00717	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0071a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0071d	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  00720	75 14		 jne	 SHORT $LN53@deflate

; 786  :                 s->gzindex = 0;

  00722	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00725	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 787  :                 s->status = NAME_STATE;

  0072c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0072f	c7 42 04 49 00
	00 00		 mov	 DWORD PTR [edx+4], 73	; 00000049H
$LN53@deflate:

; 788  :             }
; 789  :         }
; 790  :         else

  00736	eb 0a		 jmp	 SHORT $LN61@deflate
$LN60@deflate:

; 791  :             s->status = NAME_STATE;

  00738	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0073b	c7 40 04 49 00
	00 00		 mov	 DWORD PTR [eax+4], 73	; 00000049H
$LN61@deflate:

; 792  :     }
; 793  :     if (s->status == NAME_STATE) {

  00742	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00745	83 79 04 49	 cmp	 DWORD PTR [ecx+4], 73	; 00000049H
  00749	0f 85 43 01 00
	00		 jne	 $LN51@deflate

; 794  :         if (s->gzhead->name != Z_NULL) {

  0074f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00752	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00755	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  00759	0f 84 29 01 00
	00		 je	 $LN50@deflate

; 795  :             uInt beg = s->pending;  /* start of bytes to update crc */

  0075f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00762	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00765	89 55 e8	 mov	 DWORD PTR _beg$77908[ebp], edx
$LN49@deflate:

; 796  :             int val;
; 797  : 
; 798  :             do {
; 799  :                 if (s->pending == s->pending_buf_size) {

  00768	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0076b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0076e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00771	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00774	75 69		 jne	 SHORT $LN46@deflate

; 800  :                     if (s->gzhead->hcrc && s->pending > beg)

  00776	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00779	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0077c	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00780	74 31		 je	 SHORT $LN45@deflate
  00782	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00785	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00788	3b 45 e8	 cmp	 eax, DWORD PTR _beg$77908[ebp]
  0078b	76 26		 jbe	 SHORT $LN45@deflate

; 801  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 802  :                                             s->pending - beg);

  0078d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00790	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00793	2b 55 e8	 sub	 edx, DWORD PTR _beg$77908[ebp]
  00796	52		 push	 edx
  00797	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0079a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0079d	03 4d e8	 add	 ecx, DWORD PTR _beg$77908[ebp]
  007a0	51		 push	 ecx
  007a1	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007a4	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 _crc32@12
  007ad	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007b0	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN45@deflate:

; 803  :                     flush_pending(strm);

  007b3	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007b6	52		 push	 edx
  007b7	e8 00 00 00 00	 call	 _flush_pending
  007bc	83 c4 04	 add	 esp, 4

; 804  :                     beg = s->pending;

  007bf	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  007c2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  007c5	89 4d e8	 mov	 DWORD PTR _beg$77908[ebp], ecx

; 805  :                     if (s->pending == s->pending_buf_size) {

  007c8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007cb	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  007ce	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  007d1	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  007d4	75 09		 jne	 SHORT $LN46@deflate

; 806  :                         val = 1;

  007d6	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _val$77909[ebp], 1

; 807  :                         break;

  007dd	eb 50		 jmp	 SHORT $LN47@deflate
$LN46@deflate:

; 808  :                     }
; 809  :                 }
; 810  :                 val = s->gzhead->name[s->gzindex++];

  007df	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007e2	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  007e5	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  007e8	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007eb	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  007ee	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  007f2	89 4d e4	 mov	 DWORD PTR _val$77909[ebp], ecx
  007f5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  007f8	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  007fb	83 c0 01	 add	 eax, 1
  007fe	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00801	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 811  :                 put_byte(s, val);

  00804	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00807	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0080a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0080d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00810	8a 4d e4	 mov	 cl, BYTE PTR _val$77909[ebp]
  00813	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00816	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00819	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0081c	83 c0 01	 add	 eax, 1
  0081f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00822	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 812  :             } while (val != 0);

  00825	83 7d e4 00	 cmp	 DWORD PTR _val$77909[ebp], 0
  00829	0f 85 39 ff ff
	ff		 jne	 $LN49@deflate
$LN47@deflate:

; 813  :             if (s->gzhead->hcrc && s->pending > beg)

  0082f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00832	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00835	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00839	74 31		 je	 SHORT $LN43@deflate
  0083b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0083e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00841	3b 55 e8	 cmp	 edx, DWORD PTR _beg$77908[ebp]
  00844	76 26		 jbe	 SHORT $LN43@deflate

; 814  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 815  :                                     s->pending - beg);

  00846	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00849	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0084c	2b 4d e8	 sub	 ecx, DWORD PTR _beg$77908[ebp]
  0084f	51		 push	 ecx
  00850	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00853	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00856	03 45 e8	 add	 eax, DWORD PTR _beg$77908[ebp]
  00859	50		 push	 eax
  0085a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  0085d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00860	52		 push	 edx
  00861	e8 00 00 00 00	 call	 _crc32@12
  00866	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00869	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN43@deflate:

; 816  :             if (val == 0) {

  0086c	83 7d e4 00	 cmp	 DWORD PTR _val$77909[ebp], 0
  00870	75 14		 jne	 SHORT $LN42@deflate

; 817  :                 s->gzindex = 0;

  00872	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00875	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 818  :                 s->status = COMMENT_STATE;

  0087c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0087f	c7 40 04 5b 00
	00 00		 mov	 DWORD PTR [eax+4], 91	; 0000005bH
$LN42@deflate:

; 819  :             }
; 820  :         }
; 821  :         else

  00886	eb 0a		 jmp	 SHORT $LN51@deflate
$LN50@deflate:

; 822  :             s->status = COMMENT_STATE;

  00888	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0088b	c7 41 04 5b 00
	00 00		 mov	 DWORD PTR [ecx+4], 91	; 0000005bH
$LN51@deflate:

; 823  :     }
; 824  :     if (s->status == COMMENT_STATE) {

  00892	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00895	83 7a 04 5b	 cmp	 DWORD PTR [edx+4], 91	; 0000005bH
  00899	0f 85 39 01 00
	00		 jne	 $LN40@deflate

; 825  :         if (s->gzhead->comment != Z_NULL) {

  0089f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  008a2	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  008a5	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  008a9	0f 84 1f 01 00
	00		 je	 $LN39@deflate

; 826  :             uInt beg = s->pending;  /* start of bytes to update crc */

  008af	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008b2	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008b5	89 45 e0	 mov	 DWORD PTR _beg$77921[ebp], eax
$LN38@deflate:

; 827  :             int val;
; 828  : 
; 829  :             do {
; 830  :                 if (s->pending == s->pending_buf_size) {

  008b8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008bb	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008be	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  008c1	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  008c4	75 69		 jne	 SHORT $LN35@deflate

; 831  :                     if (s->gzhead->hcrc && s->pending > beg)

  008c6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008c9	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  008cc	83 7a 2c 00	 cmp	 DWORD PTR [edx+44], 0
  008d0	74 31		 je	 SHORT $LN34@deflate
  008d2	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  008d5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  008d8	3b 4d e0	 cmp	 ecx, DWORD PTR _beg$77921[ebp]
  008db	76 26		 jbe	 SHORT $LN34@deflate

; 832  :                         strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 833  :                                             s->pending - beg);

  008dd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  008e0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  008e3	2b 45 e0	 sub	 eax, DWORD PTR _beg$77921[ebp]
  008e6	50		 push	 eax
  008e7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  008ea	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  008ed	03 55 e0	 add	 edx, DWORD PTR _beg$77921[ebp]
  008f0	52		 push	 edx
  008f1	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  008f4	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  008f7	51		 push	 ecx
  008f8	e8 00 00 00 00	 call	 _crc32@12
  008fd	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00900	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN34@deflate:

; 834  :                     flush_pending(strm);

  00903	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00906	50		 push	 eax
  00907	e8 00 00 00 00	 call	 _flush_pending
  0090c	83 c4 04	 add	 esp, 4

; 835  :                     beg = s->pending;

  0090f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00912	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00915	89 55 e0	 mov	 DWORD PTR _beg$77921[ebp], edx

; 836  :                     if (s->pending == s->pending_buf_size) {

  00918	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0091b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0091e	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00921	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00924	75 09		 jne	 SHORT $LN35@deflate

; 837  :                         val = 1;

  00926	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _val$77922[ebp], 1

; 838  :                         break;

  0092d	eb 50		 jmp	 SHORT $LN36@deflate
$LN35@deflate:

; 839  :                     }
; 840  :                 }
; 841  :                 val = s->gzhead->comment[s->gzindex++];

  0092f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00932	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00935	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00938	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0093b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0093e	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00942	89 55 dc	 mov	 DWORD PTR _val$77922[ebp], edx
  00945	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00948	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0094b	83 c1 01	 add	 ecx, 1
  0094e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00951	89 4a 20	 mov	 DWORD PTR [edx+32], ecx

; 842  :                 put_byte(s, val);

  00954	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00957	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0095a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0095d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00960	8a 55 dc	 mov	 dl, BYTE PTR _val$77922[ebp]
  00963	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00966	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00969	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0096c	83 c1 01	 add	 ecx, 1
  0096f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00972	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 843  :             } while (val != 0);

  00975	83 7d dc 00	 cmp	 DWORD PTR _val$77922[ebp], 0
  00979	0f 85 39 ff ff
	ff		 jne	 $LN38@deflate
$LN36@deflate:

; 844  :             if (s->gzhead->hcrc && s->pending > beg)

  0097f	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00982	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00985	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00989	74 31		 je	 SHORT $LN32@deflate
  0098b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  0098e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00991	3b 45 e0	 cmp	 eax, DWORD PTR _beg$77921[ebp]
  00994	76 26		 jbe	 SHORT $LN32@deflate

; 845  :                 strm->adler = crc32(strm->adler, s->pending_buf + beg,
; 846  :                                     s->pending - beg);

  00996	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00999	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0099c	2b 55 e0	 sub	 edx, DWORD PTR _beg$77921[ebp]
  0099f	52		 push	 edx
  009a0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  009a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  009a6	03 4d e0	 add	 ecx, DWORD PTR _beg$77921[ebp]
  009a9	51		 push	 ecx
  009aa	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  009ad	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  009b0	50		 push	 eax
  009b1	e8 00 00 00 00	 call	 _crc32@12
  009b6	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  009b9	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN32@deflate:

; 847  :             if (val == 0)

  009bc	83 7d dc 00	 cmp	 DWORD PTR _val$77922[ebp], 0
  009c0	75 0a		 jne	 SHORT $LN31@deflate

; 848  :                 s->status = HCRC_STATE;

  009c2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  009c5	c7 42 04 67 00
	00 00		 mov	 DWORD PTR [edx+4], 103	; 00000067H
$LN31@deflate:

; 849  :         }
; 850  :         else

  009cc	eb 0a		 jmp	 SHORT $LN40@deflate
$LN39@deflate:

; 851  :             s->status = HCRC_STATE;

  009ce	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  009d1	c7 40 04 67 00
	00 00		 mov	 DWORD PTR [eax+4], 103	; 00000067H
$LN40@deflate:

; 852  :     }
; 853  :     if (s->status == HCRC_STATE) {

  009d8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  009db	83 79 04 67	 cmp	 DWORD PTR [ecx+4], 103	; 00000067H
  009df	0f 85 ba 00 00
	00		 jne	 $LN29@deflate

; 854  :         if (s->gzhead->hcrc) {

  009e5	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  009e8	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  009eb	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  009ef	0f 84 a0 00 00
	00		 je	 $LN28@deflate

; 855  :             if (s->pending + 2 > s->pending_buf_size)

  009f5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  009f8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  009fb	83 c2 02	 add	 edx, 2
  009fe	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a01	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00a04	76 0c		 jbe	 SHORT $LN27@deflate

; 856  :                 flush_pending(strm);

  00a06	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00a09	51		 push	 ecx
  00a0a	e8 00 00 00 00	 call	 _flush_pending
  00a0f	83 c4 04	 add	 esp, 4
$LN27@deflate:

; 857  :             if (s->pending + 2 <= s->pending_buf_size) {

  00a12	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a15	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a18	83 c0 02	 add	 eax, 2
  00a1b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a1e	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00a21	77 70		 ja	 SHORT $LN26@deflate

; 858  :                 put_byte(s, (Byte)(strm->adler & 0xff));

  00a23	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00a26	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00a29	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a2e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a31	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a34	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a37	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00a3a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00a3d	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a40	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a43	83 c0 01	 add	 eax, 1
  00a46	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a49	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 859  :                 put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00a4c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00a4f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00a52	c1 e8 08	 shr	 eax, 8
  00a55	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00a5a	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a5d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00a60	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a63	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00a66	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00a69	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00a6c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00a6f	83 c0 01	 add	 eax, 1
  00a72	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a75	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 860  :                 strm->adler = crc32(0L, Z_NULL, 0);

  00a78	6a 00		 push	 0
  00a7a	6a 00		 push	 0
  00a7c	6a 00		 push	 0
  00a7e	e8 00 00 00 00	 call	 _crc32@12
  00a83	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00a86	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 861  :                 s->status = BUSY_STATE;

  00a89	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00a8c	c7 40 04 71 00
	00 00		 mov	 DWORD PTR [eax+4], 113	; 00000071H
$LN26@deflate:

; 862  :             }
; 863  :         }
; 864  :         else

  00a93	eb 0a		 jmp	 SHORT $LN29@deflate
$LN28@deflate:

; 865  :             s->status = BUSY_STATE;

  00a95	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00a98	c7 41 04 71 00
	00 00		 mov	 DWORD PTR [ecx+4], 113	; 00000071H
$LN29@deflate:

; 866  :     }
; 867  : #endif
; 868  : 
; 869  :     /* Flush as much pending output as possible */
; 870  :     if (s->pending != 0) {

  00a9f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00aa2	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00aa6	74 28		 je	 SHORT $LN24@deflate

; 871  :         flush_pending(strm);

  00aa8	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00aab	50		 push	 eax
  00aac	e8 00 00 00 00	 call	 _flush_pending
  00ab1	83 c4 04	 add	 esp, 4

; 872  :         if (strm->avail_out == 0) {

  00ab4	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00ab7	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00abb	75 11		 jne	 SHORT $LN23@deflate

; 873  :             /* Since avail_out is 0, deflate will be called again with
; 874  :              * more output space, but possibly with both pending and
; 875  :              * avail_in equal to zero. There won't be anything to do,
; 876  :              * but this is not an error situation so make sure we
; 877  :              * return OK instead of BUF_ERROR at next call of deflate:
; 878  :              */
; 879  :             s->last_flush = -1;

  00abd	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00ac0	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 880  :             return Z_OK;

  00ac7	33 c0		 xor	 eax, eax
  00ac9	e9 fb 03 00 00	 jmp	 $LN84@deflate
$LN23@deflate:

; 881  :         }
; 882  : 
; 883  :     /* Make sure there is something to do and avoid duplicate consecutive
; 884  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 885  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 886  :      */
; 887  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00ace	eb 55		 jmp	 SHORT $LN22@deflate
$LN24@deflate:

; 888  :                flush != Z_FINISH) {

  00ad0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00ad3	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00ad7	75 4c		 jne	 SHORT $LN22@deflate
  00ad9	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00adc	d1 e1		 shl	 ecx, 1
  00ade	33 d2		 xor	 edx, edx
  00ae0	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00ae4	0f 9e c2	 setle	 dl
  00ae7	83 ea 01	 sub	 edx, 1
  00aea	83 e2 09	 and	 edx, 9
  00aed	2b ca		 sub	 ecx, edx
  00aef	8b 45 f8	 mov	 eax, DWORD PTR _old_flush$[ebp]
  00af2	d1 e0		 shl	 eax, 1
  00af4	33 d2		 xor	 edx, edx
  00af6	83 7d f8 04	 cmp	 DWORD PTR _old_flush$[ebp], 4
  00afa	0f 9e c2	 setle	 dl
  00afd	83 ea 01	 sub	 edx, 1
  00b00	83 e2 09	 and	 edx, 9
  00b03	2b c2		 sub	 eax, edx
  00b05	3b c8		 cmp	 ecx, eax
  00b07	7f 1c		 jg	 SHORT $LN22@deflate
  00b09	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00b0d	74 16		 je	 SHORT $LN22@deflate

; 889  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00b0f	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00b12	8b 0d 1c 00 00
	00		 mov	 ecx, DWORD PTR _z_errmsg+28
  00b18	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00b1b	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00b20	e9 a4 03 00 00	 jmp	 $LN84@deflate
$LN22@deflate:

; 890  :     }
; 891  : 
; 892  :     /* User must not provide more input after the first FINISH: */
; 893  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  00b25	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00b28	81 7a 04 9a 02
	00 00		 cmp	 DWORD PTR [edx+4], 666	; 0000029aH
  00b2f	75 1f		 jne	 SHORT $LN20@deflate
  00b31	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00b34	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00b38	74 16		 je	 SHORT $LN20@deflate

; 894  :         ERR_RETURN(strm, Z_BUF_ERROR);

  00b3a	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00b3d	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR _z_errmsg+28
  00b43	89 51 18	 mov	 DWORD PTR [ecx+24], edx
  00b46	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00b4b	e9 79 03 00 00	 jmp	 $LN84@deflate
$LN20@deflate:

; 895  :     }
; 896  : 
; 897  :     /* Start a new block or continue the current one.
; 898  :      */
; 899  :     if (strm->avail_in != 0 || s->lookahead != 0 ||
; 900  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {

  00b50	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00b53	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00b57	75 23		 jne	 SHORT $LN18@deflate
  00b59	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00b5c	83 79 74 00	 cmp	 DWORD PTR [ecx+116], 0
  00b60	75 1a		 jne	 SHORT $LN18@deflate
  00b62	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00b66	0f 84 77 01 00
	00		 je	 $LN19@deflate
  00b6c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00b6f	81 7a 04 9a 02
	00 00		 cmp	 DWORD PTR [edx+4], 666	; 0000029aH
  00b76	0f 84 67 01 00
	00		 je	 $LN19@deflate
$LN18@deflate:

; 901  :         block_state bstate;
; 902  : 
; 903  :         bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 904  :                     (s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 905  :                         (*(configuration_table[s->level].func))(s, flush));

  00b7c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00b7f	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [eax+136], 2
  00b86	75 15		 jne	 SHORT $LN96@deflate
  00b88	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00b8b	51		 push	 ecx
  00b8c	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00b8f	52		 push	 edx
  00b90	e8 00 00 00 00	 call	 _deflate_huff
  00b95	83 c4 08	 add	 esp, 8
  00b98	89 45 c4	 mov	 DWORD PTR tv660[ebp], eax
  00b9b	eb 49		 jmp	 SHORT $LN97@deflate
$LN96@deflate:
  00b9d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00ba0	83 b8 88 00 00
	00 03		 cmp	 DWORD PTR [eax+136], 3
  00ba7	75 15		 jne	 SHORT $LN94@deflate
  00ba9	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00bac	51		 push	 ecx
  00bad	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00bb0	52		 push	 edx
  00bb1	e8 00 00 00 00	 call	 _deflate_rle
  00bb6	83 c4 08	 add	 esp, 8
  00bb9	89 45 c0	 mov	 DWORD PTR tv659[ebp], eax
  00bbc	eb 22		 jmp	 SHORT $LN95@deflate
$LN94@deflate:
  00bbe	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  00bc1	50		 push	 eax
  00bc2	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00bc5	51		 push	 ecx
  00bc6	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00bc9	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00bcf	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00bd2	8b 88 08 00 00
	00		 mov	 ecx, DWORD PTR _configuration_table[eax+8]
  00bd8	ff d1		 call	 ecx
  00bda	83 c4 08	 add	 esp, 8
  00bdd	89 45 c0	 mov	 DWORD PTR tv659[ebp], eax
$LN95@deflate:
  00be0	8b 55 c0	 mov	 edx, DWORD PTR tv659[ebp]
  00be3	89 55 c4	 mov	 DWORD PTR tv660[ebp], edx
$LN97@deflate:
  00be6	8b 45 c4	 mov	 eax, DWORD PTR tv660[ebp]
  00be9	89 45 d8	 mov	 DWORD PTR _bstate$77946[ebp], eax

; 906  : 
; 907  :         if (bstate == finish_started || bstate == finish_done) {

  00bec	83 7d d8 02	 cmp	 DWORD PTR _bstate$77946[ebp], 2
  00bf0	74 06		 je	 SHORT $LN16@deflate
  00bf2	83 7d d8 03	 cmp	 DWORD PTR _bstate$77946[ebp], 3
  00bf6	75 0a		 jne	 SHORT $LN17@deflate
$LN16@deflate:

; 908  :             s->status = FINISH_STATE;

  00bf8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00bfb	c7 41 04 9a 02
	00 00		 mov	 DWORD PTR [ecx+4], 666	; 0000029aH
$LN17@deflate:

; 909  :         }
; 910  :         if (bstate == need_more || bstate == finish_started) {

  00c02	83 7d d8 00	 cmp	 DWORD PTR _bstate$77946[ebp], 0
  00c06	74 06		 je	 SHORT $LN14@deflate
  00c08	83 7d d8 02	 cmp	 DWORD PTR _bstate$77946[ebp], 2
  00c0c	75 1a		 jne	 SHORT $LN15@deflate
$LN14@deflate:

; 911  :             if (strm->avail_out == 0) {

  00c0e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00c11	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00c15	75 0a		 jne	 SHORT $LN13@deflate

; 912  :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  00c17	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c1a	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [eax+40], -1
$LN13@deflate:

; 913  :             }
; 914  :             return Z_OK;

  00c21	33 c0		 xor	 eax, eax
  00c23	e9 a1 02 00 00	 jmp	 $LN84@deflate
$LN15@deflate:

; 915  :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 916  :              * of deflate should use the same flush parameter to make sure
; 917  :              * that the flush is complete. So we don't have to output an
; 918  :              * empty block here, this will be done at next call. This also
; 919  :              * ensures that for a very small output buffer, we emit at most
; 920  :              * one empty block.
; 921  :              */
; 922  :         }
; 923  :         if (bstate == block_done) {

  00c28	83 7d d8 01	 cmp	 DWORD PTR _bstate$77946[ebp], 1
  00c2c	0f 85 b1 00 00
	00		 jne	 $LN19@deflate

; 924  :             if (flush == Z_PARTIAL_FLUSH) {

  00c32	83 7d 0c 01	 cmp	 DWORD PTR _flush$[ebp], 1
  00c36	75 0e		 jne	 SHORT $LN11@deflate

; 925  :                 _tr_align(s);

  00c38	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00c3b	51		 push	 ecx
  00c3c	e8 00 00 00 00	 call	 __tr_align
  00c41	83 c4 04	 add	 esp, 4
  00c44	eb 77		 jmp	 SHORT $LN10@deflate
$LN11@deflate:

; 926  :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00c46	83 7d 0c 05	 cmp	 DWORD PTR _flush$[ebp], 5
  00c4a	74 71		 je	 SHORT $LN10@deflate

; 927  :                 _tr_stored_block(s, (char*)0, 0L, 0);

  00c4c	6a 00		 push	 0
  00c4e	6a 00		 push	 0
  00c50	6a 00		 push	 0
  00c52	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c55	52		 push	 edx
  00c56	e8 00 00 00 00	 call	 __tr_stored_block
  00c5b	83 c4 10	 add	 esp, 16			; 00000010H

; 928  :                 /* For a full flush, this empty block will be recognized
; 929  :                  * as a special marker by inflate_sync().
; 930  :                  */
; 931  :                 if (flush == Z_FULL_FLUSH) {

  00c5e	83 7d 0c 03	 cmp	 DWORD PTR _flush$[ebp], 3
  00c62	75 59		 jne	 SHORT $LN10@deflate

; 932  :                     CLEAR_HASH(s);             /* forget history */

  00c64	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c67	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00c6a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c6d	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
  00c70	33 d2		 xor	 edx, edx
  00c72	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00c77	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c7a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00c7d	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  00c81	52		 push	 edx
  00c82	6a 00		 push	 0
  00c84	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c87	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00c8a	51		 push	 ecx
  00c8b	e8 00 00 00 00	 call	 _memset
  00c90	83 c4 0c	 add	 esp, 12			; 0000000cH

; 933  :                     if (s->lookahead == 0) {

  00c93	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00c96	83 7a 74 00	 cmp	 DWORD PTR [edx+116], 0
  00c9a	75 21		 jne	 SHORT $LN10@deflate

; 934  :                         s->strstart = 0;

  00c9c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00c9f	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [eax+108], 0

; 935  :                         s->block_start = 0L;

  00ca6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00ca9	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0

; 936  :                         s->insert = 0;

  00cb0	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00cb3	c7 82 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5812], 0
$LN10@deflate:

; 937  :                     }
; 938  :                 }
; 939  :             }
; 940  :             flush_pending(strm);

  00cbd	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00cc0	50		 push	 eax
  00cc1	e8 00 00 00 00	 call	 _flush_pending
  00cc6	83 c4 04	 add	 esp, 4

; 941  :             if (strm->avail_out == 0) {

  00cc9	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00ccc	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00cd0	75 11		 jne	 SHORT $LN19@deflate

; 942  :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */

  00cd2	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00cd5	c7 42 28 ff ff
	ff ff		 mov	 DWORD PTR [edx+40], -1

; 943  :               return Z_OK;

  00cdc	33 c0		 xor	 eax, eax
  00cde	e9 e6 01 00 00	 jmp	 $LN84@deflate
$LN19@deflate:

; 944  :             }
; 945  :         }
; 946  :     }
; 947  :     Assert(strm->avail_out > 0, "bug2");
; 948  : 
; 949  :     if (flush != Z_FINISH) return Z_OK;

  00ce3	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00ce7	74 07		 je	 SHORT $LN5@deflate
  00ce9	33 c0		 xor	 eax, eax
  00ceb	e9 d9 01 00 00	 jmp	 $LN84@deflate
$LN5@deflate:

; 950  :     if (s->wrap <= 0) return Z_STREAM_END;

  00cf0	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00cf3	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00cf7	7f 0a		 jg	 SHORT $LN4@deflate
  00cf9	b8 01 00 00 00	 mov	 eax, 1
  00cfe	e9 c6 01 00 00	 jmp	 $LN84@deflate
$LN4@deflate:

; 951  : 
; 952  :     /* Write the trailer */
; 953  : #ifdef GZIP
; 954  :     if (s->wrap == 2) {

  00d03	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d06	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00d0a	0f 85 5c 01 00
	00		 jne	 $LN3@deflate

; 955  :         put_byte(s, (Byte)(strm->adler & 0xff));

  00d10	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00d13	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00d16	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d1b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d1e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00d21	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d24	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00d27	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00d2a	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00d2d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00d30	83 c0 01	 add	 eax, 1
  00d33	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d36	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 956  :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00d39	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00d3c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00d3f	c1 e8 08	 shr	 eax, 8
  00d42	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d47	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d4a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00d4d	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d50	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00d53	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00d56	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00d59	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00d5c	83 c0 01	 add	 eax, 1
  00d5f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d62	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 957  :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00d65	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00d68	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00d6b	c1 e8 10	 shr	 eax, 16			; 00000010H
  00d6e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d73	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d76	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00d79	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d7c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00d7f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00d82	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00d85	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00d88	83 c0 01	 add	 eax, 1
  00d8b	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00d8e	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 958  :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00d91	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00d94	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00d97	c1 e8 18	 shr	 eax, 24			; 00000018H
  00d9a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00d9f	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00da2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00da5	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00da8	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00dab	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00dae	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00db1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00db4	83 c0 01	 add	 eax, 1
  00db7	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00dba	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 959  :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00dbd	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00dc0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00dc3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00dc8	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00dcb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00dce	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00dd1	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00dd4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00dd7	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00dda	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00ddd	83 c0 01	 add	 eax, 1
  00de0	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00de3	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 960  :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00de6	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00de9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00dec	c1 e8 08	 shr	 eax, 8
  00def	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00df4	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00df7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00dfa	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00dfd	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00e00	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00e03	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e06	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00e09	83 c0 01	 add	 eax, 1
  00e0c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e0f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 961  :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00e12	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e15	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e18	c1 e8 10	 shr	 eax, 16			; 00000010H
  00e1b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e20	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e23	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00e26	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e29	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00e2c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00e2f	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e32	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00e35	83 c0 01	 add	 eax, 1
  00e38	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e3b	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 962  :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00e3e	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e41	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00e44	c1 e8 18	 shr	 eax, 24			; 00000018H
  00e47	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00e4c	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e4f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00e52	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e55	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00e58	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00e5b	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00e5e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00e61	83 c0 01	 add	 eax, 1
  00e64	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e67	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 963  :     }
; 964  :     else

  00e6a	eb 2e		 jmp	 SHORT $LN2@deflate
$LN3@deflate:

; 965  : #endif
; 966  :     {
; 967  :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00e6c	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e6f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00e72	c1 e8 10	 shr	 eax, 16			; 00000010H
  00e75	50		 push	 eax
  00e76	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e79	51		 push	 ecx
  00e7a	e8 00 00 00 00	 call	 _putShortMSB
  00e7f	83 c4 08	 add	 esp, 8

; 968  :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00e82	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e85	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00e88	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00e8d	50		 push	 eax
  00e8e	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00e91	51		 push	 ecx
  00e92	e8 00 00 00 00	 call	 _putShortMSB
  00e97	83 c4 08	 add	 esp, 8
$LN2@deflate:

; 969  :     }
; 970  :     flush_pending(strm);

  00e9a	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  00e9d	52		 push	 edx
  00e9e	e8 00 00 00 00	 call	 _flush_pending
  00ea3	83 c4 04	 add	 esp, 4

; 971  :     /* If avail_out is zero, the application will call deflate again
; 972  :      * to flush the rest.
; 973  :      */
; 974  :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00ea6	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00ea9	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00ead	7e 0e		 jle	 SHORT $LN1@deflate
  00eaf	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00eb2	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00eb5	f7 da		 neg	 edx
  00eb7	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00eba	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN1@deflate:

; 975  :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00ebd	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00ec0	33 c0		 xor	 eax, eax
  00ec2	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00ec6	0f 94 c0	 sete	 al
$LN84@deflate:

; 976  : }

  00ec9	5e		 pop	 esi
  00eca	8b e5		 mov	 esp, ebp
  00ecc	5d		 pop	 ebp
  00ecd	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
PUBLIC	_deflateParams@12
; Function compile flags: /Odtp
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_func$ = -12						; size = 4
_err$ = -8						; size = 4
_s$ = -4						; size = 4
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 495  :     deflate_state *s;
; 496  :     compress_func func;
; 497  :     int err = Z_OK;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0

; 498  : 
; 499  :     if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

  0000d	83 7d 08 00	 cmp	 DWORD PTR _strm$[ebp], 0
  00011	74 09		 je	 SHORT $LN8@deflatePar
  00013	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00016	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  0001a	75 0a		 jne	 SHORT $LN9@deflatePar
$LN8@deflatePar:
  0001c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00021	e9 17 01 00 00	 jmp	 $LN10@deflatePar
$LN9@deflatePar:

; 500  :     s = strm->state;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00029	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0002c	89 55 fc	 mov	 DWORD PTR _s$[ebp], edx

; 501  : 
; 502  : #ifdef FASTEST
; 503  :     if (level != 0) level = 1;
; 504  : #else
; 505  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;

  0002f	83 7d 0c ff	 cmp	 DWORD PTR _level$[ebp], -1
  00033	75 07		 jne	 SHORT $LN7@deflatePar
  00035	c7 45 0c 06 00
	00 00		 mov	 DWORD PTR _level$[ebp], 6
$LN7@deflatePar:

; 506  : #endif
; 507  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0003c	83 7d 0c 00	 cmp	 DWORD PTR _level$[ebp], 0
  00040	7c 12		 jl	 SHORT $LN5@deflatePar
  00042	83 7d 0c 09	 cmp	 DWORD PTR _level$[ebp], 9
  00046	7f 0c		 jg	 SHORT $LN5@deflatePar
  00048	83 7d 10 00	 cmp	 DWORD PTR _strategy$[ebp], 0
  0004c	7c 06		 jl	 SHORT $LN5@deflatePar
  0004e	83 7d 10 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  00052	7e 0a		 jle	 SHORT $LN6@deflatePar
$LN5@deflatePar:

; 508  :         return Z_STREAM_ERROR;

  00054	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00059	e9 df 00 00 00	 jmp	 $LN10@deflatePar
$LN6@deflatePar:

; 509  :     }
; 510  :     func = configuration_table[s->level].func;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00061	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  00067	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0006a	8b 91 08 00 00
	00		 mov	 edx, DWORD PTR _configuration_table[ecx+8]
  00070	89 55 f4	 mov	 DWORD PTR _func$[ebp], edx

; 511  : 
; 512  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&
; 513  :         strm->total_in != 0) {

  00073	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00076	8b 4d 10	 mov	 ecx, DWORD PTR _strategy$[ebp]
  00079	3b 88 88 00 00
	00		 cmp	 ecx, DWORD PTR [eax+136]
  0007f	75 11		 jne	 SHORT $LN3@deflatePar
  00081	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00084	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00087	8b 45 f4	 mov	 eax, DWORD PTR _func$[ebp]
  0008a	3b 82 08 00 00
	00		 cmp	 eax, DWORD PTR _configuration_table[edx+8]
  00090	74 2d		 je	 SHORT $LN4@deflatePar
$LN3@deflatePar:
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00095	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00099	74 24		 je	 SHORT $LN4@deflatePar

; 514  :         /* Flush the last buffer: */
; 515  :         err = deflate(strm, Z_BLOCK);

  0009b	6a 05		 push	 5
  0009d	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 _deflate@8
  000a6	89 45 f8	 mov	 DWORD PTR _err$[ebp], eax

; 516  :         if (err == Z_BUF_ERROR && s->pending == 0)

  000a9	83 7d f8 fb	 cmp	 DWORD PTR _err$[ebp], -5 ; fffffffbH
  000ad	75 10		 jne	 SHORT $LN4@deflatePar
  000af	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000b2	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000b6	75 07		 jne	 SHORT $LN4@deflatePar

; 517  :             err = Z_OK;

  000b8	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _err$[ebp], 0
$LN4@deflatePar:

; 518  :     }
; 519  :     if (s->level != level) {

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000c2	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  000c8	3b 55 0c	 cmp	 edx, DWORD PTR _level$[ebp]
  000cb	74 61		 je	 SHORT $LN1@deflatePar

; 520  :         s->level = level;

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  000d0	8b 4d 0c	 mov	 ecx, DWORD PTR _level$[ebp]
  000d3	89 88 84 00 00
	00		 mov	 DWORD PTR [eax+132], ecx

; 521  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000d9	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  000dc	6b d2 0c	 imul	 edx, 12			; 0000000cH
  000df	0f b7 82 02 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+2]
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000e9	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 522  :         s->good_match       = configuration_table[level].good_length;

  000ef	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  000f2	6b d2 0c	 imul	 edx, 12			; 0000000cH
  000f5	0f b7 82 00 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx]
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  000ff	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 523  :         s->nice_match       = configuration_table[level].nice_length;

  00105	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00108	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0010b	0f b7 82 04 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+4]
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  00115	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 524  :         s->max_chain_length = configuration_table[level].max_chain;

  0011b	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  0011e	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00121	0f b7 82 06 00
	00 00		 movzx	 eax, WORD PTR _configuration_table[edx+6]
  00128	8b 4d fc	 mov	 ecx, DWORD PTR _s$[ebp]
  0012b	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
$LN1@deflatePar:

; 525  :     }
; 526  :     s->strategy = strategy;

  0012e	8b 55 fc	 mov	 edx, DWORD PTR _s$[ebp]
  00131	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00134	89 82 88 00 00
	00		 mov	 DWORD PTR [edx+136], eax

; 527  :     return err;

  0013a	8b 45 f8	 mov	 eax, DWORD PTR _err$[ebp]
$LN10@deflatePar:

; 528  : }

  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
END
