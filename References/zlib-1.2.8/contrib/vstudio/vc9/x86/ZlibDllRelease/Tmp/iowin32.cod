; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	e:\WORK\test\zlib-1.2.8\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Odtp
; File e:\work\test\zlib-1.2.8\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 405  :     int ret=-1;

  00004	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 406  :     if (stream!=NULL)

  0000b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0000f	74 09		 je	 SHORT $LN1@win32_erro

; 407  :     {
; 408  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00014	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00017	89 4d fc	 mov	 DWORD PTR _ret$[ebp], ecx
$LN1@win32_erro:

; 409  :     }
; 410  :     return ret;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 411  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_hFile$79506 = -8					; size = 4
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 387  :     int ret=-1;

  00006	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 388  : 
; 389  :     if (stream!=NULL)

  0000d	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00011	74 2b		 je	 SHORT $LN2@win32_clos

; 390  :     {
; 391  :         HANDLE hFile;
; 392  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	89 4d f8	 mov	 DWORD PTR _hFile$79506[ebp], ecx

; 393  :         if (hFile != NULL)

  0001b	83 7d f8 00	 cmp	 DWORD PTR _hFile$79506[ebp], 0
  0001f	74 11		 je	 SHORT $LN1@win32_clos

; 394  :         {
; 395  :             CloseHandle(hFile);

  00021	8b 55 f8	 mov	 edx, DWORD PTR _hFile$79506[ebp]
  00024	52		 push	 edx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 396  :             ret=0;

  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN1@win32_clos:

; 397  :         }
; 398  :         free(stream);

  00032	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN2@win32_clos:

; 399  :     }
; 400  :     return ret;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 401  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_win32_close_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _MySetFilePointerEx
_TEXT	SEGMENT
_dwNewPos$ = -12					; size = 4
_lHigh$ = -8						; size = 4
_fOk$ = -4						; size = 4
_hFile$ = 8						; size = 4
_pos$ = 12						; size = 8
_newPos$ = 20						; size = 4
_dwMoveMethod$ = 24					; size = 4
_MySetFilePointerEx PROC				; COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 242  : #ifdef IOWIN32_USING_WINRT_API
; 243  :     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
; 244  : #else
; 245  :     LONG lHigh = pos.HighPart;

  00006	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp+4]
  00009	89 45 f8	 mov	 DWORD PTR _lHigh$[ebp], eax

; 246  :     DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, FILE_CURRENT);

  0000c	6a 01		 push	 1
  0000e	8d 4d f8	 lea	 ecx, DWORD PTR _lHigh$[ebp]
  00011	51		 push	 ecx
  00012	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
  00015	52		 push	 edx
  00016	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00020	89 45 f4	 mov	 DWORD PTR _dwNewPos$[ebp], eax

; 247  :     BOOL fOk = TRUE;

  00023	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 1

; 248  :     if (dwNewPos == 0xFFFFFFFF)

  0002a	83 7d f4 ff	 cmp	 DWORD PTR _dwNewPos$[ebp], -1
  0002e	75 11		 jne	 SHORT $LN3@MySetFileP

; 249  :         if (GetLastError() != NO_ERROR)

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00036	85 c0		 test	 eax, eax
  00038	74 07		 je	 SHORT $LN3@MySetFileP

; 250  :             fOk = FALSE;

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fOk$[ebp], 0
$LN3@MySetFileP:

; 251  :     if ((newPos != NULL) && (fOk))

  00041	83 7d 14 00	 cmp	 DWORD PTR _newPos$[ebp], 0
  00045	74 17		 je	 SHORT $LN1@MySetFileP
  00047	83 7d fc 00	 cmp	 DWORD PTR _fOk$[ebp], 0
  0004b	74 11		 je	 SHORT $LN1@MySetFileP

; 252  :     {
; 253  :         newPos->LowPart = dwNewPos;

  0004d	8b 4d 14	 mov	 ecx, DWORD PTR _newPos$[ebp]
  00050	8b 55 f4	 mov	 edx, DWORD PTR _dwNewPos$[ebp]
  00053	89 11		 mov	 DWORD PTR [ecx], edx

; 254  :         newPos->HighPart = lHigh;

  00055	8b 45 14	 mov	 eax, DWORD PTR _newPos$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _lHigh$[ebp]
  0005b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@MySetFileP:

; 255  :     }
; 256  :     return fOk;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _fOk$[ebp]

; 257  : #endif
; 258  : }

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_MySetFilePointerEx ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_dwErr$79370 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 221  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 222  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 223  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_writ

; 224  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_writ:

; 225  : 
; 226  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_writ

; 227  :     {
; 228  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_writ

; 229  :         {
; 230  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79370[ebp], eax

; 231  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79370[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_writ

; 232  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79370[ebp], 0
$LN1@win32_writ:

; 233  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79370[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_writ:

; 234  :         }
; 235  :     }
; 236  : 
; 237  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 238  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_dwErr$79347 = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 199  :     uLong ret=0;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 200  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 201  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_read

; 202  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_read:

; 203  : 
; 204  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 3b		 je	 SHORT $LN3@win32_read

; 205  :     {
; 206  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00028	6a 00		 push	 0
  0002a	8d 55 f8	 lea	 edx, DWORD PTR _ret$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 14	 mov	 eax, DWORD PTR _size$[ebp]
  00031	50		 push	 eax
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _buf$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00040	85 c0		 test	 eax, eax
  00042	75 1f		 jne	 SHORT $LN3@win32_read

; 207  :         {
; 208  :             DWORD dwErr = GetLastError();

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0004a	89 45 f4	 mov	 DWORD PTR _dwErr$79347[ebp], eax

; 209  :             if (dwErr == ERROR_HANDLE_EOF)

  0004d	83 7d f4 26	 cmp	 DWORD PTR _dwErr$79347[ebp], 38 ; 00000026H
  00051	75 07		 jne	 SHORT $LN1@win32_read

; 210  :                 dwErr = 0;

  00053	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwErr$79347[ebp], 0
$LN1@win32_read:

; 211  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _dwErr$79347[ebp]
  00060	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN3@win32_read:

; 212  :         }
; 213  :     }
; 214  : 
; 215  :     return ret;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 216  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_win32_read_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_w32fiow$79239 = -12					; size = 8
_ret$ = -4						; size = 4
_hFile$ = 8						; size = 4
_win32_build_iowin PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 78   :     voidpf ret=NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 79   : 
; 80   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  0000d	83 7d 08 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00011	74 40		 je	 SHORT $LN3@win32_buil
  00013	83 7d 08 ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00017	74 3a		 je	 SHORT $LN3@win32_buil

; 81   :     {
; 82   :         WIN32FILE_IOWIN w32fiow;
; 83   :         w32fiow.hf = hFile;

  00019	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  0001c	89 45 f4	 mov	 DWORD PTR _w32fiow$79239[ebp], eax

; 84   :         w32fiow.error = 0;

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _w32fiow$79239[ebp+4], 0

; 85   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00026	6a 08		 push	 8
  00028	e8 00 00 00 00	 call	 _malloc
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 86   : 
; 87   :         if (ret==NULL)

  00033	83 7d fc 00	 cmp	 DWORD PTR _ret$[ebp], 0
  00037	75 0c		 jne	 SHORT $LN2@win32_buil

; 88   :             CloseHandle(hFile);

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _hFile$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 89   :         else

  00043	eb 0e		 jmp	 SHORT $LN3@win32_buil
$LN2@win32_buil:

; 90   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  00045	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp]
  00048	8b 45 f4	 mov	 eax, DWORD PTR _w32fiow$79239[ebp]
  0004b	89 02		 mov	 DWORD PTR [edx], eax
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _w32fiow$79239[ebp+4]
  00050	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@win32_buil:

; 91   :     }
; 92   :     return ret;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 93   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_win32_build_iowin ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_mode$ = 8						; size = 4
_lpdwDesiredAccess$ = 12				; size = 4
_lpdwCreationDisposition$ = 16				; size = 4
_lpdwShareMode$ = 20					; size = 4
_lpdwFlagsAndAttributes$ = 24				; size = 4
_win32_translate_open_mode PROC				; COMDAT

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00003	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _lpdwFlagsAndAttributes$[ebp]
  0000f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00015	8b 55 14	 mov	 edx, DWORD PTR _lpdwShareMode$[ebp]
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 57   : 
; 58   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002a	83 e1 03	 and	 ecx, 3
  0002d	83 f9 01	 cmp	 ecx, 1
  00030	75 1d		 jne	 SHORT $LN5@win32_tran

; 59   :     {
; 60   :         *lpdwDesiredAccess = GENERIC_READ;

  00032	8b 55 0c	 mov	 edx, DWORD PTR _lpdwDesiredAccess$[ebp]
  00035	c7 02 00 00 00
	80		 mov	 DWORD PTR [edx], -2147483648 ; 80000000H

; 61   :         *lpdwCreationDisposition = OPEN_EXISTING;

  0003b	8b 45 10	 mov	 eax, DWORD PTR _lpdwCreationDisposition$[ebp]
  0003e	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 62   :         *lpdwShareMode = FILE_SHARE_READ;

  00044	8b 4d 14	 mov	 ecx, DWORD PTR _lpdwShareMode$[ebp]
  00047	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1
  0004d	eb 36		 jmp	 SHORT $LN6@win32_tran
$LN5@win32_tran:

; 63   :     }
; 64   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0004f	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  00052	83 e2 04	 and	 edx, 4
  00055	74 14		 je	 SHORT $LN3@win32_tran

; 65   :     {
; 66   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  0005a	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 67   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00060	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  00063	c7 01 03 00 00
	00		 mov	 DWORD PTR [ecx], 3
  00069	eb 1a		 jmp	 SHORT $LN6@win32_tran
$LN3@win32_tran:

; 68   :     }
; 69   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  0006b	8b 55 08	 mov	 edx, DWORD PTR _mode$[ebp]
  0006e	83 e2 08	 and	 edx, 8
  00071	74 12		 je	 SHORT $LN6@win32_tran

; 70   :     {
; 71   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00073	8b 45 0c	 mov	 eax, DWORD PTR _lpdwDesiredAccess$[ebp]
  00076	c7 00 00 00 00
	c0		 mov	 DWORD PTR [eax], -1073741824 ; c0000000H

; 72   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _lpdwCreationDisposition$[ebp]
  0007f	c7 01 02 00 00
	00		 mov	 DWORD PTR [ecx], 2
$LN6@win32_tran:

; 73   :     }
; 74   : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_win32_translate_open_mode ENDP
PUBLIC	_win32_seek64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
tv65 = -32						; size = 4
_dwErr$79494 = -28					; size = 4
_pos$79491 = -24					; size = 8
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 348  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 349  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 350  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 351  : 
; 352  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek

; 353  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek:

; 354  : 
; 355  :     switch (origin)

  00029	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e0	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e0 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek
  00035	83 7d e0 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek
  0003b	83 7d e0 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 356  :     {
; 357  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 358  :             dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 359  :             break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 360  :         case ZLIB_FILEFUNC_SEEK_END :
; 361  :             dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 362  :             break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 363  :         case ZLIB_FILEFUNC_SEEK_SET :
; 364  :             dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 365  :             break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 366  :         default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 53		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 367  :     }
; 368  : 
; 369  :     if (hFile)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 4a		 je	 SHORT $LN3@win32_seek

; 370  :     {
; 371  :         LARGE_INTEGER pos;
; 372  :         pos.QuadPart = offset;

  00069	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR _pos$79491[ebp], eax
  0006f	8b 4d 14	 mov	 ecx, DWORD PTR _offset$[ebp+4]
  00072	89 4d ec	 mov	 DWORD PTR _pos$79491[ebp+4], ecx

; 373  :         if (!MySetFilePointerEx(hFile, pos, NULL, FILE_CURRENT))

  00075	6a 01		 push	 1
  00077	6a 00		 push	 0
  00079	8b 55 ec	 mov	 edx, DWORD PTR _pos$79491[ebp+4]
  0007c	52		 push	 edx
  0007d	8b 45 e8	 mov	 eax, DWORD PTR _pos$79491[ebp]
  00080	50		 push	 eax
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0008a	83 c4 14	 add	 esp, 20			; 00000014H
  0008d	85 c0		 test	 eax, eax
  0008f	75 1b		 jne	 SHORT $LN2@win32_seek

; 374  :         {
; 375  :             DWORD dwErr = GetLastError();

  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00097	89 45 e4	 mov	 DWORD PTR _dwErr$79494[ebp], eax

; 376  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0009a	8b 55 0c	 mov	 edx, DWORD PTR _stream$[ebp]
  0009d	8b 45 e4	 mov	 eax, DWORD PTR _dwErr$79494[ebp]
  000a0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 377  :             ret = -1;

  000a3	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 378  :         }
; 379  :         else

  000aa	eb 07		 jmp	 SHORT $LN3@win32_seek
$LN2@win32_seek:

; 380  :             ret=0;

  000ac	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek:

; 381  :     }
; 382  :     return ret;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek:

; 383  : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
tv65 = -32						; size = 4
_dwErr$79462 = -28					; size = 4
_pos$79459 = -24					; size = 8
_dwMoveMethod$ = -12					; size = 4
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 310  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00006	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _dwMoveMethod$[ebp], -1

; 311  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 312  : 
; 313  :     long ret=-1;

  00014	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 314  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN10@win32_seek@2

; 315  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN10@win32_seek@2:

; 316  :     switch (origin)

  00029	8b 55 14	 mov	 edx, DWORD PTR _origin$[ebp]
  0002c	89 55 e0	 mov	 DWORD PTR tv65[ebp], edx
  0002f	83 7d e0 00	 cmp	 DWORD PTR tv65[ebp], 0
  00033	74 20		 je	 SHORT $LN5@win32_seek@2
  00035	83 7d e0 01	 cmp	 DWORD PTR tv65[ebp], 1
  00039	74 08		 je	 SHORT $LN7@win32_seek@2
  0003b	83 7d e0 02	 cmp	 DWORD PTR tv65[ebp], 2
  0003f	74 0b		 je	 SHORT $LN6@win32_seek@2
  00041	eb 1b		 jmp	 SHORT $LN4@win32_seek@2
$LN7@win32_seek@2:

; 317  :     {
; 318  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 319  :         dwMoveMethod = FILE_CURRENT;

  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 1

; 320  :         break;

  0004a	eb 17		 jmp	 SHORT $LN8@win32_seek@2
$LN6@win32_seek@2:

; 321  :     case ZLIB_FILEFUNC_SEEK_END :
; 322  :         dwMoveMethod = FILE_END;

  0004c	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 2

; 323  :         break;

  00053	eb 0e		 jmp	 SHORT $LN8@win32_seek@2
$LN5@win32_seek@2:

; 324  :     case ZLIB_FILEFUNC_SEEK_SET :
; 325  :         dwMoveMethod = FILE_BEGIN;

  00055	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwMoveMethod$[ebp], 0

; 326  :         break;

  0005c	eb 05		 jmp	 SHORT $LN8@win32_seek@2
$LN4@win32_seek@2:

; 327  :     default: return -1;

  0005e	83 c8 ff	 or	 eax, -1
  00061	eb 54		 jmp	 SHORT $LN11@win32_seek@2
$LN8@win32_seek@2:

; 328  :     }
; 329  : 
; 330  :     if (hFile != NULL)

  00063	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00067	74 4b		 je	 SHORT $LN3@win32_seek@2

; 331  :     {
; 332  :         LARGE_INTEGER pos;
; 333  :         pos.QuadPart = offset;

  00069	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0006c	33 c9		 xor	 ecx, ecx
  0006e	89 45 e8	 mov	 DWORD PTR _pos$79459[ebp], eax
  00071	89 4d ec	 mov	 DWORD PTR _pos$79459[ebp+4], ecx

; 334  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  00074	8b 55 f4	 mov	 edx, DWORD PTR _dwMoveMethod$[ebp]
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _pos$79459[ebp+4]
  0007d	50		 push	 eax
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR _pos$79459[ebp]
  00081	51		 push	 ecx
  00082	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0008b	83 c4 14	 add	 esp, 20			; 00000014H
  0008e	85 c0		 test	 eax, eax
  00090	75 1b		 jne	 SHORT $LN2@win32_seek@2

; 335  :         {
; 336  :             DWORD dwErr = GetLastError();

  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00098	89 45 e4	 mov	 DWORD PTR _dwErr$79462[ebp], eax

; 337  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0009e	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$79462[ebp]
  000a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 338  :             ret = -1;

  000a4	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 339  :         }
; 340  :         else

  000ab	eb 07		 jmp	 SHORT $LN3@win32_seek@2
$LN2@win32_seek@2:

; 341  :             ret=0;

  000ad	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
$LN3@win32_seek@2:

; 342  :     }
; 343  :     return ret;

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN11@win32_seek@2:

; 344  : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_dwErr$79427 = -28					; size = 4
_pos$79425 = -24					; size = 8
_ret$ = -16						; size = 8
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 285  :     ZPOS64_T ret= (ZPOS64_T)-1;

  00006	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  0000d	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 286  :     HANDLE hFile = NULL;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 287  :     if (stream!=NULL)

  0001b	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  0001f	74 08		 je	 SHORT $LN4@win32_tell

; 288  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell:

; 289  : 
; 290  :     if (hFile)

  00029	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  0002d	74 5a		 je	 SHORT $LN3@win32_tell

; 291  :     {
; 292  :         LARGE_INTEGER pos;
; 293  :         pos.QuadPart = 0;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pos$79425[ebp], 0
  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pos$79425[ebp+4], 0

; 294  : 
; 295  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  0003d	6a 01		 push	 1
  0003f	8d 55 e8	 lea	 edx, DWORD PTR _pos$79425[ebp]
  00042	52		 push	 edx
  00043	8b 45 ec	 mov	 eax, DWORD PTR _pos$79425[ebp+4]
  00046	50		 push	 eax
  00047	8b 4d e8	 mov	 ecx, DWORD PTR _pos$79425[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  0004e	52		 push	 edx
  0004f	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00054	83 c4 14	 add	 esp, 20			; 00000014H
  00057	85 c0		 test	 eax, eax
  00059	75 22		 jne	 SHORT $LN2@win32_tell

; 296  :         {
; 297  :             DWORD dwErr = GetLastError();

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00061	89 45 e4	 mov	 DWORD PTR _dwErr$79427[ebp], eax

; 298  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00064	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00067	8b 4d e4	 mov	 ecx, DWORD PTR _dwErr$79427[ebp]
  0006a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 299  :             ret = (ZPOS64_T)-1;

  0006d	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
  00074	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp+4], -1

; 300  :         }
; 301  :         else

  0007b	eb 0c		 jmp	 SHORT $LN3@win32_tell
$LN2@win32_tell:

; 302  :             ret=pos.QuadPart;

  0007d	8b 55 e8	 mov	 edx, DWORD PTR _pos$79425[ebp]
  00080	89 55 f0	 mov	 DWORD PTR _ret$[ebp], edx
  00083	8b 45 ec	 mov	 eax, DWORD PTR _pos$79425[ebp+4]
  00086	89 45 f4	 mov	 DWORD PTR _ret$[ebp+4], eax
$LN3@win32_tell:

; 303  :     }
; 304  :     return ret;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _ret$[ebp]
  0008c	8b 55 f4	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 305  : }

  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_dwErr$79407 = -20					; size = 4
_pos$79405 = -16					; size = 8
_ret$ = -8						; size = 4
_hFile$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 262  :     long ret=-1;

  00006	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 263  :     HANDLE hFile = NULL;

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 264  :     if (stream!=NULL)

  00014	83 7d 0c 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00018	74 08		 je	 SHORT $LN4@win32_tell@2

; 265  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	89 4d fc	 mov	 DWORD PTR _hFile$[ebp], ecx
$LN4@win32_tell@2:

; 266  :     if (hFile != NULL)

  00022	83 7d fc 00	 cmp	 DWORD PTR _hFile$[ebp], 0
  00026	74 4d		 je	 SHORT $LN3@win32_tell@2

; 267  :     {
; 268  :         LARGE_INTEGER pos;
; 269  :         pos.QuadPart = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$79405[ebp], 0
  0002f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pos$79405[ebp+4], 0

; 270  : 
; 271  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00036	6a 01		 push	 1
  00038	8d 55 f0	 lea	 edx, DWORD PTR _pos$79405[ebp]
  0003b	52		 push	 edx
  0003c	8b 45 f4	 mov	 eax, DWORD PTR _pos$79405[ebp+4]
  0003f	50		 push	 eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _pos$79405[ebp]
  00043	51		 push	 ecx
  00044	8b 55 fc	 mov	 edx, DWORD PTR _hFile$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	85 c0		 test	 eax, eax
  00052	75 1b		 jne	 SHORT $LN2@win32_tell@2

; 272  :         {
; 273  :             DWORD dwErr = GetLastError();

  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0005a	89 45 ec	 mov	 DWORD PTR _dwErr$79407[ebp], eax

; 274  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0005d	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00060	8b 4d ec	 mov	 ecx, DWORD PTR _dwErr$79407[ebp]
  00063	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 275  :             ret = -1;

  00066	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1

; 276  :         }
; 277  :         else

  0006d	eb 06		 jmp	 SHORT $LN3@win32_tell@2
$LN2@win32_tell@2:

; 278  :             ret=(long)pos.LowPart;

  0006f	8b 55 f0	 mov	 edx, DWORD PTR _pos$79405[ebp]
  00072	89 55 f8	 mov	 DWORD PTR _ret$[ebp], edx
$LN3@win32_tell@2:

; 279  :     }
; 280  :     return ret;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]

; 281  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 170  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 171  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 172  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 173  : 
; 174  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 175  : 
; 176  : #ifdef IOWIN32_USING_WINRT_API
; 177  : #ifdef UNICODE
; 178  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 179  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 180  : #else
; 181  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 182  :     {
; 183  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 184  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 185  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 186  :     }
; 187  : #endif
; 188  : #else
; 189  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open

; 190  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open:

; 191  : #endif
; 192  : 
; 193  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 194  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcW
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 150  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 151  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 152  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 153  : 
; 154  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 155  : 
; 156  : #ifdef IOWIN32_USING_WINRT_API
; 157  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 158  :         hFile = CreateFile2((LPCWSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition,NULL);
; 159  : #else
; 160  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@2
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@2

; 161  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@2:

; 162  : #endif
; 163  : 
; 164  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 165  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcA
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 126  :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 127  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 128  :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 129  : 
; 130  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 131  : 
; 132  : #ifdef IOWIN32_USING_WINRT_API
; 133  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 134  :     {
; 135  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 136  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 137  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 138  :     }
; 139  : #else
; 140  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@3
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@3

; 141  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@3:

; 142  : #endif
; 143  : 
; 144  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 145  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_func
; Function compile flags: /Odtp
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_mode_fopen$ = -24					; size = 4
_dwDesiredAccess$ = -20					; size = 4
_dwCreationDisposition$ = -16				; size = 4
_dwFlagsAndAttributes$ = -12				; size = 4
_hFile$ = -8						; size = 4
_dwShareMode$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 97   :     const char* mode_fopen = NULL;

  00006	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 98   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 99   :     HANDLE hFile = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hFile$[ebp], 0

; 100  : 
; 101  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00017	50		 push	 eax
  00018	8d 4d fc	 lea	 ecx, DWORD PTR _dwShareMode$[ebp]
  0001b	51		 push	 ecx
  0001c	8d 55 f0	 lea	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  0001f	52		 push	 edx
  00020	8d 45 ec	 lea	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 _win32_translate_open_mode
  0002d	83 c4 14	 add	 esp, 20			; 00000014H

; 102  : 
; 103  : #ifdef IOWIN32_USING_WINRT_API
; 104  : #ifdef UNICODE
; 105  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 106  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 107  : #else
; 108  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 109  :     {
; 110  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 111  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 112  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 113  :     }
; 114  : #endif
; 115  : #else
; 116  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  00030	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  00034	74 27		 je	 SHORT $LN1@win32_open@4
  00036	83 7d ec 00	 cmp	 DWORD PTR _dwDesiredAccess$[ebp], 0
  0003a	74 21		 je	 SHORT $LN1@win32_open@4

; 117  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0003c	6a 00		 push	 0
  0003e	8b 55 f4	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00041	52		 push	 edx
  00042	8b 45 f0	 mov	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _dwShareMode$[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 ec	 mov	 edx, DWORD PTR _dwDesiredAccess$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _filename$[ebp]
  00053	50		 push	 eax
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0005a	89 45 f8	 mov	 DWORD PTR _hFile$[ebp], eax
$LN1@win32_open@4:

; 118  : #endif
; 119  : 
; 120  :     return win32_build_iowin(hFile);

  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _hFile$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _win32_build_iowin
  00066	83 c4 04	 add	 esp, 4

; 121  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
_win32_open64_file_func ENDP
PUBLIC	_fill_win32_filefunc64W
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 454  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 455  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 456  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 457  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 458  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 459  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 460  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 461  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64A
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 440  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 441  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 442  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 443  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 444  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 445  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 446  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 447  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 448  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 427  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 428  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 429  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 430  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 431  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek64_file_func

; 432  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 433  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 434  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 435  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 416  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _win32_read_file_func

; 417  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _win32_write_file_func

; 418  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 419  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _win32_seek_file_func

; 420  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _win32_close_file_func

; 421  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 422  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 423  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_win32_filefunc ENDP
END
